{"file_contents":{"design_guidelines.md":{"content":"# Design Guidelines for Book Reading Tracker\n\n## Design Approach\n**Reference-Based Approach**: Drawing inspiration from Notion and Goodreads for their excellent balance of information density and visual appeal. The app should feel scholarly yet modern, emphasizing readability and organization.\n\n## Core Design Elements\n\n### Color Palette\n**Light Mode:**\n- Primary: 25 20% 20% (Deep warm brown for text and primary actions)\n- Secondary: 35 18% 40% (Warm medium brown for secondary text)\n- Background: 35 15% 97% (Warm cream white)\n- Accent: 20 85% 55% (Rich burnt orange for progress indicators)\n\n**Dark Mode:**\n- Primary: 35 15% 85% (Warm light cream for text)\n- Secondary: 35 15% 65% (Medium warm gray)\n- Background: 25 25% 6% (Deep warm charcoal)\n- Accent: 20 75% 65% (Softer warm orange for dark mode)\n\n### Typography\n- **Primary Font**: Inter (clean, readable)\n- **Accent Font**: Crimson Text (for book titles and quotes)\n- **Sizes**: text-sm, text-base, text-lg, text-xl, text-2xl\n- **Weights**: 400 (regular), 500 (medium), 600 (semibold)\n\n### Layout System\n**Spacing Units**: Use Tailwind units of 2, 4, 6, 8, and 12 consistently\n- Tight spacing: p-2, m-2\n- Standard spacing: p-4, m-4, gap-4\n- Section spacing: p-6, m-6\n- Page spacing: p-8, m-8\n- Large spacing: p-12, m-12\n\n### Component Library\n\n**Navigation**\n- Sidebar navigation with icons and labels\n- Sections: My Library, Currently Reading, Progress, Notes\n- Clean, minimal design with subtle hover states\n\n**Book Cards**\n- Compact cards showing cover placeholder, title, author, genre\n- Progress bars for currently reading books\n- \"Usefulness\" rating display\n- Clean typography hierarchy\n\n**Data Displays**\n- Reading statistics dashboard with cards\n- Progress tracking with visual indicators\n- Time estimates with clear typography\n- Notes section with comfortable reading spacing\n\n**Forms**\n- Clean input fields with proper labeling\n- Genre dropdown/tags\n- Rating systems for usefulness\n- Text areas for notes with good line height\n\n**Overlays**\n- Modal dialogs for adding/editing books\n- Simple, focused design\n- Proper backdrop blur\n\n### Visual Hierarchy\n- Book titles prominently displayed in Crimson Text\n- Clear separation between sections\n- Generous whitespace for comfortable reading\n- Subtle shadows and borders for card separation\n\n### Interaction Design\n- Hover states on interactive elements\n- Smooth transitions (duration-200)\n- Clear visual feedback for actions\n- Accessible focus states\n\n## Key Design Principles\n1. **Reading-First**: Design optimized for text consumption and note-taking\n2. **Information Clarity**: Clear hierarchy for book data and progress\n3. **Minimal Distraction**: Clean interface that doesn't compete with content\n4. **Progress Emphasis**: Visual progress indicators are prominent but not overwhelming\n5. **Scholarly Aesthetic**: Professional appearance suitable for serious readers\n\n## Images\nNo hero images required. Use simple book cover placeholders (rectangles with subtle gradients) and minimal iconography from Heroicons for navigation and actions.","size_bytes":3059},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage, type BookFilters } from \"./storage\";\nimport { \n  insertBookSchema, \n  updateBookSchema, \n  statusEnum,\n  insertReadingSessionSchema,\n  updateReadingSessionSchema,\n  insertBookNoteSchema,\n  updateBookNoteSchema,\n  insertBookReadingStateSchema,\n  updateBookReadingStateSchema,\n  startSessionSchema,\n  pauseSessionSchema,\n  stopSessionSchema,\n  quickAddPagesSchema,\n  insertReadingGoalSchema,\n  updateReadingGoalSchema\n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // External Book Search via Google Books API\n  app.get(\"/api/books/search\", async (req, res) => {\n    try {\n      const { q } = req.query;\n      \n      if (!q || typeof q !== 'string') {\n        return res.status(400).json({ error: \"Search query is required\" });\n      }\n\n      const query = encodeURIComponent(q);\n      const apiUrl = `https://www.googleapis.com/books/v1/volumes?q=${query}&maxResults=20&orderBy=relevance`;\n      \n      const response = await fetch(apiUrl);\n      if (!response.ok) {\n        throw new Error(`Google Books API error: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      \n      const books = (data.items || []).map((item: any) => {\n        const volumeInfo = item.volumeInfo || {};\n        return {\n          googleId: item.id,\n          title: volumeInfo.title || 'Unknown Title',\n          authors: volumeInfo.authors || ['Unknown Author'],\n          description: volumeInfo.description || '',\n          publishedDate: volumeInfo.publishedDate || '',\n          pageCount: volumeInfo.pageCount || 0,\n          categories: volumeInfo.categories || [],\n          thumbnail: volumeInfo.imageLinks?.thumbnail || '',\n          isbn: volumeInfo.industryIdentifiers?.[0]?.identifier || '',\n          publisher: volumeInfo.publisher || '',\n          language: volumeInfo.language || 'en',\n          averageRating: volumeInfo.averageRating || 0,\n          ratingsCount: volumeInfo.ratingsCount || 0\n        };\n      });\n\n      res.json({ books, total: books.length });\n    } catch (error) {\n      console.error(\"External book search error:\", error);\n      res.status(500).json({ error: \"Failed to search books\" });\n    }\n  });\n\n  // Add book from external search results\n  app.post(\"/api/books/add-from-search\", async (req, res) => {\n    try {\n      const { searchResult, format = \"Physical\", status = \"To-Read\", priority = \"Medium\" } = req.body;\n      \n      if (!searchResult) {\n        return res.status(400).json({ error: \"Search result data is required\" });\n      }\n\n      // Transform search result to book format with genre mapping\n      const mapGenre = (category: string | undefined): string => {\n        if (!category) return \"General Non-Fiction\";\n        \n        const lowerCategory = category.toLowerCase();\n        if (lowerCategory.includes('fiction') && !lowerCategory.includes('non-fiction')) return \"Fiction\";\n        if (lowerCategory.includes('business') || lowerCategory.includes('finance') || lowerCategory.includes('economics')) return \"Business / Finance\";\n        if (lowerCategory.includes('self-help') || lowerCategory.includes('personal development') || lowerCategory.includes('self help')) return \"Personal Development\";\n        if (lowerCategory.includes('philosophy') || lowerCategory.includes('spirituality') || lowerCategory.includes('religion')) return \"Philosophy / Spirituality\";\n        if (lowerCategory.includes('psychology') || lowerCategory.includes('self-improvement') || lowerCategory.includes('personal growth')) return \"Psychology / Self-Improvement\";\n        if (lowerCategory.includes('history') || lowerCategory.includes('culture') || lowerCategory.includes('historical')) return \"History / Culture\";\n        if (lowerCategory.includes('science') || lowerCategory.includes('technology') || lowerCategory.includes('technical') || lowerCategory.includes('computer')) return \"Science / Technology\";\n        if (lowerCategory.includes('biography') || lowerCategory.includes('memoir') || lowerCategory.includes('autobiography')) return \"Biography/Memoir\";\n        \n        // Default fallback\n        return \"General Non-Fiction\";\n      };\n\n      const bookData = {\n        title: searchResult.title,\n        author: searchResult.authors.join(\", \"),\n        genre: mapGenre(searchResult.categories[0]),\n        totalPages: searchResult.pageCount || null,\n        currentPage: 0,\n        status,\n        priority,\n        format,\n        coverImage: searchResult.thumbnail || null,\n        description: searchResult.description || null,\n        isbn: searchResult.isbn || null,\n        publisher: searchResult.publisher || null,\n        publishedDate: searchResult.publishedDate || null,\n        rating: null,\n        usefulness: null,\n        tags: [],\n        topics: []\n      };\n\n      // Validate the book data\n      const validatedData = insertBookSchema.parse(bookData);\n      \n      // Create the book\n      const book = await storage.createBook(validatedData);\n      res.status(201).json(book);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid book data\", details: error.errors });\n      }\n      console.error(\"Error adding book from search:\", error);\n      res.status(500).json({ error: \"Failed to add book\" });\n    }\n  });\n\n  // Book CRUD routes\n  \n  // Get all books with filtering\n  // Helper function to parse multi-value query parameters (handles comma-separated values)\n  const parseMultiValue = (value: any): string[] => {\n    if (!value) return [];\n    if (Array.isArray(value)) {\n      return value.flatMap(v => String(v).split(\",\").map(s => s.trim()).filter(Boolean));\n    }\n    return String(value).split(\",\").map(s => s.trim()).filter(Boolean);\n  };\n\n  app.get(\"/api/books\", async (req, res) => {\n    try {\n      const filters: BookFilters = {};\n      \n      if (req.query.search) filters.search = req.query.search as string;\n      if (req.query.statuses) filters.statuses = parseMultiValue(req.query.statuses);\n      if (req.query.genres) filters.genres = parseMultiValue(req.query.genres);\n      if (req.query.tags) filters.tags = parseMultiValue(req.query.tags);\n      if (req.query.formats) filters.formats = parseMultiValue(req.query.formats);\n      if (req.query.languages) filters.languages = parseMultiValue(req.query.languages);\n      if (req.query.sort) filters.sort = req.query.sort as any;\n      if (req.query.sortOrder) filters.sortOrder = req.query.sortOrder as \"asc\" | \"desc\";\n\n      const books = await storage.getAllBooks(filters);\n      res.json(books);\n    } catch (error) {\n      console.error(\"Error fetching books:\", error);\n      res.status(500).json({ error: \"Failed to fetch books\" });\n    }\n  });\n\n  // Get currently reading books  \n  app.get(\"/api/books/currently-reading\", async (req, res) => {\n    try {\n      const books = await storage.getCurrentlyReadingBooks();\n      res.json(books);\n    } catch (error) {\n      console.error(\"Error fetching currently reading books:\", error);\n      res.status(500).json({ error: \"Failed to fetch currently reading books\" });\n    }\n  });\n\n  // Get a specific book\n  app.get(\"/api/books/:id\", async (req, res) => {\n    try {\n      const book = await storage.getBook(req.params.id);\n      if (!book) {\n        return res.status(404).json({ error: \"Book not found\" });\n      }\n      res.json(book);\n    } catch (error) {\n      console.error(\"Error fetching book:\", error);\n      res.status(500).json({ error: \"Failed to fetch book\" });\n    }\n  });\n\n  // Create a new book\n  app.post(\"/api/books\", async (req, res) => {\n    try {\n      const validatedData = insertBookSchema.parse(req.body);\n      const book = await storage.createBook(validatedData);\n      res.status(201).json(book);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid book data\", details: error.errors });\n      }\n      console.error(\"Error creating book:\", error);\n      res.status(500).json({ error: \"Failed to create book\" });\n    }\n  });\n\n  // Update a book\n  app.patch(\"/api/books/:id\", async (req, res) => {\n    try {\n      const validatedData = updateBookSchema.parse(req.body);\n      const book = await storage.updateBook(req.params.id, validatedData);\n      if (!book) {\n        return res.status(404).json({ error: \"Book not found\" });\n      }\n      res.json(book);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid update data\", details: error.errors });\n      }\n      console.error(\"Error updating book:\", error);\n      res.status(500).json({ error: \"Failed to update book\" });\n    }\n  });\n\n  // Delete a book\n  app.delete(\"/api/books/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteBook(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Book not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting book:\", error);\n      res.status(500).json({ error: \"Failed to delete book\" });\n    }\n  });\n\n  // Bulk operations\n  \n  // Bulk update book status\n  app.post(\"/api/books/bulk/status\", async (req, res) => {\n    try {\n      const { ids, status } = req.body;\n      \n      if (!Array.isArray(ids) || !status) {\n        return res.status(400).json({ error: \"Invalid request: ids array and status required\" });\n      }\n      \n      // Validate status\n      const validStatus = statusEnum.parse(status);\n      \n      const updatedBooks = await storage.updateBooksStatus(ids, validStatus);\n      res.json(updatedBooks);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid status\", details: error.errors });\n      }\n      console.error(\"Error updating book statuses:\", error);\n      res.status(500).json({ error: \"Failed to update book statuses\" });\n    }\n  });\n\n  // Bulk add tags to books\n  app.post(\"/api/books/bulk/tags\", async (req, res) => {\n    try {\n      const { ids, tags } = req.body;\n      \n      if (!Array.isArray(ids) || !Array.isArray(tags)) {\n        return res.status(400).json({ error: \"Invalid request: ids and tags arrays required\" });\n      }\n      \n      const updatedBooks = await storage.addTagsToBooks(ids, tags);\n      res.json(updatedBooks);\n    } catch (error) {\n      console.error(\"Error adding tags to books:\", error);\n      res.status(500).json({ error: \"Failed to add tags to books\" });\n    }\n  });\n\n  // Bulk delete books\n  app.delete(\"/api/books/bulk\", async (req, res) => {\n    try {\n      const { ids } = req.body;\n      \n      if (!Array.isArray(ids)) {\n        return res.status(400).json({ error: \"Invalid request: ids array required\" });\n      }\n      \n      const deleted = await storage.deleteBooks(ids);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Some books not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting books:\", error);\n      res.status(500).json({ error: \"Failed to delete books\" });\n    }\n  });\n\n  // Get books by status\n  app.get(\"/api/books/status/:status\", async (req, res) => {\n    try {\n      const status = req.params.status;\n      const books = await storage.getBooksByStatus(status);\n      res.json(books);\n    } catch (error) {\n      console.error(\"Error fetching books by status:\", error);\n      res.status(500).json({ error: \"Failed to fetch books by status\" });\n    }\n  });\n\n  // ========== SESSION MANAGEMENT ROUTES ==========\n\n  // Session workflow operations\n  \n  // Start a new reading session\n  app.post(\"/api/sessions/start\", async (req, res) => {\n    try {\n      const validatedData = startSessionSchema.parse(req.body);\n      const session = await storage.startSession(validatedData);\n      res.status(201).json(session);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid session data\", details: error.errors });\n      }\n      if (error instanceof Error && error.message.includes(\"already has an active session\")) {\n        return res.status(409).json({ error: error.message });\n      }\n      console.error(\"Error starting session:\", error);\n      res.status(500).json({ error: \"Failed to start session\" });\n    }\n  });\n\n  // Pause an active reading session\n  app.post(\"/api/sessions/:id/pause\", async (req, res) => {\n    try {\n      const validatedData = pauseSessionSchema.parse({ sessionId: req.params.id, ...req.body });\n      const session = await storage.pauseSession(validatedData);\n      if (!session) {\n        return res.status(404).json({ error: \"Session not found or not active\" });\n      }\n      res.json(session);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid pause data\", details: error.errors });\n      }\n      console.error(\"Error pausing session:\", error);\n      res.status(500).json({ error: \"Failed to pause session\" });\n    }\n  });\n\n  // Resume a paused reading session\n  app.post(\"/api/sessions/:id/resume\", async (req, res) => {\n    try {\n      const session = await storage.resumeSession(req.params.id);\n      if (!session) {\n        return res.status(404).json({ error: \"Session not found or not paused\" });\n      }\n      res.json(session);\n    } catch (error) {\n      console.error(\"Error resuming session:\", error);\n      res.status(500).json({ error: \"Failed to resume session\" });\n    }\n  });\n\n  // Stop a reading session\n  app.post(\"/api/sessions/:id/stop\", async (req, res) => {\n    try {\n      const validatedData = stopSessionSchema.parse({ sessionId: req.params.id, ...req.body });\n      const session = await storage.stopSession(validatedData);\n      if (!session) {\n        return res.status(404).json({ error: \"Session not found or not active/paused\" });\n      }\n      res.json(session);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid stop data\", details: error.errors });\n      }\n      console.error(\"Error stopping session:\", error);\n      res.status(500).json({ error: \"Failed to stop session\" });\n    }\n  });\n\n  // Quick add pages without timer\n  app.post(\"/api/sessions/quick-add\", async (req, res) => {\n    try {\n      const validatedData = quickAddPagesSchema.parse(req.body);\n      const session = await storage.quickAddPages(validatedData);\n      res.status(201).json(session);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid quick add data\", details: error.errors });\n      }\n      console.error(\"Error quick adding pages:\", error);\n      res.status(500).json({ error: \"Failed to quick add pages\" });\n    }\n  });\n\n  // Session CRUD operations\n  \n  // Get a specific reading session\n  app.get(\"/api/sessions/:id\", async (req, res) => {\n    try {\n      const session = await storage.getSession(req.params.id);\n      if (!session) {\n        return res.status(404).json({ error: \"Session not found\" });\n      }\n      res.json(session);\n    } catch (error) {\n      console.error(\"Error fetching session:\", error);\n      res.status(500).json({ error: \"Failed to fetch session\" });\n    }\n  });\n\n  // Get sessions for a book\n  app.get(\"/api/books/:bookId/sessions\", async (req, res) => {\n    try {\n      const filters: any = {};\n      \n      if (req.query.state) filters.state = req.query.state;\n      if (req.query.sessionType) filters.sessionType = req.query.sessionType;\n      if (req.query.limit) filters.limit = parseInt(req.query.limit as string);\n      \n      if (req.query.startDate && req.query.endDate) {\n        filters.dateRange = {\n          start: new Date(req.query.startDate as string),\n          end: new Date(req.query.endDate as string)\n        };\n      }\n\n      const sessions = await storage.getSessionsByBook(req.params.bookId, filters);\n      res.json(sessions);\n    } catch (error) {\n      console.error(\"Error fetching book sessions:\", error);\n      res.status(500).json({ error: \"Failed to fetch book sessions\" });\n    }\n  });\n\n  // Get recent sessions across all books\n  app.get(\"/api/sessions/recent\", async (req, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 10;\n      const sessions = await storage.getRecentSessions(limit);\n      res.json(sessions);\n    } catch (error) {\n      console.error(\"Error fetching recent sessions:\", error);\n      res.status(500).json({ error: \"Failed to fetch recent sessions\" });\n    }\n  });\n\n  // Get active session for a book\n  app.get(\"/api/books/:bookId/active-session\", async (req, res) => {\n    try {\n      const session = await storage.getActiveSession(req.params.bookId);\n      res.json(session);\n    } catch (error) {\n      console.error(\"Error fetching active session:\", error);\n      res.status(500).json({ error: \"Failed to fetch active session\" });\n    }\n  });\n\n  // Get all active sessions\n  app.get(\"/api/sessions/active\", async (req, res) => {\n    try {\n      const sessions = await storage.getAllActiveSessions();\n      res.json(sessions);\n    } catch (error) {\n      console.error(\"Error fetching active sessions:\", error);\n      res.status(500).json({ error: \"Failed to fetch active sessions\" });\n    }\n  });\n\n  // Update a reading session\n  app.patch(\"/api/sessions/:id\", async (req, res) => {\n    try {\n      const validatedData = updateReadingSessionSchema.parse(req.body);\n      const session = await storage.updateSession(req.params.id, validatedData);\n      if (!session) {\n        return res.status(404).json({ error: \"Session not found\" });\n      }\n      res.json(session);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid session update data\", details: error.errors });\n      }\n      console.error(\"Error updating session:\", error);\n      res.status(500).json({ error: \"Failed to update session\" });\n    }\n  });\n\n  // Delete a reading session\n  app.delete(\"/api/sessions/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteSession(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Session not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting session:\", error);\n      res.status(500).json({ error: \"Failed to delete session\" });\n    }\n  });\n\n  // ========== NOTES AND QUOTES ROUTES ==========\n\n  // Get a specific note\n  app.get(\"/api/notes/:id\", async (req, res) => {\n    try {\n      const note = await storage.getNote(req.params.id);\n      if (!note) {\n        return res.status(404).json({ error: \"Note not found\" });\n      }\n      res.json(note);\n    } catch (error) {\n      console.error(\"Error fetching note:\", error);\n      res.status(500).json({ error: \"Failed to fetch note\" });\n    }\n  });\n\n  // Get notes for a book\n  app.get(\"/api/books/:bookId/notes\", async (req, res) => {\n    try {\n      const notes = await storage.getNotesByBook(req.params.bookId);\n      res.json(notes);\n    } catch (error) {\n      console.error(\"Error fetching book notes:\", error);\n      res.status(500).json({ error: \"Failed to fetch book notes\" });\n    }\n  });\n\n  // Get notes for a session\n  app.get(\"/api/sessions/:sessionId/notes\", async (req, res) => {\n    try {\n      const notes = await storage.getNotesBySession(req.params.sessionId);\n      res.json(notes);\n    } catch (error) {\n      console.error(\"Error fetching session notes:\", error);\n      res.status(500).json({ error: \"Failed to fetch session notes\" });\n    }\n  });\n\n  // Create a new note\n  app.post(\"/api/notes\", async (req, res) => {\n    try {\n      const validatedData = insertBookNoteSchema.parse(req.body);\n      const note = await storage.createNote(validatedData);\n      res.status(201).json(note);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid note data\", details: error.errors });\n      }\n      console.error(\"Error creating note:\", error);\n      res.status(500).json({ error: \"Failed to create note\" });\n    }\n  });\n\n  // Update a note\n  app.patch(\"/api/notes/:id\", async (req, res) => {\n    try {\n      const validatedData = updateBookNoteSchema.parse(req.body);\n      const note = await storage.updateNote(req.params.id, validatedData);\n      if (!note) {\n        return res.status(404).json({ error: \"Note not found\" });\n      }\n      res.json(note);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid note update data\", details: error.errors });\n      }\n      console.error(\"Error updating note:\", error);\n      res.status(500).json({ error: \"Failed to update note\" });\n    }\n  });\n\n  // Delete a note\n  app.delete(\"/api/notes/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteNote(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Note not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting note:\", error);\n      res.status(500).json({ error: \"Failed to delete note\" });\n    }\n  });\n\n  // ========== READING STATE AND PROGRESS ROUTES ==========\n\n  // Get reading state for a book\n  app.get(\"/api/books/:bookId/reading-state\", async (req, res) => {\n    try {\n      const readingState = await storage.getReadingState(req.params.bookId);\n      res.json(readingState);\n    } catch (error) {\n      console.error(\"Error fetching reading state:\", error);\n      res.status(500).json({ error: \"Failed to fetch reading state\" });\n    }\n  });\n\n  // Update reading state for a book\n  app.patch(\"/api/books/:bookId/reading-state\", async (req, res) => {\n    try {\n      const validatedData = updateBookReadingStateSchema.parse(req.body);\n      const readingState = await storage.updateReadingState(req.params.bookId, validatedData);\n      res.json(readingState);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid reading state data\", details: error.errors });\n      }\n      console.error(\"Error updating reading state:\", error);\n      res.status(500).json({ error: \"Failed to update reading state\" });\n    }\n  });\n\n  // Calculate and get progress forecast for a book\n  app.post(\"/api/books/:bookId/calculate-progress\", async (req, res) => {\n    try {\n      const forecast = await storage.calculateProgress(req.params.bookId);\n      res.json(forecast);\n    } catch (error) {\n      console.error(\"Error calculating progress:\", error);\n      res.status(500).json({ error: \"Failed to calculate progress\" });\n    }\n  });\n\n  // Update book progress (page or percentage)\n  app.patch(\"/api/books/:bookId/progress\", async (req, res) => {\n    try {\n      const { currentPage, progressPercent } = req.body;\n      \n      if (currentPage === undefined && progressPercent === undefined) {\n        return res.status(400).json({ error: \"Either currentPage or progressPercent must be provided\" });\n      }\n      \n      const book = await storage.updateBookProgress(req.params.bookId, currentPage, progressPercent);\n      if (!book) {\n        return res.status(404).json({ error: \"Book not found\" });\n      }\n      res.json(book);\n    } catch (error) {\n      console.error(\"Error updating book progress:\", error);\n      res.status(500).json({ error: \"Failed to update book progress\" });\n    }\n  });\n\n  // ========== ANALYTICS AND STATS ROUTES ==========\n\n  // Get reading statistics for a book\n  app.get(\"/api/books/:bookId/stats\", async (req, res) => {\n    try {\n      const stats = await storage.getReadingStats(req.params.bookId);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching reading stats:\", error);\n      res.status(500).json({ error: \"Failed to fetch reading stats\" });\n    }\n  });\n\n  // Get daily reading statistics\n  app.get(\"/api/stats/daily\", async (req, res) => {\n    try {\n      const dateParam = req.query.date as string;\n      const date = dateParam ? new Date(dateParam) : new Date();\n      \n      if (isNaN(date.getTime())) {\n        return res.status(400).json({ error: \"Invalid date format\" });\n      }\n      \n      const stats = await storage.getDailyReadingStats(date);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching daily stats:\", error);\n      res.status(500).json({ error: \"Failed to fetch daily stats\" });\n    }\n  });\n\n  // Get comprehensive reading stats overview\n  app.get(\"/api/stats/overview\", async (req, res) => {\n    try {\n      const fromParam = req.query.from as string;\n      const toParam = req.query.to as string;\n      \n      // Helper functions for proper date handling\n      const formatDateString = (date: Date): string => {\n        const year = date.getFullYear();\n        const month = String(date.getMonth() + 1).padStart(2, '0');\n        const day = String(date.getDate()).padStart(2, '0');\n        return `${year}-${month}-${day}`;\n      };\n      \n      const parseAndValidateDate = (dateStr: string): Date | null => {\n        if (!dateStr) return null;\n        const match = dateStr.match(/^(\\d{4})-(\\d{1,2})-(\\d{1,2})$/);\n        if (!match) return null;\n        \n        const year = parseInt(match[1], 10);\n        const month = parseInt(match[2], 10) - 1; // 0-indexed\n        const day = parseInt(match[3], 10);\n        \n        const date = new Date(year, month, day);\n        if (date.getFullYear() !== year || date.getMonth() !== month || date.getDate() !== day) {\n          return null; // Invalid date\n        }\n        \n        return date;\n      };\n      \n      const generateDateRange = (start: string, end: string): string[] => {\n        const dates: string[] = [];\n        const startDate = parseAndValidateDate(start);\n        const endDate = parseAndValidateDate(end);\n        \n        if (!startDate || !endDate) return [];\n        \n        const current = new Date(startDate);\n        while (current <= endDate) {\n          dates.push(formatDateString(current));\n          current.setDate(current.getDate() + 1);\n        }\n        \n        return dates;\n      };\n      \n      // Default to last 30 days if no range provided\n      const today = new Date();\n      const defaultFrom = new Date(today);\n      defaultFrom.setDate(today.getDate() - 30);\n      \n      const fromDate = fromParam ? \n        (parseAndValidateDate(fromParam) ? formatDateString(parseAndValidateDate(fromParam)!) : null) :\n        formatDateString(defaultFrom);\n      \n      const toDate = toParam ? \n        (parseAndValidateDate(toParam) ? formatDateString(parseAndValidateDate(toParam)!) : null) :\n        formatDateString(today);\n      \n      // Validate dates\n      if (!fromDate || !toDate) {\n        return res.status(400).json({ error: \"Invalid date format. Use YYYY-MM-DD.\" });\n      }\n      \n      // Clamp toDate to today if it's in the future\n      const todayStr = formatDateString(today);\n      const clampedToDate = toDate > todayStr ? todayStr : toDate;\n      \n      // Validate range\n      if (fromDate > clampedToDate) {\n        return res.status(400).json({ error: \"From date must be before or equal to to date.\" });\n      }\n      \n      // Extend range backwards for streak calculation (up to 365 days from end of range)\n      const clampedToDateObj = parseAndValidateDate(clampedToDate)!;\n      const extendedStartDate = new Date(clampedToDateObj);\n      extendedStartDate.setDate(clampedToDateObj.getDate() - 365);\n      const extendedFrom = formatDateString(extendedStartDate);\n      \n      // Get daily totals for both the requested range and extended range for streaks\n      const [dailyTotalsData, extendedDailyTotalsData, allBooks, activeBooks] = await Promise.all([\n        storage.getDailyTotalsInRange(fromDate, clampedToDate),\n        storage.getDailyTotalsInRange(extendedFrom, clampedToDate),\n        storage.getAllBooks(),\n        storage.getCurrentlyReadingBooks()\n      ]);\n      \n      // Create full date range with zero-fill for missing days\n      const allDatesInRange = generateDateRange(fromDate, clampedToDate);\n      const dailyTotalsMap = new Map(dailyTotalsData.map(day => [day.date, day]));\n      const extendedDailyTotalsMap = new Map(extendedDailyTotalsData.map(day => [day.date, day]));\n      \n      const fullDailyTotals = allDatesInRange.map(date => \n        dailyTotalsMap.get(date) || { \n          id: 0, \n          date, \n          pages: 0, \n          minutes: 0, \n          sessions: 0 \n        }\n      );\n      \n      // Calculate totals\n      const totals = {\n        pages: fullDailyTotals.reduce((sum, day) => sum + day.pages, 0),\n        minutes: fullDailyTotals.reduce((sum, day) => sum + day.minutes, 0),\n        sessions: fullDailyTotals.reduce((sum, day) => sum + day.sessions, 0),\n      };\n      \n      // Calculate streaks properly\n      const calculateStreaks = () => {\n        // Get extended data for current streak calculation (anchored to requested end date)\n        const extendedDates = generateDateRange(extendedFrom, clampedToDate);\n        const extendedDailyTotals = extendedDates.map(date => {\n          const existingDay = extendedDailyTotalsMap.get(date);\n          return existingDay || { id: 0, date, pages: 0, minutes: 0, sessions: 0 };\n        });\n        \n        let currentStreak = 0;\n        let bestStreak = 0;\n        let tempStreak = 0;\n        \n        // Calculate current streak (work backwards from the end of requested range)\n        for (let i = extendedDailyTotals.length - 1; i >= 0; i--) {\n          const day = extendedDailyTotals[i];\n          const isReadDay = day.pages >= 1 || day.minutes >= 5;\n          \n          if (isReadDay) {\n            currentStreak++;\n          } else {\n            break; // End of current streak\n          }\n        }\n        \n        // Calculate best streak in the requested range\n        for (const day of fullDailyTotals) {\n          const isReadDay = day.pages >= 1 || day.minutes >= 5;\n          \n          if (isReadDay) {\n            tempStreak++;\n            bestStreak = Math.max(bestStreak, tempStreak);\n          } else {\n            tempStreak = 0;\n          }\n        }\n        \n        return { current: currentStreak, best: bestStreak };\n      };\n      \n      const streak = calculateStreaks();\n      \n      // Get finished books in range (using date-only comparison)\n      const finishedBooks = await Promise.all(\n        allBooks\n          .filter(book => {\n            if (book.status !== \"finished\" || !book.completedAt) return false;\n            const completedDate = formatDateString(book.completedAt);\n            return completedDate >= fromDate && completedDate <= clampedToDate;\n          })\n          .map(async (book) => {\n            try {\n              const stats = await storage.getReadingStats(book.id);\n              const daysToFinish = book.startedAt && book.completedAt ? \n                Math.ceil((book.completedAt.getTime() - book.startedAt.getTime()) / (1000 * 60 * 60 * 24)) : 0;\n              \n              return {\n                id: book.id,\n                title: book.title,\n                daysToFinish,\n                avgPph: stats.averagePagesPerHour,\n                completedAt: book.completedAt,\n              };\n            } catch (error) {\n              console.error(`Error calculating stats for finished book ${book.id}:`, error);\n              return {\n                id: book.id,\n                title: book.title,\n                daysToFinish: 0,\n                avgPph: 0,\n                completedAt: book.completedAt,\n              };\n            }\n          })\n      );\n      \n      // Get active books with ETAs\n      const activeEtas = await Promise.all(\n        activeBooks.map(async (book) => {\n          try {\n            const progress = await storage.calculateProgress(book.id);\n            const progressPct = book.totalPages ? (book.currentPage || 0) / book.totalPages : 0;\n            \n            return {\n              bookId: book.id,\n              title: book.title,\n              progressPct: Math.round(progressPct * 100),\n              etaDate: progress.eta ? formatDateString(progress.eta) : null,\n              bitePages: progress.dailyTarget || 1,\n            };\n          } catch (error) {\n            console.error(`Error calculating progress for book ${book.id}:`, error);\n            return {\n              bookId: book.id,\n              title: book.title,\n              progressPct: 0,\n              etaDate: null,\n              bitePages: 1,\n            };\n          }\n        })\n      );\n      \n      // Create sparkline data with zero-fill\n      const sparkline = fullDailyTotals.map(day => ({\n        date: day.date,\n        pages: day.pages,\n      }));\n      \n      // Create heatmap data with zero-fill\n      const heatmap = fullDailyTotals.map(day => ({\n        date: day.date,\n        pages: day.pages,\n        minutes: day.minutes,\n      }));\n      \n      // Goal calculation based on range\n      const daysInRange = allDatesInRange.length;\n      const avgPagesPerDay = totals.pages / Math.max(1, daysInRange);\n      \n      const goals = {\n        targetPages: Math.round(avgPagesPerDay * 30), // Extrapolate to 30 days\n        targetMinutes: Math.round((totals.minutes / Math.max(1, daysInRange)) * 30),\n        biteTargetPerDay: Math.max(1, Math.round(avgPagesPerDay)),\n      };\n      \n      res.json({\n        totals,\n        goals,\n        streak,\n        finishedBooks: finishedBooks\n          .sort((a, b) => b.completedAt!.getTime() - a.completedAt!.getTime())\n          .map(book => ({ id: book.id, title: book.title, daysToFinish: book.daysToFinish, avgPph: book.avgPph })),\n        activeEtas,\n        sparkline,\n        heatmap,\n        range: { from: fromDate, to: clampedToDate },\n      });\n    } catch (error) {\n      console.error(\"Error fetching stats overview:\", error);\n      res.status(500).json({ error: \"Failed to fetch stats overview\" });\n    }\n  });\n\n  // Search books using Google Books API\n  app.get(\"/api/books/search\", async (req, res) => {\n    try {\n      const query = req.query.q as string;\n      if (!query || query.trim().length < 2) {\n        return res.status(400).json({ error: \"Query must be at least 2 characters long\" });\n      }\n\n      const searchUrl = `https://www.googleapis.com/books/v1/volumes?q=${encodeURIComponent(query)}&maxResults=20&printType=books&orderBy=relevance`;\n      \n      const response = await fetch(searchUrl);\n      if (!response.ok) {\n        throw new Error(`Google Books API responded with status ${response.status}`);\n      }\n      \n      const data = await response.json();\n      \n      // Transform Google Books API response to our format\n      const books = (data.items || []).map((item: any) => {\n        const volumeInfo = item.volumeInfo || {};\n        const imageLinks = volumeInfo.imageLinks || {};\n        \n        return {\n          googleId: item.id,\n          title: volumeInfo.title || 'Unknown Title',\n          authors: volumeInfo.authors || ['Unknown Author'],\n          description: volumeInfo.description || '',\n          publishedDate: volumeInfo.publishedDate || '',\n          pageCount: volumeInfo.pageCount || 0,\n          categories: volumeInfo.categories || [],\n          thumbnail: imageLinks.thumbnail || imageLinks.smallThumbnail || '',\n          isbn: volumeInfo.industryIdentifiers?.find((id: any) => id.type === 'ISBN_13')?.identifier ||\n                volumeInfo.industryIdentifiers?.find((id: any) => id.type === 'ISBN_10')?.identifier || '',\n          publisher: volumeInfo.publisher || '',\n          language: volumeInfo.language || 'en',\n          averageRating: volumeInfo.averageRating || 0,\n          ratingsCount: volumeInfo.ratingsCount || 0,\n        };\n      });\n\n      res.json({ books, total: data.totalItems || 0 });\n    } catch (error) {\n      console.error(\"Error searching books:\", error);\n      res.status(500).json({ error: \"Failed to search books\" });\n    }\n  });\n\n  // Add book from search result\n  app.post(\"/api/books/add-from-search\", async (req, res) => {\n    try {\n      const searchResult = z.object({\n        googleId: z.string().optional(),\n        title: z.string(),\n        authors: z.array(z.string()).optional(),\n        author: z.string().optional(),\n        description: z.string().optional(),\n        publishedDate: z.string().optional(),\n        pageCount: z.number().optional(),\n        categories: z.array(z.string()).optional(),\n        thumbnail: z.string().optional(),\n        isbn: z.string().optional(),\n        publisher: z.string().optional(),\n        language: z.string().optional(),\n        averageRating: z.number().optional(),\n        ratingsCount: z.number().optional(),\n        genre: z.string().optional(),\n        status: z.string().optional(),\n        priority: z.string().optional(),\n        format: z.string().optional(),\n        totalPages: z.number().optional(),\n      }).parse(req.body);\n\n      // Extract main genre from categories and map to our genres\n      const mapToOurGenre = (category: string): string => {\n        const lowerCategory = category.toLowerCase();\n        if (lowerCategory.includes('fiction') || lowerCategory.includes('novel')) return 'Fiction';\n        if (lowerCategory.includes('business') || lowerCategory.includes('finance')) return 'Business / Finance';\n        if (lowerCategory.includes('self-help') || lowerCategory.includes('personal development')) return 'Personal Development';\n        if (lowerCategory.includes('philosophy') || lowerCategory.includes('spirituality')) return 'Philosophy / Spirituality';\n        if (lowerCategory.includes('psychology')) return 'Psychology / Self-Improvement';\n        if (lowerCategory.includes('history') || lowerCategory.includes('culture')) return 'History / Culture';\n        if (lowerCategory.includes('science') || lowerCategory.includes('technology')) return 'Science / Technology';\n        if (lowerCategory.includes('biography') || lowerCategory.includes('memoir')) return 'Biography/Memoir';\n        return 'General Non-Fiction';\n      };\n      \n      const genre = searchResult.categories && searchResult.categories.length > 0 \n        ? mapToOurGenre(searchResult.categories[0])\n        : 'General Non-Fiction';\n\n      // Convert search result to book format\n      const bookData = {\n        title: searchResult.title,\n        author: Array.isArray(searchResult.authors) ? searchResult.authors.join(', ') : searchResult.author || 'Unknown Author',\n        genre: genre as \"Fiction\" | \"Personal Development\" | \"Business / Finance\" | \"Philosophy / Spirituality\" | \"Psychology / Self-Improvement\" | \"History / Culture\" | \"Science / Technology\" | \"General Non-Fiction\" | \"Biography/Memoir\",\n        status: 'toRead' as const,\n        priority: 3, // medium priority\n        format: 'paper' as const,\n        totalPages: searchResult.pageCount || 0,\n        currentPage: 0,\n        notes: searchResult.description || '',\n        tags: searchResult.categories || [],\n        progress: 0,\n        topics: searchResult.categories || [],\n        language: searchResult.language || 'en',\n      };\n\n      const book = await storage.createBook(bookData);\n      res.status(201).json(book);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          error: \"Invalid book data\", \n          details: error.errors \n        });\n      }\n      console.error(\"Error adding book from search:\", error);\n      res.status(500).json({ error: \"Failed to add book\" });\n    }\n  });\n\n  // Import books from CSV/JSON\n  app.post(\"/api/books/import\", async (req, res) => {\n    try {\n      const { books, options } = req.body;\n      \n      if (!Array.isArray(books)) {\n        return res.status(400).json({ error: \"Books must be an array\" });\n      }\n\n      const importResult = {\n        success: true,\n        imported: 0,\n        errors: [] as string[],\n        duplicates: 0,\n      };\n\n      // Get existing books for duplicate detection\n      const existingBooks = await storage.getAllBooks();\n      const existingBooksMap = new Map(\n        existingBooks.map(book => [`${book.title.toLowerCase()}-${book.author.toLowerCase()}`, book])\n      );\n\n      for (let i = 0; i < books.length; i++) {\n        const bookData = books[i];\n        \n        try {\n          // Validate required fields\n          if (!bookData.title || !bookData.author) {\n            importResult.errors.push(`Row ${i + 1}: Missing title or author`);\n            continue;\n          }\n\n          // Check for duplicates\n          const key = `${bookData.title.toLowerCase()}-${bookData.author.toLowerCase()}`;\n          const existingBook = existingBooksMap.get(key);\n          \n          if (existingBook) {\n            if (options?.skipDuplicates && !options?.updateExisting) {\n              importResult.duplicates++;\n              continue;\n            }\n            \n            if (options?.updateExisting) {\n              // Update existing book\n              const updates = {\n                genre: bookData.genre || existingBook.genre,\n                status: bookData.status || existingBook.status,\n                priority: bookData.priority || existingBook.priority,\n                format: bookData.format || existingBook.format,\n                totalPages: bookData.totalPages || existingBook.totalPages,\n                language: bookData.language || existingBook.language,\n                tags: bookData.tags || existingBook.tags,\n                notes: bookData.notes || existingBook.notes,\n                ...(options?.preserveProgress ? {} : {\n                  currentPage: bookData.currentPage || 0,\n                  progress: bookData.progress || 0,\n                }),\n              };\n              \n              await storage.updateBook(existingBook.id, updates);\n              importResult.imported++;\n              continue;\n            }\n          }\n\n          // Create new book\n          const newBook = {\n            title: bookData.title,\n            author: bookData.author,\n            genre: bookData.genre || 'General Non-Fiction',\n            status: bookData.status || 'toRead',\n            priority: bookData.priority || 3,\n            format: bookData.format || 'paper',\n            totalPages: bookData.totalPages || 0,\n            currentPage: bookData.currentPage || 0,\n            progress: bookData.progress || 0,\n            language: bookData.language || 'English',\n            tags: bookData.tags || [],\n            notes: bookData.notes || [],\n            topics: bookData.tags || [],\n          };\n\n          await storage.createBook(newBook);\n          importResult.imported++;\n          \n        } catch (error) {\n          console.error(`Error importing book ${i + 1}:`, error);\n          importResult.errors.push(`Row ${i + 1}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n      }\n\n      if (importResult.errors.length > 0) {\n        importResult.success = false;\n      }\n\n      res.json(importResult);\n    } catch (error) {\n      console.error(\"Error importing books:\", error);\n      res.status(500).json({ error: \"Failed to import books\" });\n    }\n  });\n\n  // Export books as CSV/JSON\n  app.get(\"/api/books/export\", async (req, res) => {\n    try {\n      const format = req.query.format as string || 'json';\n      const includeNotes = req.query.includeNotes === 'true';\n      const includeTags = req.query.includeTags === 'true';\n      const statusFilter = req.query.status as string;\n      \n      let books = await storage.getAllBooks();\n      \n      // Filter by status if specified\n      if (statusFilter) {\n        const statuses = statusFilter.split(',');\n        books = books.filter(book => statuses.includes(book.status));\n      }\n\n      if (format === 'csv') {\n        const headers = [\n          'Title',\n          'Author', \n          'Genre',\n          'Status',\n          'Priority',\n          'Format',\n          'Total Pages',\n          'Current Page',\n          'Progress',\n          'Language',\n          'Added Date',\n          'Started Date',\n          'Completed Date',\n          'Last Read Date',\n          ...(includeTags ? ['Tags'] : []),\n          ...(includeNotes ? ['Notes'] : []),\n        ];\n\n        const rows = books.map(book => {\n          const row = [\n            book.title || '',\n            book.author || '',\n            book.genre || '',\n            book.status || '',\n            book.priority?.toString() || '',\n            book.format || '',\n            book.totalPages?.toString() || '',\n            book.currentPage?.toString() || '',\n            `${Math.round((book.progress || 0) * 100)}%`,\n            book.language || '',\n            book.addedAt ? new Date(book.addedAt).toISOString().split('T')[0] : '',\n            book.startedAt ? new Date(book.startedAt).toISOString().split('T')[0] : '',\n            book.completedAt ? new Date(book.completedAt).toISOString().split('T')[0] : '',\n            book.lastReadAt ? new Date(book.lastReadAt).toISOString().split('T')[0] : '',\n            ...(includeTags ? [(book.tags || []).join('; ')] : []),\n            ...(includeNotes ? [(book.notes || []).join('; ')] : []),\n          ];\n          \n          return row.map(cell => {\n            const str = String(cell);\n            if (str.includes(',') || str.includes('\"') || str.includes('\\n')) {\n              return `\"${str.replace(/\"/g, '\"\"')}\"`;\n            }\n            return str;\n          });\n        });\n\n        const csvContent = [headers, ...rows].map(row => row.join(',')).join('\\n');\n        \n        res.setHeader('Content-Type', 'text/csv');\n        res.setHeader('Content-Disposition', 'attachment; filename=\"my-library.csv\"');\n        res.send(csvContent);\n      } else {\n        // JSON export\n        const exportData = {\n          exportDate: new Date().toISOString(),\n          totalBooks: books.length,\n          books: books.map(book => ({\n            title: book.title,\n            author: book.author,\n            genre: book.genre,\n            status: book.status,\n            priority: book.priority,\n            format: book.format,\n            totalPages: book.totalPages,\n            currentPage: book.currentPage,\n            progress: book.progress,\n            language: book.language,\n            addedAt: book.addedAt,\n            startedAt: book.startedAt,\n            completedAt: book.completedAt,\n            lastReadAt: book.lastReadAt,\n            ...(includeTags && { tags: book.tags }),\n            ...(includeNotes && { notes: book.notes }),\n          })),\n        };\n\n        res.setHeader('Content-Type', 'application/json');\n        res.setHeader('Content-Disposition', 'attachment; filename=\"my-library.json\"');\n        res.json(exportData);\n      }\n    } catch (error) {\n      console.error(\"Error exporting books:\", error);\n      res.status(500).json({ error: \"Failed to export books\" });\n    }\n  });\n\n  // Reading Goals API endpoints\n  app.get(\"/api/reading-goals\", async (req, res) => {\n    try {\n      const goals = await storage.getAllReadingGoals();\n      res.json(goals);\n    } catch (error) {\n      console.error(\"Error fetching reading goals:\", error);\n      res.status(500).json({ error: \"Failed to fetch reading goals\" });\n    }\n  });\n\n  app.post(\"/api/reading-goals\", async (req, res) => {\n    try {\n      const goalData = insertReadingGoalSchema.parse(req.body);\n      const goal = await storage.createReadingGoal(goalData);\n      res.status(201).json(goal);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid goal data\", details: error.errors });\n      }\n      console.error(\"Error creating reading goal:\", error);\n      res.status(500).json({ error: \"Failed to create reading goal\" });\n    }\n  });\n\n  app.patch(\"/api/reading-goals/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = updateReadingGoalSchema.parse(req.body);\n      const goal = await storage.updateReadingGoal(id, updates);\n      res.json(goal);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid goal data\", details: error.errors });\n      }\n      console.error(\"Error updating reading goal:\", error);\n      res.status(500).json({ error: \"Failed to update reading goal\" });\n    }\n  });\n\n  app.delete(\"/api/reading-goals/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteReadingGoal(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting reading goal:\", error);\n      res.status(500).json({ error: \"Failed to delete reading goal\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":48893},"server/storage.ts":{"content":"import { \n  type Book, \n  type InsertBook, \n  type UpdateBook,\n  type ReadingSession,\n  type InsertReadingSession,\n  type UpdateReadingSession,\n  type BookNote,\n  type InsertBookNote,\n  type UpdateBookNote,\n  type BookReadingState,\n  type InsertBookReadingState,\n  type UpdateBookReadingState,\n  type DailyTotals,\n  type InsertDailyTotals,\n  type DailyBookTotals,\n  type InsertDailyBookTotals,\n  type ReadingGoal,\n  type InsertReadingGoal,\n  type UpdateReadingGoal,\n  type StartSessionRequest,\n  type PauseSessionRequest,\n  type StopSessionRequest,\n  type QuickAddPagesRequest,\n  BOOK_STATUSES \n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface BookFilters {\n  search?: string;\n  statuses?: string[];\n  genres?: string[];\n  tags?: string[];\n  formats?: string[];\n  languages?: string[];\n  sort?: \"priority\" | \"addedAt\" | \"title\" | \"author\" | \"lastReadAt\" | \"progress\";\n  sortOrder?: \"asc\" | \"desc\";\n}\n\nexport interface SessionFilters {\n  bookId?: string;\n  dateRange?: { start: Date; end: Date };\n  state?: string;\n  sessionType?: string;\n  limit?: number;\n}\n\nexport interface IStorage {\n  // Book operations\n  getBook(id: string): Promise<Book | undefined>;\n  getAllBooks(filters?: BookFilters): Promise<Book[]>;\n  getCurrentlyReadingBooks(): Promise<Book[]>;\n  getBooksByStatus(status: string): Promise<Book[]>;\n  createBook(book: InsertBook): Promise<Book>;\n  updateBook(id: string, updates: UpdateBook): Promise<Book | undefined>;\n  updateBooksStatus(ids: string[], status: string): Promise<Book[]>;\n  addTagsToBooks(ids: string[], tags: string[]): Promise<Book[]>;\n  deleteBook(id: string): Promise<boolean>;\n  deleteBooks(ids: string[]): Promise<boolean>;\n\n  // Reading session operations\n  getSession(id: string): Promise<ReadingSession | undefined>;\n  getSessionsByBook(bookId: string, filters?: SessionFilters): Promise<ReadingSession[]>;\n  getRecentSessions(limit?: number): Promise<ReadingSession[]>;\n  getActiveSession(bookId: string): Promise<ReadingSession | undefined>;\n  getAllActiveSessions(): Promise<ReadingSession[]>;\n  createSession(session: InsertReadingSession): Promise<ReadingSession>;\n  updateSession(id: string, updates: UpdateReadingSession): Promise<ReadingSession | undefined>;\n  deleteSession(id: string): Promise<boolean>;\n\n  // Session workflow operations\n  startSession(request: StartSessionRequest): Promise<ReadingSession>;\n  pauseSession(request: PauseSessionRequest): Promise<ReadingSession | undefined>;\n  resumeSession(sessionId: string): Promise<ReadingSession | undefined>;\n  stopSession(request: StopSessionRequest): Promise<ReadingSession | undefined>;\n  quickAddPages(request: QuickAddPagesRequest): Promise<ReadingSession>;\n\n  // Notes and quotes operations\n  getNote(id: string): Promise<BookNote | undefined>;\n  getNotesByBook(bookId: string): Promise<BookNote[]>;\n  getNotesBySession(sessionId: string): Promise<BookNote[]>;\n  createNote(note: InsertBookNote): Promise<BookNote>;\n  updateNote(id: string, updates: UpdateBookNote): Promise<BookNote | undefined>;\n  deleteNote(id: string): Promise<boolean>;\n\n  // Reading state and progress operations\n  getReadingState(bookId: string): Promise<BookReadingState | undefined>;\n  updateReadingState(bookId: string, updates: UpdateBookReadingState): Promise<BookReadingState>;\n  calculateProgress(bookId: string): Promise<{ averagePph: number; eta: Date | null; dailyTarget: number }>;\n  updateBookProgress(bookId: string, currentPage?: number, progressPercent?: number): Promise<Book | undefined>;\n\n  // Analytics and forecasting\n  getReadingStats(bookId: string): Promise<{\n    totalSessions: number;\n    totalTimeMinutes: number;\n    totalPagesRead: number;\n    averagePagesPerHour: number;\n    lastSession: Date | null;\n  }>;\n  getDailyReadingStats(date: Date): Promise<{\n    sessionsCount: number;\n    totalMinutes: number;\n    totalPages: number;\n    booksRead: string[];\n  }>;\n\n  // Daily totals operations for high-performance stats\n  upsertDailyTotals(date: string, pages: number, minutes: number, sessions: number): Promise<DailyTotals>;\n  upsertDailyBookTotals(date: string, bookId: string, pages: number, minutes: number, sessions: number): Promise<DailyBookTotals>;\n  getDailyTotalsInRange(startDate: string, endDate: string): Promise<DailyTotals[]>;\n  getDailyBookTotalsInRange(startDate: string, endDate: string, bookId?: string): Promise<DailyBookTotals[]>;\n\n  // Reading Goals\n  getAllReadingGoals(): Promise<ReadingGoal[]>;\n  getReadingGoalById(id: string): Promise<ReadingGoal | null>;\n  createReadingGoal(goal: InsertReadingGoal): Promise<ReadingGoal>;\n  updateReadingGoal(id: string, updates: UpdateReadingGoal): Promise<ReadingGoal>;\n  deleteReadingGoal(id: string): Promise<void>;\n}\n\nexport class MemStorage implements IStorage {\n  private books: Map<string, Book>;\n  private sessions: Map<string, ReadingSession>;\n  private notes: Map<string, BookNote>;\n  private readingStates: Map<string, BookReadingState>;\n  private dailyTotals: Map<string, DailyTotals>;\n  private dailyBookTotals: Map<string, DailyBookTotals>;\n  private readingGoals: Map<string, ReadingGoal>;\n\n  constructor() {\n    this.books = new Map();\n    this.sessions = new Map();\n    this.notes = new Map();\n    this.readingStates = new Map();\n    this.dailyTotals = new Map();\n    this.dailyBookTotals = new Map();\n    this.readingGoals = new Map();\n  }\n\n  async getBook(id: string): Promise<Book | undefined> {\n    return this.books.get(id);\n  }\n\n  async getAllBooks(filters?: BookFilters): Promise<Book[]> {\n    let books = Array.from(this.books.values());\n\n    if (filters) {\n      // Apply search filter\n      if (filters.search) {\n        const searchLower = filters.search.toLowerCase();\n        books = books.filter(book => \n          book.title.toLowerCase().includes(searchLower) ||\n          book.author.toLowerCase().includes(searchLower) ||\n          (book.topics || []).some(topic => topic.toLowerCase().includes(searchLower)) ||\n          (book.tags || []).some(tag => tag.toLowerCase().includes(searchLower))\n        );\n      }\n\n      // Apply status filter\n      if (filters.statuses && filters.statuses.length > 0) {\n        books = books.filter(book => filters.statuses!.includes(book.status));\n      }\n\n      // Apply genre filter\n      if (filters.genres && filters.genres.length > 0) {\n        books = books.filter(book => filters.genres!.includes(book.genre));\n      }\n\n      // Apply tags filter\n      if (filters.tags && filters.tags.length > 0) {\n        books = books.filter(book => \n          filters.tags!.some(tag => (book.tags || []).includes(tag))\n        );\n      }\n\n      // Apply format filter\n      if (filters.formats && filters.formats.length > 0) {\n        books = books.filter(book => book.format && filters.formats!.includes(book.format));\n      }\n\n      // Apply language filter\n      if (filters.languages && filters.languages.length > 0) {\n        books = books.filter(book => book.language && filters.languages!.includes(book.language));\n      }\n\n      // Apply sorting\n      if (filters.sort) {\n        const sortOrder = filters.sortOrder || \"desc\";\n        books.sort((a, b) => {\n          let aVal: any, bVal: any;\n          \n          switch (filters.sort) {\n            case \"priority\":\n              aVal = a.priority || 3;\n              bVal = b.priority || 3;\n              break;\n            case \"addedAt\":\n              aVal = a.addedAt?.getTime() || 0;\n              bVal = b.addedAt?.getTime() || 0;\n              break;\n            case \"title\":\n              aVal = a.title.toLowerCase();\n              bVal = b.title.toLowerCase();\n              break;\n            case \"author\":\n              aVal = a.author.toLowerCase();\n              bVal = b.author.toLowerCase();\n              break;\n            case \"lastReadAt\":\n              aVal = a.lastReadAt?.getTime() || 0;\n              bVal = b.lastReadAt?.getTime() || 0;\n              break;\n            case \"progress\":\n              aVal = a.progress || 0;\n              bVal = b.progress || 0;\n              break;\n            default:\n              return 0;\n          }\n\n          if (sortOrder === \"asc\") {\n            return aVal < bVal ? -1 : aVal > bVal ? 1 : 0;\n          } else {\n            return aVal > bVal ? -1 : aVal < bVal ? 1 : 0;\n          }\n        });\n      }\n    }\n\n    return books;\n  }\n\n  async getCurrentlyReadingBooks(): Promise<Book[]> {\n    return Array.from(this.books.values()).filter(book => book.status === \"reading\");\n  }\n\n  async getBooksByStatus(status: string): Promise<Book[]> {\n    return Array.from(this.books.values()).filter(book => book.status === status);\n  }\n\n  async updateBooksStatus(ids: string[], status: string): Promise<Book[]> {\n    const updatedBooks: Book[] = [];\n    for (const id of ids) {\n      const book = this.books.get(id);\n      if (book) {\n        const updatedBook = { \n          ...book, \n          status,\n          lastReadAt: status === \"reading\" ? new Date() : book.lastReadAt,\n          completedAt: status === \"finished\" ? new Date() : null\n        };\n        this.books.set(id, updatedBook);\n        updatedBooks.push(updatedBook);\n      }\n    }\n    return updatedBooks;\n  }\n\n  async addTagsToBooks(ids: string[], tags: string[]): Promise<Book[]> {\n    const updatedBooks: Book[] = [];\n    for (const id of ids) {\n      const book = this.books.get(id);\n      if (book) {\n        const existingTags = book.tags || [];\n        const combinedTags = [...existingTags, ...tags];\n        const newTags = Array.from(new Set(combinedTags)); // Deduplicate\n        const updatedBook = { ...book, tags: newTags };\n        this.books.set(id, updatedBook);\n        updatedBooks.push(updatedBook);\n      }\n    }\n    return updatedBooks;\n  }\n\n  async deleteBooks(ids: string[]): Promise<boolean> {\n    let allDeleted = true;\n    for (const id of ids) {\n      if (!this.books.delete(id)) {\n        allDeleted = false;\n      }\n    }\n    return allDeleted;\n  }\n\n  async createBook(insertBook: InsertBook): Promise<Book> {\n    const id = randomUUID();\n    const now = new Date();\n    const book: Book = { \n      ...insertBook, \n      id,\n      currentPage: insertBook.currentPage || 0,\n      isCurrentlyReading: insertBook.isCurrentlyReading || false,\n      notes: insertBook.notes || [],\n      topics: insertBook.topics || [],\n      tags: insertBook.tags || [],\n      usefulness: insertBook.usefulness || null,\n      totalPages: insertBook.totalPages || null,\n      startedAt: insertBook.startedAt || null,\n      completedAt: insertBook.completedAt || null,\n      status: insertBook.status || \"toRead\",\n      priority: insertBook.priority || 3,\n      format: insertBook.format || \"paper\",\n      language: insertBook.language || \"English\",\n      addedAt: now,\n      lastReadAt: insertBook.lastReadAt || null,\n      progress: insertBook.progress || 0,\n      coverUrl: insertBook.coverUrl || null,\n    };\n    this.books.set(id, book);\n    return book;\n  }\n\n  async updateBook(id: string, updates: UpdateBook): Promise<Book | undefined> {\n    const existingBook = this.books.get(id);\n    if (!existingBook) return undefined;\n    \n    const updatedBook: Book = { ...existingBook, ...updates };\n    this.books.set(id, updatedBook);\n    return updatedBook;\n  }\n\n  async deleteBook(id: string): Promise<boolean> {\n    const deleted = this.books.delete(id);\n    \n    // Clean up related data\n    if (deleted) {\n      // Delete all sessions for this book\n      Array.from(this.sessions.entries()).forEach(([sessionId, session]) => {\n        if (session.bookId === id) {\n          this.sessions.delete(sessionId);\n        }\n      });\n      \n      // Delete all notes for this book\n      Array.from(this.notes.entries()).forEach(([noteId, note]) => {\n        if (note.bookId === id) {\n          this.notes.delete(noteId);\n        }\n      });\n      \n      // Delete reading state\n      this.readingStates.delete(id);\n    }\n    \n    return deleted;\n  }\n\n  // Reading session operations\n  async getSession(id: string): Promise<ReadingSession | undefined> {\n    return this.sessions.get(id);\n  }\n\n  async getSessionsByBook(bookId: string, filters?: SessionFilters): Promise<ReadingSession[]> {\n    let sessions = Array.from(this.sessions.values()).filter(session => session.bookId === bookId);\n\n    if (filters) {\n      if (filters.state) {\n        sessions = sessions.filter(session => session.state === filters.state);\n      }\n      \n      if (filters.sessionType) {\n        sessions = sessions.filter(session => session.sessionType === filters.sessionType);\n      }\n      \n      if (filters.dateRange) {\n        sessions = sessions.filter(session => \n          session.sessionDate >= filters.dateRange!.start && \n          session.sessionDate <= filters.dateRange!.end\n        );\n      }\n      \n      if (filters.limit) {\n        sessions = sessions.slice(0, filters.limit);\n      }\n    }\n\n    // Sort by session date descending\n    return sessions.sort((a, b) => b.sessionDate.getTime() - a.sessionDate.getTime());\n  }\n\n  async getRecentSessions(limit = 10): Promise<ReadingSession[]> {\n    const sessions = Array.from(this.sessions.values());\n    return sessions\n      .sort((a, b) => b.sessionDate.getTime() - a.sessionDate.getTime())\n      .slice(0, limit);\n  }\n\n  async getActiveSession(bookId: string): Promise<ReadingSession | undefined> {\n    return Array.from(this.sessions.values()).find(session => \n      session.bookId === bookId && (session.state === \"active\" || session.state === \"paused\")\n    );\n  }\n\n  async getAllActiveSessions(): Promise<ReadingSession[]> {\n    return Array.from(this.sessions.values()).filter(session => \n      session.state === \"active\" || session.state === \"paused\"\n    );\n  }\n\n  async createSession(insertSession: InsertReadingSession): Promise<ReadingSession> {\n    const id = randomUUID();\n    const now = new Date();\n    \n    const session: ReadingSession = {\n      ...insertSession,\n      id,\n      sessionDate: now,\n      timeZone: insertSession.timeZone || \"UTC\",\n      state: insertSession.state || \"completed\",\n      sessionType: insertSession.sessionType || \"timed\",\n      pagesRead: insertSession.pagesRead || 0,\n      syncStatus: insertSession.syncStatus || \"synced\",\n      startPage: insertSession.startPage || null,\n      endPage: insertSession.endPage || null,\n      pausedAt: insertSession.pausedAt || null,\n      resumedAt: insertSession.resumedAt || null,\n      endedAt: insertSession.endedAt || null,\n      duration: insertSession.duration || null,\n      progressPercent: insertSession.progressPercent || null,\n      pomodoroMinutes: insertSession.pomodoroMinutes || null,\n      sessionNotes: insertSession.sessionNotes || null,\n      deviceType: insertSession.deviceType || null,\n      localId: insertSession.localId || null,\n    };\n    \n    this.sessions.set(id, session);\n    return session;\n  }\n\n  async updateSession(id: string, updates: UpdateReadingSession): Promise<ReadingSession | undefined> {\n    const existingSession = this.sessions.get(id);\n    if (!existingSession) return undefined;\n    \n    const updatedSession: ReadingSession = { ...existingSession, ...updates };\n    this.sessions.set(id, updatedSession);\n    return updatedSession;\n  }\n\n  async deleteSession(id: string): Promise<boolean> {\n    return this.sessions.delete(id);\n  }\n\n  // Session workflow operations\n  async startSession(request: StartSessionRequest): Promise<ReadingSession> {\n    const now = new Date();\n    \n    // Check if there's already an active session for this book\n    const existingActive = await this.getActiveSession(request.bookId);\n    if (existingActive) {\n      throw new Error(\"Book already has an active session\");\n    }\n    \n    // Get the book and current reading state\n    const book = await this.getBook(request.bookId);\n    if (!book) {\n      throw new Error(\"Book not found\");\n    }\n    \n    const readingState = await this.getReadingState(request.bookId);\n    \n    // Auto-fill start page from last session or current page\n    let startPage = request.startPage;\n    if (!startPage && book.format === \"paper\") {\n      if (readingState) {\n        const lastSession = await this.getSessionsByBook(request.bookId, { limit: 1 });\n        startPage = lastSession[0]?.endPage || book.currentPage || 0;\n      } else {\n        startPage = book.currentPage || 0;\n      }\n    }\n    \n    const session = await this.createSession({\n      bookId: request.bookId,\n      startedAt: now,\n      startPage,\n      state: \"active\",\n      sessionType: \"timed\",\n      pagesRead: 0,\n      syncStatus: \"synced\",\n      pomodoroMinutes: request.pomodoroMinutes,\n    });\n    \n    // Update book status and reading state\n    await this.updateBook(request.bookId, { \n      status: \"reading\",\n      lastReadAt: now \n    });\n    \n    await this.updateReadingState(request.bookId, {\n      activeSessionId: session.id,\n      lastSessionAt: now,\n    });\n    \n    return session;\n  }\n\n  async pauseSession(request: PauseSessionRequest): Promise<ReadingSession | undefined> {\n    const session = await this.getSession(request.sessionId);\n    if (!session || session.state !== \"active\") {\n      return undefined;\n    }\n    \n    return await this.updateSession(request.sessionId, {\n      state: \"paused\",\n      pausedAt: new Date(),\n    });\n  }\n\n  async resumeSession(sessionId: string): Promise<ReadingSession | undefined> {\n    const session = await this.getSession(sessionId);\n    if (!session || session.state !== \"paused\") {\n      return undefined;\n    }\n    \n    return await this.updateSession(sessionId, {\n      state: \"active\",\n      resumedAt: new Date(),\n    });\n  }\n\n  async stopSession(request: StopSessionRequest): Promise<ReadingSession | undefined> {\n    const session = await this.getSession(request.sessionId);\n    if (!session || (session.state !== \"active\" && session.state !== \"paused\")) {\n      return undefined;\n    }\n    \n    const now = new Date();\n    const startTime = session.startedAt.getTime();\n    const pauseTime = session.pausedAt?.getTime() || 0;\n    const resumeTime = session.resumedAt?.getTime() || 0;\n    \n    // Calculate total duration accounting for pauses\n    let totalDuration = (now.getTime() - startTime) / (1000 * 60); // minutes\n    if (pauseTime && resumeTime) {\n      totalDuration -= (resumeTime - pauseTime) / (1000 * 60);\n    } else if (pauseTime) {\n      totalDuration = (pauseTime - startTime) / (1000 * 60);\n    }\n    \n    // Calculate pages read\n    let pagesRead = 0;\n    let endPage = request.endPage;\n    \n    if (session.startPage && endPage) {\n      pagesRead = Math.max(0, endPage - session.startPage);\n    }\n    \n    const updatedSession = await this.updateSession(request.sessionId, {\n      state: \"completed\",\n      endedAt: now,\n      endPage,\n      pagesRead,\n      duration: Math.round(totalDuration),\n      sessionNotes: request.sessionNotes,\n    });\n    \n    // Update book progress\n    if (updatedSession && endPage) {\n      await this.updateBookProgress(session.bookId, endPage);\n    }\n    \n    // Update reading state\n    await this.updateReadingState(session.bookId, {\n      activeSessionId: null,\n      lastSessionAt: now,\n    });\n    \n    // Recalculate reading pace\n    await this.calculateProgress(session.bookId);\n    \n    return updatedSession;\n  }\n\n  async quickAddPages(request: QuickAddPagesRequest): Promise<ReadingSession> {\n    const book = await this.getBook(request.bookId);\n    if (!book) {\n      throw new Error(\"Book not found\");\n    }\n    \n    const now = new Date();\n    const currentPage = book.currentPage || 0;\n    const newCurrentPage = currentPage + request.pagesRead;\n    \n    // Create a quick session\n    const session = await this.createSession({\n      bookId: request.bookId,\n      startedAt: now,\n      endedAt: now,\n      startPage: currentPage,\n      endPage: newCurrentPage,\n      pagesRead: request.pagesRead,\n      state: \"completed\",\n      sessionType: \"quick\",\n      syncStatus: \"synced\",\n      duration: undefined, // No timer for quick adds\n      sessionNotes: request.sessionNotes,\n    });\n    \n    // Update book progress\n    await this.updateBookProgress(request.bookId, newCurrentPage);\n    \n    // Update reading state\n    await this.updateReadingState(request.bookId, {\n      lastSessionAt: now,\n    });\n    \n    return session;\n  }\n\n  // Notes and quotes operations\n  async getNote(id: string): Promise<BookNote | undefined> {\n    return this.notes.get(id);\n  }\n\n  async getNotesByBook(bookId: string): Promise<BookNote[]> {\n    return Array.from(this.notes.values())\n      .filter(note => note.bookId === bookId)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async getNotesBySession(sessionId: string): Promise<BookNote[]> {\n    return Array.from(this.notes.values())\n      .filter(note => note.sessionId === sessionId)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async createNote(insertNote: InsertBookNote): Promise<BookNote> {\n    const id = randomUUID();\n    const now = new Date();\n    \n    const note: BookNote = {\n      ...insertNote,\n      id,\n      createdAt: now,\n      noteType: insertNote.noteType || \"note\",\n      tags: insertNote.tags || [],\n      isPrivate: insertNote.isPrivate || false,\n      page: insertNote.page || null,\n      chapter: insertNote.chapter || null,\n      position: insertNote.position || null,\n      sessionId: insertNote.sessionId || null,\n      sourceImage: insertNote.sourceImage || null,\n      ocrConfidence: insertNote.ocrConfidence || null,\n    };\n    \n    this.notes.set(id, note);\n    return note;\n  }\n\n  async updateNote(id: string, updates: UpdateBookNote): Promise<BookNote | undefined> {\n    const existingNote = this.notes.get(id);\n    if (!existingNote) return undefined;\n    \n    const updatedNote: BookNote = { ...existingNote, ...updates };\n    this.notes.set(id, updatedNote);\n    return updatedNote;\n  }\n\n  async deleteNote(id: string): Promise<boolean> {\n    return this.notes.delete(id);\n  }\n\n  // Reading state and progress operations\n  async getReadingState(bookId: string): Promise<BookReadingState | undefined> {\n    return this.readingStates.get(bookId);\n  }\n\n  async updateReadingState(bookId: string, updates: UpdateBookReadingState): Promise<BookReadingState> {\n    const existing = this.readingStates.get(bookId);\n    const now = new Date();\n    \n    const readingState: BookReadingState = {\n      bookId,\n      activeSessionId: null,\n      lastSessionAt: null,\n      averagePagesPerHour: null,\n      recentSessionsCount: 0,\n      lastCalculatedAt: null,\n      dailyPageTarget: null,\n      targetDeadline: null,\n      estimatedFinishDate: null,\n      lastNudgeAt: null,\n      nudgeDismissedAt: null,\n      reminderSettings: null,\n      ...existing,\n      ...updates,\n    };\n    \n    this.readingStates.set(bookId, readingState);\n    return readingState;\n  }\n\n  async calculateProgress(bookId: string): Promise<{ averagePph: number; eta: Date | null; dailyTarget: number }> {\n    const sessions = await this.getSessionsByBook(bookId, { limit: 5 });\n    const book = await this.getBook(bookId);\n    \n    if (!book || sessions.length === 0) {\n      return { averagePph: 0, eta: null, dailyTarget: 0 };\n    }\n    \n    // Calculate average pages per hour from recent sessions\n    const validSessions = sessions.filter(s => s.duration && s.pagesRead && s.duration > 0);\n    \n    let averagePph = 0;\n    if (validSessions.length > 0) {\n      const totalPages = validSessions.reduce((sum, s) => sum + (s.pagesRead || 0), 0);\n      const totalHours = validSessions.reduce((sum, s) => sum + ((s.duration || 0) / 60), 0);\n      averagePph = totalHours > 0 ? totalPages / totalHours : 0;\n    }\n    \n    // Calculate ETA\n    let eta: Date | null = null;\n    if (book.totalPages && book.currentPage && averagePph > 0) {\n      const remainingPages = book.totalPages - book.currentPage;\n      const hoursNeeded = remainingPages / averagePph;\n      const msNeeded = hoursNeeded * 60 * 60 * 1000;\n      eta = new Date(Date.now() + msNeeded);\n    }\n    \n    // Calculate daily target (simplified)\n    const dailyTarget = Math.max(1, Math.round(averagePph * 0.5)); // 30 minutes of reading\n    \n    // Update reading state\n    await this.updateReadingState(bookId, {\n      averagePagesPerHour: averagePph,\n      recentSessionsCount: validSessions.length,\n      estimatedFinishDate: eta,\n      dailyPageTarget: dailyTarget,\n    });\n    \n    return { averagePph, eta, dailyTarget };\n  }\n\n  async updateBookProgress(bookId: string, currentPage?: number, progressPercent?: number): Promise<Book | undefined> {\n    const book = await this.getBook(bookId);\n    if (!book) return undefined;\n    \n    const updates: UpdateBook = { lastReadAt: new Date() };\n    \n    if (currentPage !== undefined) {\n      updates.currentPage = currentPage;\n      \n      // Calculate progress percentage for paper books\n      if (book.totalPages && book.totalPages > 0) {\n        updates.progress = currentPage / book.totalPages;\n      }\n    }\n    \n    if (progressPercent !== undefined) {\n      updates.progress = progressPercent;\n    }\n    \n    // Check if book is finished\n    if (updates.progress && updates.progress >= 1) {\n      updates.status = \"finished\";\n      updates.completedAt = new Date();\n    }\n    \n    return await this.updateBook(bookId, updates);\n  }\n\n  // Analytics and forecasting\n  async getReadingStats(bookId: string): Promise<{\n    totalSessions: number;\n    totalTimeMinutes: number;\n    totalPagesRead: number;\n    averagePagesPerHour: number;\n    lastSession: Date | null;\n  }> {\n    const sessions = await this.getSessionsByBook(bookId);\n    const completedSessions = sessions.filter(s => s.state === \"completed\");\n    \n    const totalSessions = completedSessions.length;\n    const totalTimeMinutes = completedSessions.reduce((sum, s) => sum + (s.duration || 0), 0);\n    const totalPagesRead = completedSessions.reduce((sum, s) => sum + (s.pagesRead || 0), 0);\n    const averagePagesPerHour = totalTimeMinutes > 0 ? (totalPagesRead / totalTimeMinutes) * 60 : 0;\n    const lastSession = sessions.length > 0 ? sessions[0].sessionDate : null;\n    \n    return {\n      totalSessions,\n      totalTimeMinutes,\n      totalPagesRead,\n      averagePagesPerHour,\n      lastSession,\n    };\n  }\n\n  async getDailyReadingStats(date: Date): Promise<{\n    sessionsCount: number;\n    totalMinutes: number;\n    totalPages: number;\n    booksRead: string[];\n  }> {\n    const startOfDay = new Date(date);\n    startOfDay.setHours(0, 0, 0, 0);\n    const endOfDay = new Date(date);\n    endOfDay.setHours(23, 59, 59, 999);\n    \n    const dailySessions = Array.from(this.sessions.values()).filter(session =>\n      session.sessionDate >= startOfDay && session.sessionDate <= endOfDay && session.state === \"completed\"\n    );\n    \n    const sessionsCount = dailySessions.length;\n    const totalMinutes = dailySessions.reduce((sum, s) => sum + (s.duration || 0), 0);\n    const totalPages = dailySessions.reduce((sum, s) => sum + (s.pagesRead || 0), 0);\n    const booksRead = Array.from(new Set(dailySessions.map(s => s.bookId)));\n    \n    return {\n      sessionsCount,\n      totalMinutes,\n      totalPages,\n      booksRead,\n    };\n  }\n\n  // Daily totals operations for high-performance stats\n  async upsertDailyTotals(date: string, pages: number, minutes: number, sessions: number): Promise<DailyTotals> {\n    const existing = this.dailyTotals.get(date);\n    \n    if (existing) {\n      // Update existing totals\n      const updated: DailyTotals = {\n        ...existing,\n        pages: existing.pages + pages,\n        minutes: existing.minutes + minutes,\n        sessions: existing.sessions + sessions,\n      };\n      this.dailyTotals.set(date, updated);\n      return updated;\n    } else {\n      // Create new daily total\n      const newTotal: DailyTotals = {\n        id: this.dailyTotals.size + 1, // Simple increment for memory storage\n        date,\n        pages,\n        minutes,\n        sessions,\n      };\n      this.dailyTotals.set(date, newTotal);\n      return newTotal;\n    }\n  }\n\n  async upsertDailyBookTotals(date: string, bookId: string, pages: number, minutes: number, sessions: number): Promise<DailyBookTotals> {\n    const key = `${date}:${bookId}`;\n    const existing = this.dailyBookTotals.get(key);\n    \n    if (existing) {\n      // Update existing book totals\n      const updated: DailyBookTotals = {\n        ...existing,\n        pages: existing.pages + pages,\n        minutes: existing.minutes + minutes,\n        sessions: existing.sessions + sessions,\n      };\n      this.dailyBookTotals.set(key, updated);\n      return updated;\n    } else {\n      // Create new daily book total\n      const newTotal: DailyBookTotals = {\n        id: this.dailyBookTotals.size + 1, // Simple increment for memory storage\n        date,\n        bookId,\n        pages,\n        minutes,\n        sessions,\n      };\n      this.dailyBookTotals.set(key, newTotal);\n      return newTotal;\n    }\n  }\n\n  async getDailyTotalsInRange(startDate: string, endDate: string): Promise<DailyTotals[]> {\n    return Array.from(this.dailyTotals.values()).filter(total => \n      total.date >= startDate && total.date <= endDate\n    ).sort((a, b) => a.date.localeCompare(b.date));\n  }\n\n  async getDailyBookTotalsInRange(startDate: string, endDate: string, bookId?: string): Promise<DailyBookTotals[]> {\n    let totals = Array.from(this.dailyBookTotals.values()).filter(total => \n      total.date >= startDate && total.date <= endDate\n    );\n    \n    if (bookId) {\n      totals = totals.filter(total => total.bookId === bookId);\n    }\n    \n    return totals.sort((a, b) => a.date.localeCompare(b.date));\n  }\n\n  // Reading Goals Implementation\n  async getAllReadingGoals(): Promise<ReadingGoal[]> {\n    return Array.from(this.readingGoals.values()).sort((a, b) => \n      new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n    );\n  }\n\n  async getReadingGoalById(id: string): Promise<ReadingGoal | null> {\n    return this.readingGoals.get(id) || null;\n  }\n\n  async createReadingGoal(goal: InsertReadingGoal): Promise<ReadingGoal> {\n    const newGoal: ReadingGoal = {\n      id: randomUUID(),\n      ...goal,\n      current: 0,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.readingGoals.set(newGoal.id, newGoal);\n    return newGoal;\n  }\n\n  async updateReadingGoal(id: string, updates: UpdateReadingGoal): Promise<ReadingGoal> {\n    const existing = this.readingGoals.get(id);\n    if (!existing) {\n      throw new Error(`Reading goal with id ${id} not found`);\n    }\n    \n    const updated: ReadingGoal = {\n      ...existing,\n      ...updates,\n      updatedAt: new Date(),\n    };\n    \n    this.readingGoals.set(id, updated);\n    return updated;\n  }\n\n  async deleteReadingGoal(id: string): Promise<void> {\n    if (!this.readingGoals.has(id)) {\n      throw new Error(`Reading goal with id ${id} not found`);\n    }\n    this.readingGoals.delete(id);\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":30905},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, boolean, real, serial, date, uuid } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const books = pgTable(\"books\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  author: text(\"author\").notNull(),\n  genre: text(\"genre\").notNull(),\n  topics: text(\"topics\").array().default([]),\n  usefulness: text(\"usefulness\"), // How the book might be useful\n  totalPages: integer(\"total_pages\"),\n  isCurrentlyReading: boolean(\"is_currently_reading\").default(false),\n  currentPage: integer(\"current_page\").default(0),\n  notes: text(\"notes\").array().default([]),\n  startedAt: timestamp(\"started_at\"),\n  completedAt: timestamp(\"completed_at\"),\n  \n  // New fields for enhanced library management\n  status: text(\"status\").notNull().default(\"toRead\"), // 'toRead'|'reading'|'onHold'|'dnf'|'finished'\n  priority: integer(\"priority\").default(3), // 1-5 scale\n  tags: text(\"tags\").array().default([]),\n  format: text(\"format\").default(\"paper\"), // 'paper'|'ebook'|'audio'\n  language: text(\"language\").default(\"English\"),\n  addedAt: timestamp(\"added_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n  lastReadAt: timestamp(\"last_read_at\"),\n  progress: real(\"progress\").default(0), // 0-1 decimal for percentage\n  coverUrl: text(\"cover_url\"),\n});\n\n// Enhanced reading sessions with state management and timer support\nexport const readingSessions = pgTable(\"reading_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  bookId: varchar(\"book_id\").notNull().references(() => books.id),\n  \n  // Session timing\n  startedAt: timestamp(\"started_at\").notNull(),\n  pausedAt: timestamp(\"paused_at\"),\n  resumedAt: timestamp(\"resumed_at\"),\n  endedAt: timestamp(\"ended_at\"),\n  duration: integer(\"duration\"), // Total reading time in minutes\n  \n  // Progress tracking\n  startPage: integer(\"start_page\"),\n  endPage: integer(\"end_page\"),\n  pagesRead: integer(\"pages_read\").default(0),\n  progressPercent: real(\"progress_percent\"), // For ebooks/audio\n  \n  // Session state and metadata\n  state: text(\"state\").notNull().default(\"completed\"), // 'active'|'paused'|'completed'\n  sessionType: text(\"session_type\").default(\"timed\"), // 'timed'|'quick'\n  pomodoroMinutes: integer(\"pomodoro_minutes\"), // Optional Pomodoro duration\n  \n  // Context\n  sessionDate: timestamp(\"session_date\").notNull().default(sql`CURRENT_TIMESTAMP`),\n  timeZone: text(\"time_zone\").default(\"UTC\"),\n  deviceType: text(\"device_type\"), // For offline sync context\n  \n  // Quick notes during session\n  sessionNotes: text(\"session_notes\"),\n  \n  // Sync status for offline support\n  syncStatus: text(\"sync_status\").default(\"synced\"), // 'pending'|'syncing'|'synced'|'failed'\n  localId: text(\"local_id\"), // For offline session management\n});\n\n// Reading goals for motivation and tracking\nexport const readingGoals = pgTable(\"reading_goals\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  type: text(\"type\").notNull(), // 'books'|'pages'|'minutes'\n  target: integer(\"target\").notNull(),\n  current: integer(\"current\").default(0),\n  period: text(\"period\").notNull(), // 'daily'|'weekly'|'monthly'|'yearly'\n  startDate: date(\"start_date\").notNull(),\n  endDate: date(\"end_date\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n});\n\n// Standalone notes and highlights\nexport const bookNotes = pgTable(\"book_notes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  bookId: varchar(\"book_id\").notNull().references(() => books.id),\n  sessionId: varchar(\"session_id\").references(() => readingSessions.id),\n  \n  // Content\n  content: text(\"content\").notNull(),\n  noteType: text(\"note_type\").notNull().default(\"note\"), // 'note'|'quote'|'highlight'\n  \n  // Location context\n  page: integer(\"page\"),\n  chapter: text(\"chapter\"),\n  position: text(\"position\"), // For ebooks: chapter.paragraph.sentence\n  \n  // Metadata\n  createdAt: timestamp(\"created_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n  tags: text(\"tags\").array().default([]),\n  isPrivate: boolean(\"is_private\").default(false),\n  \n  // OCR/source tracking (for future camera quotes)\n  sourceImage: text(\"source_image_url\"),\n  ocrConfidence: real(\"ocr_confidence\"),\n});\n\n// Book reading state for active session management\nexport const bookReadingState = pgTable(\"book_reading_state\", {\n  bookId: varchar(\"book_id\").primaryKey().references(() => books.id),\n  \n  // Current session info\n  activeSessionId: varchar(\"active_session_id\").references(() => readingSessions.id),\n  lastSessionAt: timestamp(\"last_session_at\"),\n  \n  // Reading pace and forecasting\n  averagePagesPerHour: real(\"average_pages_per_hour\"),\n  recentSessionsCount: integer(\"recent_sessions_count\").default(0),\n  lastCalculatedAt: timestamp(\"last_calculated_at\"),\n  \n  // Daily reading targets\n  dailyPageTarget: integer(\"daily_page_target\"),\n  targetDeadline: timestamp(\"target_deadline\"),\n  estimatedFinishDate: timestamp(\"estimated_finish_date\"),\n  \n  // Nudging and reminders  \n  lastNudgeAt: timestamp(\"last_nudge_at\"),\n  nudgeDismissedAt: timestamp(\"nudge_dismissed_at\"),\n  reminderSettings: text(\"reminder_settings\"), // JSON for time + bite preferences\n});\n\n// Daily reading statistics rollup tables for high-performance stats queries\nexport const dailyTotals = pgTable(\"daily_totals\", {\n  id: serial(\"id\").primaryKey(),\n  date: date(\"date\").notNull(),\n  pages: integer(\"pages\").notNull().default(0),\n  minutes: integer(\"minutes\").notNull().default(0), \n  sessions: integer(\"sessions\").notNull().default(0),\n});\n\nexport const dailyBookTotals = pgTable(\"daily_book_totals\", {\n  id: serial(\"id\").primaryKey(),\n  date: date(\"date\").notNull(),\n  bookId: varchar(\"book_id\").notNull().references(() => books.id, { onDelete: \"cascade\" }),\n  pages: integer(\"pages\").notNull().default(0),\n  minutes: integer(\"minutes\").notNull().default(0),\n  sessions: integer(\"sessions\").notNull().default(0),\n});\n\n// Define the fixed genre options\nexport const BOOK_GENRES = [\n  \"Fiction\",\n  \"Personal Development\", \n  \"Business / Finance\",\n  \"Philosophy / Spirituality\",\n  \"Psychology / Self-Improvement\",\n  \"History / Culture\",\n  \"Science / Technology\", \n  \"General Non-Fiction\",\n  \"Biography/Memoir\"\n] as const;\n\n// Define book status options\nexport const BOOK_STATUSES = [\n  \"toRead\",\n  \"reading\", \n  \"onHold\",\n  \"dnf\",\n  \"finished\"\n] as const;\n\n// Define book format options\nexport const BOOK_FORMATS = [\n  \"paper\",\n  \"ebook\",\n  \"audio\"\n] as const;\n\n// Define session states\nexport const SESSION_STATES = [\n  \"active\",\n  \"paused\", \n  \"completed\"\n] as const;\n\n// Define session types\nexport const SESSION_TYPES = [\n  \"timed\",\n  \"quick\"\n] as const;\n\n// Define note types\nexport const NOTE_TYPES = [\n  \"note\",\n  \"quote\",\n  \"highlight\",\n  \"summary\",\n  \"action\"\n] as const;\n\n// Define sync statuses\nexport const SYNC_STATUSES = [\n  \"pending\",\n  \"syncing\",\n  \"synced\",\n  \"failed\"\n] as const;\n\nexport const genreEnum = z.enum(BOOK_GENRES);\nexport const statusEnum = z.enum(BOOK_STATUSES);\nexport const formatEnum = z.enum(BOOK_FORMATS);\nexport const sessionStateEnum = z.enum(SESSION_STATES);\nexport const sessionTypeEnum = z.enum(SESSION_TYPES);\nexport const noteTypeEnum = z.enum(NOTE_TYPES);\nexport const syncStatusEnum = z.enum(SYNC_STATUSES);\n\nexport const insertBookSchema = createInsertSchema(books).omit({\n  id: true,\n  addedAt: true, // Auto-generated\n}).extend({\n  genre: genreEnum,\n  status: statusEnum.default(\"toRead\"),\n  format: formatEnum.default(\"paper\"),\n  priority: z.number().int().min(1).max(5).default(3),\n  progress: z.number().min(0).max(1).default(0),\n  language: z.string().default(\"English\"),\n  topics: z.array(z.string().trim().min(1).max(40)).max(20).default([]),\n  tags: z.array(z.string().trim().min(1).max(30)).max(15).default([]),\n});\n\nexport const updateBookSchema = insertBookSchema.partial();\n\n// Reading session schemas\nexport const insertReadingSessionSchema = createInsertSchema(readingSessions).omit({\n  id: true,\n  sessionDate: true, // Auto-generated\n}).extend({\n  state: sessionStateEnum.default(\"completed\"),\n  sessionType: sessionTypeEnum.default(\"timed\"),\n  syncStatus: syncStatusEnum.default(\"synced\"),\n  duration: z.number().int().min(0).optional(),\n  pagesRead: z.number().int().min(0).default(0),\n  progressPercent: z.number().min(0).max(1).optional(),\n  pomodoroMinutes: z.number().int().min(5).max(120).optional(),\n});\n\nexport const updateReadingSessionSchema = insertReadingSessionSchema.partial();\n\n// Note schemas\nexport const insertBookNoteSchema = createInsertSchema(bookNotes).omit({\n  id: true,\n  createdAt: true, // Auto-generated\n}).extend({\n  noteType: noteTypeEnum.default(\"note\"),\n  content: z.string().min(1).max(5000),\n  tags: z.array(z.string().trim().min(1).max(30)).max(10).default([]),\n  page: z.number().int().min(1).optional(),\n  ocrConfidence: z.number().min(0).max(1).optional(),\n});\n\nexport const updateBookNoteSchema = insertBookNoteSchema.partial();\n\n// Reading state schemas\nexport const insertBookReadingStateSchema = createInsertSchema(bookReadingState).omit({\n  lastCalculatedAt: true, // Auto-updated\n}).extend({\n  averagePagesPerHour: z.number().min(0).optional(),\n  recentSessionsCount: z.number().int().min(0).default(0),\n  dailyPageTarget: z.number().int().min(1).optional(),\n});\n\nexport const updateBookReadingStateSchema = insertBookReadingStateSchema.partial();\n\n// Daily totals schemas\nexport const insertDailyTotalsSchema = createInsertSchema(dailyTotals).omit({\n  id: true,\n});\n\nexport const insertDailyBookTotalsSchema = createInsertSchema(dailyBookTotals).omit({\n  id: true,\n});\n\n// Session action schemas for API endpoints\nexport const startSessionSchema = z.object({\n  bookId: z.string().uuid(),\n  startPage: z.number().int().min(0).optional(),\n  pomodoroMinutes: z.number().int().min(5).max(120).optional(),\n});\n\nexport const pauseSessionSchema = z.object({\n  sessionId: z.string().uuid(),\n});\n\nexport const stopSessionSchema = z.object({\n  sessionId: z.string().uuid(),\n  endPage: z.number().int().min(0).optional(),\n  sessionNotes: z.string().max(1000).optional(),\n});\n\nexport const quickAddPagesSchema = z.object({\n  bookId: z.string().uuid(),\n  pagesRead: z.number().int().min(1).max(100),\n  sessionNotes: z.string().max(500).optional(),\n});\n\n// Type exports\nexport type InsertBook = z.infer<typeof insertBookSchema>;\nexport type UpdateBook = z.infer<typeof updateBookSchema>;\nexport type Book = typeof books.$inferSelect;\n\nexport type ReadingSession = typeof readingSessions.$inferSelect;\nexport type InsertReadingSession = z.infer<typeof insertReadingSessionSchema>;\nexport type UpdateReadingSession = z.infer<typeof updateReadingSessionSchema>;\n\nexport type BookNote = typeof bookNotes.$inferSelect;\nexport type InsertBookNote = z.infer<typeof insertBookNoteSchema>;\nexport type UpdateBookNote = z.infer<typeof updateBookNoteSchema>;\n\nexport type BookReadingState = typeof bookReadingState.$inferSelect;\nexport type InsertBookReadingState = z.infer<typeof insertBookReadingStateSchema>;\nexport type UpdateBookReadingState = z.infer<typeof updateBookReadingStateSchema>;\n\nexport type DailyTotals = typeof dailyTotals.$inferSelect;\nexport type InsertDailyTotals = z.infer<typeof insertDailyTotalsSchema>;\n\nexport type DailyBookTotals = typeof dailyBookTotals.$inferSelect;\nexport type InsertDailyBookTotals = z.infer<typeof insertDailyBookTotalsSchema>;\n\n// Reading Goals types\nexport const insertReadingGoalSchema = createInsertSchema(readingGoals).omit({ id: true, current: true, createdAt: true, updatedAt: true });\nexport const updateReadingGoalSchema = createInsertSchema(readingGoals).omit({ id: true, createdAt: true, updatedAt: true }).partial();\n\nexport type ReadingGoal = typeof readingGoals.$inferSelect;\nexport type InsertReadingGoal = z.infer<typeof insertReadingGoalSchema>;\nexport type UpdateReadingGoal = z.infer<typeof updateReadingGoalSchema>;\n\n// Action type exports\nexport type StartSessionRequest = z.infer<typeof startSessionSchema>;\nexport type PauseSessionRequest = z.infer<typeof pauseSessionSchema>;\nexport type StopSessionRequest = z.infer<typeof stopSessionSchema>;\nexport type QuickAddPagesRequest = z.infer<typeof quickAddPagesSchema>;\n","size_bytes":12521},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\nimport Library from \"@/pages/library\";\nimport CurrentlyReading from \"@/pages/currently-reading\";\nimport Stats from \"@/pages/stats\";\nimport Notes from \"@/pages/notes\";\nimport Goals from \"@/pages/goals\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Library} />\n      <Route path=\"/reading\" component={CurrentlyReading} />\n      <Route path=\"/stats\" component={Stats} />\n      <Route path=\"/notes\" component={Notes} />\n      <Route path=\"/goals\" component={Goals} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nexport default function App() {\n  // Custom sidebar width for book tracking application\n  const style = {\n    \"--sidebar-width\": \"16rem\",       // 256px for navigation\n    \"--sidebar-width-icon\": \"4rem\",   // default icon width\n  };\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <SidebarProvider style={style as React.CSSProperties}>\n          <div className=\"flex h-screen w-full\">\n            <AppSidebar />\n            <div className=\"flex flex-col flex-1\">\n              <header className=\"flex items-center justify-between p-4 border-b bg-background\" data-testid=\"header-main\">\n                <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n                <ThemeToggle />\n              </header>\n              <main className=\"flex-1 overflow-auto p-6\" data-testid=\"main-content\">\n                <Router />\n              </main>\n            </div>\n          </div>\n        </SidebarProvider>\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n","size_bytes":2076},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 35 15% 97%;\n\n  --foreground: 25 20% 20%;\n\n  --border: 35 12% 85%;\n\n  --card: 35 20% 94%;\n\n  --card-foreground: 25 20% 20%;\n\n  --card-border: 35 15% 87%;\n\n  --sidebar: 35 18% 95%;\n\n  --sidebar-foreground: 25 20% 20%;\n\n  --sidebar-border: 35 15% 89%;\n\n  --sidebar-primary: 20 85% 55%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 35 20% 90%;\n\n  --sidebar-accent-foreground: 20 85% 45%;\n\n  --sidebar-ring: 20 85% 55%;\n\n  --popover: 35 25% 98%;\n\n  --popover-foreground: 25 20% 20%;\n\n  --popover-border: 35 15% 82%;\n\n  --primary: 20 85% 55%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 35 15% 40%;\n\n  --secondary-foreground: 0 0% 100%;\n\n  --muted: 35 15% 90%;\n\n  --muted-foreground: 35 18% 40%;\n\n  --accent: 25 75% 85%;\n\n  --accent-foreground: 25 90% 30%;\n\n  --destructive: 0 75% 55%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 35 12% 85%;\n  --ring: 25 85% 55%;\n  --chart-1: 25 85% 58%;\n  --chart-2: 15 75% 50%;\n  --chart-3: 35 90% 55%;\n  --chart-4: 10 70% 45%;\n  --chart-5: 45 80% 52%;\n\n  --font-sans: 'Lora', serif;\n  --font-serif: 'Geist', sans-serif;\n  --font-mono: 'Space Grotesk', sans-serif;\n  --radius: 0.875rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 25 25% 6%;\n\n  --foreground: 35 15% 85%;\n\n  --border: 25 15% 16%;\n\n  --card: 25 20% 8%;\n\n  --card-foreground: 35 15% 85%;\n\n  --card-border: 25 15% 18%;\n\n  --sidebar: 25 20% 8%;\n\n  --sidebar-foreground: 35 15% 85%;\n\n  --sidebar-border: 25 15% 20%;\n\n  --sidebar-primary: 20 75% 65%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 25 15% 13%;\n\n  --sidebar-accent-foreground: 20 75% 65%;\n\n  --sidebar-ring: 20 75% 65%;\n\n  --popover: 25 25% 4%;\n\n  --popover-foreground: 35 15% 85%;\n\n  --popover-border: 25 15% 14%;\n\n  --primary: 20 75% 65%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 25 15% 18%;\n\n  --secondary-foreground: 35 15% 85%;\n\n  --muted: 25 15% 10%;\n\n  --muted-foreground: 35 15% 65%;\n\n  --accent: 25 15% 12%;\n\n  --accent-foreground: 20 75% 65%;\n\n  --destructive: 0 75% 55%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 25 15% 16%;\n  --ring: 25 75% 60%;\n  --chart-1: 25 85% 68%;\n  --chart-2: 15 75% 60%;\n  --chart-3: 35 90% 65%;\n  --chart-4: 10 70% 55%;\n  --chart-5: 45 80% 62%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":10193},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/add-book-dialog.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { BookSearchInput } from \"./book-search-input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Sparkles, X } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { BOOK_GENRES, BOOK_STATUSES, BOOK_FORMATS, insertBookSchema } from \"@shared/schema\";\nimport { bookSearchService } from \"@/services/bookSearch\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\n// Use the shared insertBookSchema from the backend\nconst addBookSchema = insertBookSchema;\n\ntype AddBookForm = z.infer<typeof addBookSchema>;\n\ninterface AddBookDialogProps {\n  onAddBook?: (book: AddBookForm) => void;\n  trigger?: React.ReactNode;\n  open?: boolean;\n  onOpenChange?: (open: boolean) => void;\n}\n\nexport function AddBookDialog({ onAddBook, trigger, open, onOpenChange }: AddBookDialogProps) {\n  const queryClient = useQueryClient();\n  const [internalIsOpen, setInternalIsOpen] = useState(false);\n  \n  // Use controlled state if provided, otherwise use internal state\n  const isOpen = open !== undefined ? open : internalIsOpen;\n  const setIsOpen = onOpenChange !== undefined ? onOpenChange : setInternalIsOpen;\n  const [hasAutoFetched, setHasAutoFetched] = useState(false);\n  const [topicInput, setTopicInput] = useState(\"\");\n\n  // Mutation for creating books\n  const createBookMutation = useMutation({\n    mutationFn: async (bookData: AddBookForm) => {\n      return await apiRequest('POST', '/api/books', bookData);\n    },\n    onSuccess: (newBook) => {\n      // Invalidate queries to refresh book lists\n      queryClient.invalidateQueries({ queryKey: ['/api/books'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/books/currently-reading'] });\n      \n      // Close dialog and reset form\n      setIsOpen(false);\n      form.reset();\n      setHasAutoFetched(false);\n      setTopicInput(\"\");\n      \n      // Call optional callback\n      if (onAddBook) {\n        onAddBook(newBook);\n      }\n    },\n    onError: (error) => {\n      console.error('Failed to create book:', error);\n    },\n  });\n\n  const form = useForm<AddBookForm>({\n    resolver: zodResolver(addBookSchema),\n    defaultValues: {\n      title: \"\",\n      author: \"\",\n      genre: \"General Non-Fiction\",\n      topics: [],\n      tags: [],\n      usefulness: \"\",\n      totalPages: undefined,\n      isCurrentlyReading: false,\n      currentPage: 0,\n      status: \"toRead\",\n      priority: 3,\n      format: \"paper\",\n      language: \"English\",\n      progress: 0,\n    },\n  });\n\n  const handleBookSelect = (bookData: {\n    title: string;\n    authors: string[];\n    subjects: string[];\n    description?: string;\n    pageCount?: number;\n    publishYear?: number;\n  }) => {\n    // Auto-populate form fields with fetched book data\n    form.setValue(\"title\", bookData.title);\n    form.setValue(\"author\", bookData.authors.join(\", \"));\n    \n    // Use intelligent genre mapping\n    const suggestedGenre = bookSearchService.getCanonicalGenre(bookData.subjects);\n    form.setValue(\"genre\", suggestedGenre as any);\n    \n    // Extract topics using intelligent extraction\n    const suggestedTopics = bookSearchService.extractTopics(bookData.subjects, bookData.description);\n    form.setValue(\"topics\", suggestedTopics);\n    \n    if (bookData.pageCount) {\n      form.setValue(\"totalPages\", bookData.pageCount);\n    }\n    \n    setHasAutoFetched(true);\n    console.log(\"Auto-populated form with book data:\", {\n      ...bookData,\n      suggestedGenre,\n      suggestedTopics\n    });\n  };\n\n  const resetForm = () => {\n    form.reset();\n    setHasAutoFetched(false);\n    setTopicInput(\"\");\n  };\n\n  const [tagInput, setTagInput] = useState(\"\");\n\n  const addTag = (tag: string) => {\n    const trimmedTag = tag.trim();\n    if (!trimmedTag) return;\n    \n    const currentTags = form.getValues(\"tags\");\n    if (!currentTags.includes(trimmedTag)) {\n      form.setValue(\"tags\", [...currentTags, trimmedTag]);\n    }\n    setTagInput(\"\");\n  };\n\n  const removeTag = (tagToRemove: string) => {\n    const currentTags = form.getValues(\"tags\");\n    form.setValue(\"tags\", currentTags.filter(tag => tag !== tagToRemove));\n  };\n\n  const handleTagKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" || e.key === \",\") {\n      e.preventDefault();\n      addTag(tagInput);\n    }\n  };\n\n  const addTopic = (topic: string) => {\n    const trimmedTopic = topic.trim();\n    if (!trimmedTopic) return;\n    \n    const currentTopics = form.getValues(\"topics\");\n    if (!currentTopics.includes(trimmedTopic)) {\n      form.setValue(\"topics\", [...currentTopics, trimmedTopic]);\n    }\n    setTopicInput(\"\");\n  };\n\n  const removeTopic = (topicToRemove: string) => {\n    const currentTopics = form.getValues(\"topics\");\n    form.setValue(\"topics\", currentTopics.filter(topic => topic !== topicToRemove));\n  };\n\n  const handleTopicKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" || e.key === \",\") {\n      e.preventDefault();\n      addTopic(topicInput);\n    }\n  };\n\n  const onSubmit = async (data: AddBookForm) => {\n    try {\n      await createBookMutation.mutateAsync(data);\n    } catch (error) {\n      console.error('Failed to create book:', error);\n    }\n  };\n\n  const defaultTrigger = (\n    <Button data-testid=\"button-add-book\">\n      <Plus className=\"mr-2 h-4 w-4\" />\n      Add Book\n    </Button>\n  );\n\n  return (\n    <Dialog open={isOpen} onOpenChange={(open) => {\n      setIsOpen(open);\n      if (!open) {\n        resetForm();\n      }\n    }}>\n      <DialogTrigger asChild>\n        {trigger || defaultTrigger}\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-[425px]\" data-testid=\"dialog-add-book\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            Add New Book\n            {hasAutoFetched && (\n              <div className=\"flex items-center gap-1 text-sm text-green-600 dark:text-green-400\">\n                <Sparkles className=\"h-4 w-4\" />\n                <span>Details fetched</span>\n              </div>\n            )}\n          </DialogTitle>\n          <DialogDescription>\n            {hasAutoFetched \n              ? \"Book details have been automatically filled. Review and adjust as needed.\"\n              : \"Start typing a book title to search and auto-fill details, or enter manually.\"\n            }\n          </DialogDescription>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"title\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Title</FormLabel>\n                  <FormControl>\n                    <BookSearchInput\n                      value={field.value}\n                      onChange={field.onChange}\n                      onBookSelect={handleBookSelect}\n                      placeholder=\"Start typing to search for books...\"\n                      data-testid=\"input-book-title\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"author\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Author</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Enter author name\" {...field} data-testid=\"input-book-author\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"genre\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Genre</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-book-genre\">\n                        <SelectValue placeholder=\"Select a genre\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {BOOK_GENRES.map((genre) => (\n                        <SelectItem key={genre} value={genre} data-testid={`option-genre-${genre.toLowerCase().replace(/\\s+/g, '-').replace(/\\//g, '-')}`}>\n                          {genre}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"topics\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Topics</FormLabel>\n                  <FormControl>\n                    <div className=\"space-y-2\">\n                      <Input\n                        value={topicInput}\n                        onChange={(e) => setTopicInput(e.target.value)}\n                        onKeyDown={handleTopicKeyPress}\n                        placeholder=\"Enter topics (press Enter or comma to add)\"\n                        data-testid=\"input-book-topics\"\n                      />\n                      {field.value.length > 0 && (\n                        <div className=\"flex flex-wrap gap-2\" data-testid=\"topics-display\">\n                          {field.value.map((topic, index) => (\n                            <Badge \n                              key={index} \n                              variant=\"secondary\" \n                              className=\"text-sm\"\n                              data-testid={`topic-badge-${index}`}\n                            >\n                              {topic}\n                              <button\n                                type=\"button\"\n                                onClick={() => removeTopic(topic)}\n                                className=\"ml-1 hover:text-destructive\"\n                                data-testid={`button-remove-topic-${index}`}\n                              >\n                                <X className=\"h-3 w-3\" />\n                              </button>\n                            </Badge>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"tags\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Tags</FormLabel>\n                  <FormControl>\n                    <div className=\"space-y-2\">\n                      <Input\n                        value={tagInput}\n                        onChange={(e) => setTagInput(e.target.value)}\n                        onKeyDown={handleTagKeyPress}\n                        placeholder=\"Enter tags (press Enter or comma to add)\"\n                        data-testid=\"input-book-tags\"\n                      />\n                      {field.value.length > 0 && (\n                        <div className=\"flex flex-wrap gap-2\" data-testid=\"tags-display\">\n                          {field.value.map((tag, index) => (\n                            <Badge \n                              key={index} \n                              variant=\"secondary\" \n                              className=\"text-sm\"\n                              data-testid={`tag-badge-${index}`}\n                            >\n                              {tag}\n                              <button\n                                type=\"button\"\n                                onClick={() => removeTag(tag)}\n                                className=\"ml-1 hover:text-destructive\"\n                                data-testid={`button-remove-tag-${index}`}\n                              >\n                                <X className=\"h-3 w-3\" />\n                              </button>\n                            </Badge>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"status\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Status</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-book-status\">\n                          <SelectValue placeholder=\"Select status\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {BOOK_STATUSES.map((status) => (\n                          <SelectItem key={status} value={status}>\n                            {status === \"toRead\" ? \"To Read\" : \n                             status === \"reading\" ? \"Reading\" :\n                             status === \"onHold\" ? \"On Hold\" :\n                             status === \"dnf\" ? \"DNF\" :\n                             \"Finished\"}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"priority\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Priority (1-5)</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        min=\"1\" \n                        max=\"5\" \n                        placeholder=\"3\" \n                        {...field}\n                        value={field.value || 3}\n                        onChange={(e) => field.onChange(parseInt(e.target.value) || 3)}\n                        data-testid=\"input-priority\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"format\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Format</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-book-format\">\n                          <SelectValue placeholder=\"Select format\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {BOOK_FORMATS.map((format) => (\n                          <SelectItem key={format} value={format}>\n                            {format === \"paper\" ? \"Paper\" : \n                             format === \"ebook\" ? \"E-book\" : \"Audiobook\"}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"language\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Language</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"English\" \n                        {...field}\n                        data-testid=\"input-language\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n            <FormField\n              control={form.control}\n              name=\"usefulness\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>How might this book be useful? (Optional)</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"e.g., Learning design principles, improving leadership skills...\"\n                      {...field} \n                      value={field.value || \"\"}\n                      data-testid=\"textarea-book-usefulness\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"totalPages\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Total Pages (Optional)</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        placeholder=\"0\" \n                        {...field}\n                        value={field.value || \"\"}\n                        onChange={(e) => field.onChange(e.target.value ? parseInt(e.target.value) : undefined)}\n                        data-testid=\"input-total-pages\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"currentPage\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Current Page</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        placeholder=\"0\" \n                        {...field}\n                        value={field.value || 0}\n                        onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                        data-testid=\"input-current-page\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n            <FormField\n              control={form.control}\n              name=\"isCurrentlyReading\"\n              render={({ field }) => (\n                <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3 space-y-0\">\n                  <div className=\"space-y-0.5\">\n                    <FormLabel>Currently Reading</FormLabel>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Mark this book as one you're actively reading\n                    </div>\n                  </div>\n                  <FormControl>\n                    <Switch\n                      checked={field.value || false}\n                      onCheckedChange={field.onChange}\n                      data-testid=\"switch-currently-reading\"\n                    />\n                  </FormControl>\n                </FormItem>\n              )}\n            />\n            <DialogFooter>\n              <Button type=\"submit\" disabled={createBookMutation.isPending} data-testid=\"button-submit-book\">\n                {createBookMutation.isPending ? \"Adding...\" : \"Add Book\"}\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":20489},"client/src/components/app-sidebar.tsx":{"content":"import { BookOpen, Library, NotebookPen, TrendingUp, Target } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  useSidebar,\n} from \"@/components/ui/sidebar\";\n\nconst navigation = [\n  {\n    title: \"My Library\",\n    url: \"/\",\n    icon: Library,\n  },\n  {\n    title: \"Currently Reading\",\n    url: \"/reading\",\n    icon: BookOpen,\n  },\n  {\n    title: \"Reading Goals\",\n    url: \"/goals\",\n    icon: Target,\n  },\n  {\n    title: \"Reading Stats\",\n    url: \"/stats\", \n    icon: TrendingUp,\n  },\n  {\n    title: \"Notes\",\n    url: \"/notes\",\n    icon: NotebookPen,\n  },\n];\n\nexport function AppSidebar() {\n  const [location] = useLocation();\n  const { setOpenMobile } = useSidebar();\n\n  const handleNavClick = () => {\n    // Auto-minimize sidebar on mobile/small screens\n    setOpenMobile(false);\n    console.log(\"Navigation clicked, sidebar minimized\");\n  };\n\n  return (\n    <Sidebar>\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>BookTracker</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {navigation.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton asChild data-active={location === item.url}>\n                    <Link \n                      href={item.url} \n                      onClick={handleNavClick}\n                      data-testid={`link-${item.title.toLowerCase().replace(/\\s+/g, '-')}`}\n                    >\n                      <item.icon />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n    </Sidebar>\n  );\n}","size_bytes":1938},"client/src/components/book-card.tsx":{"content":"import { useState } from \"react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { \n  MoreHorizontal, \n  Play, \n  BookOpen, \n  Trash2, \n  Edit,\n  ArrowRight,\n  Bookmark,\n  Clock,\n  CheckCircle,\n  XCircle,\n  RotateCcw\n} from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport type { Book } from \"@shared/schema\";\n\ninterface BookCardProps extends Omit<Book, 'topics' | 'tags'> {\n  topics: string[];\n  tags: string[];\n  // Selection features  \n  isSelected?: boolean;\n  showSelection?: boolean;\n  onSelect?: () => void;\n  // View mode\n  viewMode?: \"grid\" | \"list\";\n  // Actions\n  onStartReading?: (id: string) => void;\n  onContinueReading?: (id: string) => void;\n  onViewDetails?: (id: string) => void;\n  onDelete?: (id: string) => void;\n  onEdit?: (id: string) => void;\n  onStatusChange?: (id: string, newStatus: string) => void;\n}\n\n// Status configuration with colors and icons\nconst STATUS_CONFIG = {\n  toRead: { \n    label: \"To Read\", \n    color: \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\", \n    icon: Bookmark \n  },\n  reading: { \n    label: \"Reading\", \n    color: \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\", \n    icon: BookOpen \n  },\n  onHold: { \n    label: \"On Hold\", \n    color: \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\", \n    icon: Clock \n  },\n  dnf: { \n    label: \"DNF\", \n    color: \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\", \n    icon: XCircle \n  },\n  finished: { \n    label: \"Finished\", \n    color: \"bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200\", \n    icon: CheckCircle \n  },\n};\n\nexport function BookCard({\n  id,\n  title,\n  author,\n  genre,\n  topics = [],\n  tags = [],\n  status = \"toRead\",\n  priority = 3,\n  format = \"paper\",\n  language = \"English\",\n  progress = 0,\n  totalPages,\n  currentPage = 0,\n  coverUrl,\n  addedAt,\n  lastReadAt,\n  usefulness,\n  isCurrentlyReading = false,\n  isSelected = false,\n  showSelection = false,\n  viewMode = \"grid\",\n  onSelect,\n  onStartReading,\n  onContinueReading,\n  onViewDetails,\n  onDelete,\n  onEdit,\n  onStatusChange,\n}: BookCardProps) {\n  const [isLoading, setIsLoading] = useState(false);\n  \n  const statusConfig = STATUS_CONFIG[status as keyof typeof STATUS_CONFIG];\n  const StatusIcon = statusConfig?.icon || Bookmark;\n  \n  // Calculate reading progress\n  const readingProgress = (progress || 0) * 100;\n  const pageProgress = totalPages && currentPage \n    ? (currentPage / totalPages) * 100 \n    : readingProgress;\n\n  const handlePrimaryAction = async () => {\n    setIsLoading(true);\n    \n    if (status === \"reading\" && onContinueReading) {\n      onContinueReading(id);\n    } else if (status !== \"finished\" && onStartReading) {\n      onStartReading(id);\n    }\n    \n    setTimeout(() => setIsLoading(false), 500);\n  };\n\n  const handleViewDetails = () => {\n    onViewDetails?.(id);\n  };\n\n  const handleDelete = () => {\n    onDelete?.(id);\n  };\n\n  const handleEdit = () => {\n    onEdit?.(id);\n  };\n\n  const handleStatusChange = () => {\n    const nextStatus = status === \"toRead\" ? \"reading\" : \"toRead\";\n    onStatusChange?.(id, nextStatus);\n  };\n\n  const handleStatusBadgeClick = () => {\n    onStatusChange?.(id, getNextStatus(status));\n  };\n\n  const getNextStatus = (currentStatus: string) => {\n    const statusOrder = [\"toRead\", \"reading\", \"onHold\", \"finished\", \"dnf\"];\n    const currentIndex = statusOrder.indexOf(currentStatus);\n    return statusOrder[(currentIndex + 1) % statusOrder.length];\n  };\n\n  const getPrimaryButtonText = () => {\n    if (status === \"reading\") return \"Continue\";\n    if (status === \"finished\") return \"Finished\";\n    return \"Start\";\n  };\n\n  const getPrimaryButtonIcon = () => {\n    if (status === \"reading\") return ArrowRight;\n    if (status === \"finished\") return CheckCircle;\n    return Play;\n  };\n\n  const PrimaryIcon = getPrimaryButtonIcon();\n\n  if (viewMode === \"list\") {\n    return (\n      <Card className={`hover-elevate ${isSelected ? 'ring-2 ring-primary' : ''}`} data-testid={`card-book-${id}`}>\n        <CardContent className=\"flex items-center gap-4 p-4\">\n          {showSelection && (\n            <Checkbox\n              checked={isSelected}\n              onCheckedChange={onSelect}\n              data-testid={`checkbox-select-${id}`}\n            />\n          )}\n          \n          {/* Cover placeholder */}\n          <div className=\"w-12 h-16 bg-muted rounded flex-shrink-0 flex items-center justify-center\">\n            {coverUrl ? (\n              <img src={coverUrl} alt={title} className=\"w-full h-full object-cover rounded\" />\n            ) : (\n              <BookOpen className=\"h-6 w-6 text-muted-foreground\" />\n            )}\n          </div>\n          \n          {/* Book info */}\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-start justify-between mb-2\">\n              <div className=\"flex-1 min-w-0\">\n                <h3 className=\"font-serif font-medium truncate\" data-testid={`text-book-title-${id}`}>\n                  {title}\n                </h3>\n                <p className=\"text-sm text-muted-foreground truncate\" data-testid={`text-book-author-${id}`}>\n                  by {author}\n                </p>\n              </div>\n              \n              <div className=\"flex items-center gap-2 ml-4\">\n                {/* Status badge */}\n                <Badge \n                  className={`${statusConfig?.color} cursor-pointer hover-elevate`} \n                  onClick={handleStatusBadgeClick}\n                  data-testid={`badge-status-${id}`}\n                >\n                  <StatusIcon className=\"h-3 w-3 mr-1\" />\n                  {statusConfig?.label}\n                </Badge>\n                \n                {/* Priority indicator */}\n                {priority && priority !== 3 && (\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    P{priority}\n                  </Badge>\n                )}\n              </div>\n            </div>\n            \n            {/* Progress bar */}\n            {readingProgress > 0 && (\n              <div className=\"mb-2\">\n                <Progress value={readingProgress} className=\"h-1\" data-testid={`progress-reading-${id}`} />\n              </div>\n            )}\n            \n            {/* Tags */}\n            <div className=\"flex items-center gap-2 flex-wrap\">\n              <Badge variant=\"outline\" className=\"text-xs\">{genre}</Badge>\n              {tags.slice(0, 3).map((tag, index) => (\n                <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                  {tag}\n                </Badge>\n              ))}\n              {tags.length > 3 && (\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  +{tags.length - 3}\n                </Badge>\n              )}\n            </div>\n          </div>\n          \n          {/* Actions */}\n          <div className=\"flex items-center gap-2\">\n            {status !== \"finished\" && (\n              <Button\n                size=\"sm\"\n                onClick={handlePrimaryAction}\n                disabled={isLoading}\n                data-testid={`button-primary-action-${id}`}\n              >\n                <PrimaryIcon className=\"h-4 w-4 mr-1\" />\n                {isLoading ? \"...\" : getPrimaryButtonText()}\n              </Button>\n            )}\n            \n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" size=\"sm\" data-testid={`button-book-menu-${id}`}>\n                  <MoreHorizontal className=\"h-4 w-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                <DropdownMenuItem onClick={handleViewDetails}>\n                  <BookOpen className=\"mr-2 h-4 w-4\" />\n                  View Details\n                </DropdownMenuItem>\n                <DropdownMenuItem>\n                  <Edit className=\"mr-2 h-4 w-4\" />\n                  Edit\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem onClick={handleDelete} className=\"text-destructive\">\n                  <Trash2 className=\"mr-2 h-4 w-4\" />\n                  Delete\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Grid view (default)\n  return (\n    <Card className={`hover-elevate ${isSelected ? 'ring-2 ring-primary' : ''}`} data-testid={`card-book-${id}`}>\n      <CardHeader className=\"flex flex-row items-start justify-between space-y-0 pb-2\">\n        <div className=\"flex items-start gap-2 flex-1\">\n          {showSelection && (\n            <Checkbox\n              checked={isSelected}\n              onCheckedChange={onSelect}\n              className=\"mt-1\"\n              data-testid={`checkbox-select-${id}`}\n            />\n          )}\n          \n          <div className=\"flex-1 min-w-0\">\n            <CardTitle className=\"text-base font-serif line-clamp-2\" data-testid={`text-book-title-${id}`}>\n              {title}\n            </CardTitle>\n            <p className=\"text-sm text-muted-foreground mt-1\" data-testid={`text-book-author-${id}`}>\n              by {author}\n            </p>\n          </div>\n        </div>\n        \n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" size=\"icon\" data-testid={`button-book-menu-${id}`}>\n              <MoreHorizontal className=\"h-4 w-4\" />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\">\n            <DropdownMenuItem onClick={handleViewDetails}>\n              <BookOpen className=\"mr-2 h-4 w-4\" />\n              View Details\n            </DropdownMenuItem>\n            <DropdownMenuItem onClick={handleEdit}>\n              <Edit className=\"mr-2 h-4 w-4\" />\n              Edit\n            </DropdownMenuItem>\n            <DropdownMenuItem onClick={handleStatusChange}>\n              <RotateCcw className=\"mr-2 h-4 w-4\" />\n              Move to {status === \"toRead\" ? \"Reading\" : \"To-Read\"}\n            </DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem onClick={handleDelete} className=\"text-destructive\">\n              <Trash2 className=\"mr-2 h-4 w-4\" />\n              Delete\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-3\">\n        {/* Cover image placeholder */}\n        {coverUrl && (\n          <div className=\"aspect-[3/4] rounded-md overflow-hidden bg-muted\">\n            <img src={coverUrl} alt={title} className=\"w-full h-full object-cover\" />\n          </div>\n        )}\n        \n        {/* Status and priority */}\n        <div className=\"flex items-center gap-2 flex-wrap\">\n          <Badge \n            className={`${statusConfig?.color} cursor-pointer hover-elevate`} \n            onClick={handleStatusBadgeClick}\n            data-testid={`badge-status-${id}`}\n          >\n            <StatusIcon className=\"h-3 w-3 mr-1\" />\n            {statusConfig?.label}\n          </Badge>\n          \n          {priority && priority !== 3 && (\n            <Badge variant=\"outline\" className=\"text-xs\">\n              Priority {priority}\n            </Badge>\n          )}\n          \n          <Badge variant=\"outline\" className=\"text-xs\">{format}</Badge>\n        </div>\n        \n        {/* Progress */}\n        {readingProgress > 0 && (\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between text-sm\">\n              <span>Progress</span>\n              <span data-testid={`text-progress-percent-${id}`}>{Math.round(readingProgress)}%</span>\n            </div>\n            <Progress value={readingProgress} className=\"h-2\" data-testid={`progress-reading-${id}`} />\n          </div>\n        )}\n        \n        {/* Topics */}\n        {topics.length > 0 && (\n          <div className=\"flex flex-wrap gap-1\" data-testid={`topics-display-${id}`}>\n            {topics.slice(0, 3).map((topic, index) => (\n              <Badge \n                key={index} \n                variant=\"secondary\" \n                className=\"text-xs\"\n                data-testid={`topic-badge-${id}-${index}`}\n              >\n                {topic}\n              </Badge>\n            ))}\n            {topics.length > 3 && (\n              <Badge variant=\"secondary\" className=\"text-xs\">\n                +{topics.length - 3}\n              </Badge>\n            )}\n          </div>\n        )}\n        \n        {/* Tags */}\n        {tags.length > 0 && (\n          <div className=\"flex flex-wrap gap-1\" data-testid={`tags-display-${id}`}>\n            {tags.slice(0, 3).map((tag, index) => (\n              <Badge \n                key={index} \n                variant=\"outline\" \n                className=\"text-xs\"\n                data-testid={`tag-badge-${id}-${index}`}\n              >\n                {tag}\n              </Badge>\n            ))}\n            {tags.length > 3 && (\n              <Badge variant=\"outline\" className=\"text-xs\">\n                +{tags.length - 3}\n              </Badge>\n            )}\n          </div>\n        )}\n        \n        {/* Usefulness */}\n        {usefulness && (\n          <p className=\"text-sm text-muted-foreground line-clamp-2\" data-testid={`text-usefulness-${id}`}>\n            <strong>Why:</strong> {usefulness}\n          </p>\n        )}\n\n        {/* Primary action button */}\n        {status !== \"finished\" && (\n          <Button \n            onClick={handlePrimaryAction} \n            disabled={isLoading}\n            className=\"w-full\"\n            data-testid={`button-primary-action-${id}`}\n          >\n            <PrimaryIcon className=\"mr-2 h-4 w-4\" />\n            {isLoading ? \"Loading...\" : getPrimaryButtonText()}\n          </Button>\n        )}\n        \n        {status === \"finished\" && (\n          <div className=\"text-center text-sm text-muted-foreground py-2\">\n            <CheckCircle className=\"h-4 w-4 inline mr-1\" />\n            Completed\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":14473},"client/src/components/book-search-input.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Loader2, Book, Calendar, User, Hash } from \"lucide-react\";\nimport { useBookSearch } from \"@/hooks/useBookSearch\";\nimport { bookSearchService, BookSuggestion } from \"@/services/bookSearch\";\n\ninterface BookSearchInputProps {\n  value: string;\n  onChange: (value: string) => void;\n  onBookSelect?: (book: {\n    title: string;\n    authors: string[];\n    subjects: string[];\n    description?: string;\n    pageCount?: number;\n    publishYear?: number;\n  }) => void;\n  placeholder?: string;\n  disabled?: boolean;\n  \"data-testid\"?: string;\n}\n\nexport function BookSearchInput({\n  value,\n  onChange,\n  onBookSelect,\n  placeholder = \"Start typing to search for books...\",\n  disabled,\n  \"data-testid\": testId,\n}: BookSearchInputProps) {\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const [isLoadingDetails, setIsLoadingDetails] = useState(false);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const suggestionsRef = useRef<HTMLDivElement>(null);\n  \n  const { suggestions, isLoading, error, search, clearSuggestions } = useBookSearch();\n\n  const handleInputChange = (newValue: string) => {\n    onChange(newValue);\n    search(newValue);\n    setShowSuggestions(true);\n  };\n\n  const handleSuggestionClick = async (suggestion: BookSuggestion) => {\n    setShowSuggestions(false);\n    setIsLoadingDetails(true);\n    \n    try {\n      // Set the title immediately for better UX\n      onChange(suggestion.title);\n      \n      // Fetch detailed book information - this now includes robust fallback\n      const details = await bookSearchService.getBookDetails(suggestion);\n      \n      if (details && onBookSelect) {\n        const bookData = {\n          title: details.title,\n          authors: details.authors,\n          subjects: details.subjects,\n          description: details.description,\n          pageCount: details.pageCount,\n          publishYear: details.publishYear,\n        };\n        \n        onBookSelect(bookData);\n        console.log(\"Auto-populated book details:\", bookData);\n      }\n    } catch (error) {\n      console.error(\"Failed to fetch book details:\", error);\n      // This shouldn't happen now since getBookDetails has internal fallback\n      // But keeping as extra safety\n      if (onBookSelect) {\n        const fallbackData = {\n          title: suggestion.title,\n          authors: suggestion.author_name || [],\n          subjects: suggestion.subject || [],\n          pageCount: suggestion.number_of_pages_median,\n          publishYear: suggestion.first_publish_year,\n        };\n        onBookSelect(fallbackData);\n      }\n    } finally {\n      setIsLoadingDetails(false);\n    }\n  };\n\n  const handleClickOutside = (event: MouseEvent) => {\n    if (\n      inputRef.current &&\n      !inputRef.current.contains(event.target as Node) &&\n      suggestionsRef.current &&\n      !suggestionsRef.current.contains(event.target as Node)\n    ) {\n      setShowSuggestions(false);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, []);\n\n  const formatAuthors = (authors?: string[]) => {\n    if (!authors || authors.length === 0) return \"Unknown Author\";\n    if (authors.length === 1) return authors[0];\n    if (authors.length === 2) return authors.join(\" & \");\n    return `${authors[0]} & ${authors.length - 1} others`;\n  };\n\n  return (\n    <div className=\"relative\">\n      <div className=\"relative\">\n        <Input\n          ref={inputRef}\n          value={value}\n          onChange={(e) => handleInputChange(e.target.value)}\n          placeholder={placeholder}\n          disabled={disabled || isLoadingDetails}\n          data-testid={testId}\n          className=\"pr-10\"\n        />\n        {(isLoading || isLoadingDetails) && (\n          <div className=\"absolute right-3 top-1/2 -translate-y-1/2\">\n            <Loader2 className=\"h-4 w-4 animate-spin text-muted-foreground\" />\n          </div>\n        )}\n      </div>\n\n      {showSuggestions && (value.trim().length > 0) && (\n        <div\n          ref={suggestionsRef}\n          className=\"absolute z-50 w-full mt-1 bg-popover border border-border rounded-md shadow-lg\"\n          data-testid={`${testId}-suggestions`}\n        >\n          {error ? (\n            <div className=\"p-3 text-sm text-destructive\" data-testid={`${testId}-error`}>\n              {error}\n            </div>\n          ) : suggestions.length > 0 ? (\n            <ScrollArea className=\"max-h-80\">\n              <div className=\"p-1\">\n                {suggestions.map((suggestion, index) => (\n                  <Button\n                    key={`${suggestion.key}-${index}`}\n                    variant=\"ghost\"\n                    className=\"w-full justify-start h-auto p-3 hover-elevate\"\n                    onClick={() => handleSuggestionClick(suggestion)}\n                    data-testid={`${testId}-suggestion-${index}`}\n                  >\n                    <div className=\"flex items-start gap-3 w-full\">\n                      {/* Book Cover or Icon */}\n                      <div className=\"flex-shrink-0\">\n                        {suggestion.cover_i ? (\n                          <img\n                            src={bookSearchService.getCoverUrl(suggestion.cover_i, 'S') || ''}\n                            alt={suggestion.title}\n                            className=\"w-12 h-16 object-cover rounded\"\n                            onError={(e) => {\n                              (e.target as HTMLImageElement).style.display = 'none';\n                            }}\n                          />\n                        ) : (\n                          <div className=\"w-12 h-16 bg-muted rounded flex items-center justify-center\">\n                            <Book className=\"h-6 w-6 text-muted-foreground\" />\n                          </div>\n                        )}\n                      </div>\n\n                      {/* Book Details */}\n                      <div className=\"flex-1 text-left space-y-1 min-w-0\">\n                        <div className=\"font-medium text-sm leading-tight line-clamp-2\">\n                          {suggestion.title}\n                        </div>\n                        \n                        <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\n                          <User className=\"h-3 w-3\" />\n                          <span className=\"truncate\">\n                            {formatAuthors(suggestion.author_name)}\n                          </span>\n                        </div>\n\n                        <div className=\"flex items-center gap-3 text-xs text-muted-foreground\">\n                          {suggestion.first_publish_year && (\n                            <div className=\"flex items-center gap-1\">\n                              <Calendar className=\"h-3 w-3\" />\n                              <span>{suggestion.first_publish_year}</span>\n                            </div>\n                          )}\n                          {suggestion.number_of_pages_median && (\n                            <div className=\"flex items-center gap-1\">\n                              <Hash className=\"h-3 w-3\" />\n                              <span>{suggestion.number_of_pages_median} pages</span>\n                            </div>\n                          )}\n                        </div>\n\n                        {/* Subjects/Genre Preview */}\n                        {suggestion.subject && suggestion.subject.length > 0 && (\n                          <div className=\"flex flex-wrap gap-1 mt-1\">\n                            {suggestion.subject.slice(0, 2).map((subject, i) => (\n                              <Badge \n                                key={i} \n                                variant=\"secondary\" \n                                className=\"text-xs px-1 py-0\"\n                              >\n                                {subject.length > 15 ? subject.substring(0, 15) + '...' : subject}\n                              </Badge>\n                            ))}\n                            {suggestion.subject.length > 2 && (\n                              <Badge variant=\"outline\" className=\"text-xs px-1 py-0\">\n                                +{suggestion.subject.length - 2}\n                              </Badge>\n                            )}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </Button>\n                ))}\n              </div>\n            </ScrollArea>\n          ) : !isLoading && (\n            <div className=\"p-3 text-sm text-muted-foreground text-center\" data-testid={`${testId}-no-results`}>\n              No books found. Try a different search term.\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":9046},"client/src/components/bulk-upload-dialog.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Upload, FileText, AlertCircle, CheckCircle, Download } from \"lucide-react\";\n\ninterface BulkUploadDialogProps {\n  onBulkUpload?: (books: any[]) => void;\n  trigger?: React.ReactNode;\n}\n\nconst csvTemplate = `title,author,genre,usefulness,totalPages,isCurrentlyReading,currentPage\n\"Clean Code\",\"Robert C. Martin\",\"Programming\",\"Writing better code\",464,true,125\n\"The Design of Everyday Things\",\"Don Norman\",\"Design\",\"Learning UX principles\",368,false,0\n\"Atomic Habits\",\"James Clear\",\"Self-Help\",\"Building better habits\",320,true,89`;\n\nexport function BulkUploadDialog({ onBulkUpload, trigger }: BulkUploadDialogProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [errors, setErrors] = useState<string[]>([]);\n  const [validBooks, setValidBooks] = useState<any[]>([]);\n  const [showPreview, setShowPreview] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const parseCSV = (csvText: string) => {\n    const lines = csvText.trim().split('\\n');\n    if (lines.length < 2) {\n      throw new Error('CSV must have header row and at least one data row');\n    }\n\n    const headers = lines[0].split(',').map(h => h.replace(/\"/g, '').trim());\n    const requiredHeaders = ['title', 'author', 'genre'];\n    const missingHeaders = requiredHeaders.filter(h => !headers.includes(h));\n    \n    if (missingHeaders.length > 0) {\n      throw new Error(`Missing required columns: ${missingHeaders.join(', ')}`);\n    }\n\n    const books = [];\n    const parseErrors = [];\n\n    for (let i = 1; i < lines.length; i++) {\n      try {\n        const values = lines[i].split(',').map(v => v.replace(/\"/g, '').trim());\n        const book: any = {};\n        \n        headers.forEach((header, index) => {\n          const value = values[index] || '';\n          \n          switch (header) {\n            case 'title':\n            case 'author':\n            case 'genre':\n            case 'usefulness':\n              book[header] = value;\n              break;\n            case 'totalPages':\n            case 'currentPage':\n              book[header] = value ? parseInt(value) || 0 : 0;\n              break;\n            case 'isCurrentlyReading':\n              book[header] = value.toLowerCase() === 'true';\n              break;\n          }\n        });\n\n        // Validate required fields\n        if (!book.title || !book.author || !book.genre) {\n          parseErrors.push(`Row ${i + 1}: Missing required fields (title, author, genre)`);\n          continue;\n        }\n\n        books.push(book);\n      } catch (error) {\n        parseErrors.push(`Row ${i + 1}: ${error}`);\n      }\n    }\n\n    return { books, errors: parseErrors };\n  };\n\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    if (!file.name.match(/\\.(csv|txt)$/i)) {\n      setErrors(['Please upload a CSV file (.csv or .txt)']);\n      return;\n    }\n\n    setIsProcessing(true);\n    setProgress(20);\n    setErrors([]);\n    setValidBooks([]);\n\n    try {\n      const text = await file.text();\n      setProgress(60);\n      \n      const { books, errors: parseErrors } = parseCSV(text);\n      setProgress(80);\n      \n      setValidBooks(books);\n      setErrors(parseErrors);\n      setShowPreview(true);\n      setProgress(100);\n      \n      console.log(`Parsed ${books.length} books from CSV with ${parseErrors.length} errors`);\n    } catch (error) {\n      setErrors([error instanceof Error ? error.message : 'Failed to parse CSV file']);\n    } finally {\n      setIsProcessing(false);\n      setTimeout(() => setProgress(0), 1000);\n    }\n  };\n\n  const handleImport = () => {\n    if (validBooks.length > 0) {\n      onBulkUpload?.(validBooks);\n      setIsOpen(false);\n      setShowPreview(false);\n      setValidBooks([]);\n      setErrors([]);\n      console.log(`Imported ${validBooks.length} books via bulk upload`);\n    }\n  };\n\n  const downloadTemplate = () => {\n    const blob = new Blob([csvTemplate], { type: 'text/csv' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'book-import-template.csv';\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n    console.log(\"Downloaded CSV template\");\n  };\n\n  const resetDialog = () => {\n    setShowPreview(false);\n    setValidBooks([]);\n    setErrors([]);\n    setProgress(0);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  const defaultTrigger = (\n    <Button variant=\"outline\" data-testid=\"button-bulk-upload\">\n      <Upload className=\"mr-2 h-4 w-4\" />\n      Bulk Upload\n    </Button>\n  );\n\n  return (\n    <Dialog open={isOpen} onOpenChange={(open) => {\n      setIsOpen(open);\n      if (!open) resetDialog();\n    }}>\n      <DialogTrigger asChild>\n        {trigger || defaultTrigger}\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-[600px]\" data-testid=\"dialog-bulk-upload\">\n        <DialogHeader>\n          <DialogTitle>Bulk Import Books</DialogTitle>\n          <DialogDescription>\n            Upload a CSV file to import multiple books at once. Download the template to get started.\n          </DialogDescription>\n        </DialogHeader>\n\n        {!showPreview ? (\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center gap-2\">\n              <Button \n                variant=\"outline\" \n                onClick={downloadTemplate}\n                data-testid=\"button-download-template\"\n              >\n                <Download className=\"mr-2 h-4 w-4\" />\n                Download Template\n              </Button>\n              <span className=\"text-sm text-muted-foreground\">\n                Use this template to format your data correctly\n              </span>\n            </div>\n\n            <div className=\"border-2 border-dashed border-border rounded-lg p-8 text-center\">\n              <FileText className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n              <div className=\"space-y-2\">\n                <p className=\"text-sm font-medium\">Upload your CSV file</p>\n                <p className=\"text-xs text-muted-foreground\">\n                  Supported format: .csv files with headers\n                </p>\n                <input\n                  ref={fileInputRef}\n                  type=\"file\"\n                  accept=\".csv,.txt\"\n                  onChange={handleFileUpload}\n                  className=\"hidden\"\n                  data-testid=\"input-csv-file\"\n                />\n                <Button \n                  onClick={() => fileInputRef.current?.click()}\n                  disabled={isProcessing}\n                  data-testid=\"button-select-file\"\n                >\n                  {isProcessing ? \"Processing...\" : \"Select CSV File\"}\n                </Button>\n              </div>\n            </div>\n\n            {isProcessing && (\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span>Processing file...</span>\n                  <span>{progress}%</span>\n                </div>\n                <Progress value={progress} className=\"h-2\" data-testid=\"progress-upload\" />\n              </div>\n            )}\n\n            {errors.length > 0 && !showPreview && (\n              <Alert variant=\"destructive\" data-testid=\"alert-upload-errors\">\n                <AlertCircle className=\"h-4 w-4\" />\n                <AlertDescription>\n                  <div className=\"space-y-1\">\n                    <p className=\"font-medium\">Upload failed:</p>\n                    {errors.slice(0, 3).map((error, index) => (\n                      <p key={index} className=\"text-sm\">{error}</p>\n                    ))}\n                    {errors.length > 3 && (\n                      <p className=\"text-sm\">...and {errors.length - 3} more errors</p>\n                    )}\n                  </div>\n                </AlertDescription>\n              </Alert>\n            )}\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                <CheckCircle className=\"h-5 w-5 text-green-600\" />\n                <span className=\"font-medium\">File processed successfully</span>\n              </div>\n              <Button variant=\"outline\" onClick={resetDialog} data-testid=\"button-upload-different\">\n                Upload Different File\n              </Button>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4 text-center\">\n              <div className=\"p-3 bg-green-50 dark:bg-green-950 rounded-lg\">\n                <div className=\"text-2xl font-bold text-green-600\" data-testid=\"text-valid-books\">\n                  {validBooks.length}\n                </div>\n                <div className=\"text-sm text-green-700 dark:text-green-300\">\n                  Valid Books\n                </div>\n              </div>\n              <div className=\"p-3 bg-red-50 dark:bg-red-950 rounded-lg\">\n                <div className=\"text-2xl font-bold text-red-600\" data-testid=\"text-error-count\">\n                  {errors.length}\n                </div>\n                <div className=\"text-sm text-red-700 dark:text-red-300\">\n                  Errors\n                </div>\n              </div>\n            </div>\n\n            {errors.length > 0 && (\n              <Alert variant=\"destructive\" data-testid=\"alert-preview-errors\">\n                <AlertCircle className=\"h-4 w-4\" />\n                <AlertDescription>\n                  <div className=\"space-y-1\">\n                    <p className=\"font-medium\">Some rows had errors:</p>\n                    {errors.slice(0, 3).map((error, index) => (\n                      <p key={index} className=\"text-sm\">{error}</p>\n                    ))}\n                    {errors.length > 3 && (\n                      <p className=\"text-sm\">...and {errors.length - 3} more errors</p>\n                    )}\n                  </div>\n                </AlertDescription>\n              </Alert>\n            )}\n\n            {validBooks.length > 0 && (\n              <div className=\"space-y-2\" data-testid=\"preview-books\">\n                <p className=\"font-medium\">Books to import:</p>\n                <div className=\"max-h-40 overflow-y-auto space-y-2\">\n                  {validBooks.slice(0, 5).map((book, index) => (\n                    <div key={index} className=\"flex items-center gap-2 p-2 bg-muted rounded\">\n                      <div className=\"flex-1\">\n                        <div className=\"font-medium text-sm\">{book.title}</div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          by {book.author} • {book.genre}\n                        </div>\n                      </div>\n                      {book.isCurrentlyReading && (\n                        <Badge variant=\"outline\" className=\"text-xs\">Reading</Badge>\n                      )}\n                    </div>\n                  ))}\n                  {validBooks.length > 5 && (\n                    <p className=\"text-sm text-muted-foreground text-center\">\n                      ...and {validBooks.length - 5} more books\n                    </p>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n\n        <DialogFooter>\n          {showPreview ? (\n            <Button \n              onClick={handleImport}\n              disabled={validBooks.length === 0}\n              data-testid=\"button-import-books\"\n            >\n              Import {validBooks.length} Books\n            </Button>\n          ) : (\n            <p className=\"text-xs text-muted-foreground\">\n              Upload a CSV file to continue\n            </p>\n          )}\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":12371},"client/src/components/reading-progress.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ReadingSessionHistory } from \"./reading-session-history\";\nimport { BookOpen, Clock, Target, TrendingUp, Lightbulb } from \"lucide-react\";\nimport { format, differenceInDays } from \"date-fns\";\n\ninterface ReadingSession {\n  id: string;\n  startPage: number;\n  endPage: number;\n  sessionDate: string;\n  notes?: string;\n}\n\ninterface ReadingProgressProps {\n  id: string;\n  title: string;\n  author: string;\n  totalPages: number;\n  currentPage: number;\n  startedAt?: string;\n  sessions?: ReadingSession[];\n  onUpdateProgress?: (id: string, newPage: number) => void;\n  onAddSession?: (id: string, session: { startPage: number; endPage: number; notes?: string }) => void;\n  onEditSession?: (id: string, sessionId: string, updates: { startPage: number; endPage: number; notes?: string }) => void;\n}\n\nexport function ReadingProgress({\n  id,\n  title,\n  author,\n  totalPages,\n  currentPage,\n  startedAt,\n  sessions = [],\n  onUpdateProgress,\n  onAddSession,\n  onEditSession,\n}: ReadingProgressProps) {\n  const [newPage, setNewPage] = useState(currentPage);\n  const [isUpdating, setIsUpdating] = useState(false);\n\n  // Sync input with current page when it changes via sessions\n  useEffect(() => {\n    setNewPage(currentPage);\n  }, [currentPage]);\n\n  const progress = (currentPage / totalPages) * 100;\n  const remainingPages = totalPages - currentPage;\n  const daysReading = startedAt ? differenceInDays(new Date(), new Date(startedAt)) + 1 : 1;\n  const pagesPerDay = currentPage / daysReading;\n  const estimatedDaysToFinish = pagesPerDay > 0 ? Math.ceil(remainingPages / pagesPerDay) : 0;\n\n  const handleUpdateProgress = async () => {\n    // Validate page bounds\n    const validPage = Math.max(0, Math.min(newPage, totalPages));\n    if (validPage !== newPage) {\n      setNewPage(validPage);\n    }\n    \n    if (validPage === currentPage) return;\n    \n    setIsUpdating(true);\n    console.log(`Updating progress for ${title}: page ${validPage}`);\n    \n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 500));\n    \n    onUpdateProgress?.(id, validPage);\n    setIsUpdating(false);\n  };\n\n  const handleAddSession = (session: { startPage: number; endPage: number; notes?: string }) => {\n    onAddSession?.(id, session);\n  };\n\n  const handleEditSession = (sessionId: string, updates: { startPage: number; endPage: number; notes?: string }) => {\n    onEditSession?.(id, sessionId, updates);\n  };\n\n  return (\n    <Card data-testid={`card-reading-progress-${id}`}>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2 text-lg\">\n          <BookOpen className=\"h-5 w-5\" />\n          <div className=\"flex-1\">\n            <div className=\"font-serif\" data-testid={`text-progress-title-${id}`}>{title}</div>\n            <div className=\"text-sm font-normal text-muted-foreground\" data-testid={`text-progress-author-${id}`}>\n              by {author}\n            </div>\n          </div>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Tabs defaultValue=\"progress\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"progress\" data-testid={`tab-progress-${id}`}>\n              Progress\n            </TabsTrigger>\n            <TabsTrigger value=\"history\" data-testid={`tab-history-${id}`}>\n              Sessions ({sessions.length})\n            </TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"progress\" className=\"space-y-4 mt-4\">\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm font-medium\">Reading Progress</span>\n                <Badge variant=\"outline\" data-testid={`badge-progress-percent-${id}`}>\n                  {Math.round(progress)}% Complete\n                </Badge>\n              </div>\n              <Progress value={progress} className=\"h-3\" data-testid={`progress-bar-${id}`} />\n              <div className=\"flex justify-between text-sm text-muted-foreground\">\n                <span data-testid={`text-current-page-${id}`}>Page {currentPage}</span>\n                <span data-testid={`text-total-pages-${id}`}>{totalPages} pages</span>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-3 gap-4 text-center\">\n              <div className=\"space-y-1\">\n                <div className=\"flex items-center justify-center gap-1\">\n                  <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                </div>\n                <div className=\"text-lg font-semibold\" data-testid={`text-days-reading-${id}`}>{daysReading}</div>\n                <div className=\"text-xs text-muted-foreground\">Days Reading</div>\n              </div>\n              <div className=\"space-y-1\">\n                <div className=\"flex items-center justify-center gap-1\">\n                  <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n                </div>\n                <div className=\"text-lg font-semibold\" data-testid={`text-pages-per-day-${id}`}>\n                  {pagesPerDay.toFixed(1)}\n                </div>\n                <div className=\"text-xs text-muted-foreground\">Pages/Day</div>\n              </div>\n              <div className=\"space-y-1\">\n                <div className=\"flex items-center justify-center gap-1\">\n                  <Target className=\"h-4 w-4 text-muted-foreground\" />\n                </div>\n                <div className=\"text-lg font-semibold\" data-testid={`text-estimated-days-${id}`}>\n                  {estimatedDaysToFinish}\n                </div>\n                <div className=\"text-xs text-muted-foreground\">Days Left</div>\n              </div>\n            </div>\n\n            {startedAt && (\n              <div className=\"text-sm text-muted-foreground text-center\" data-testid={`text-started-date-${id}`}>\n                Started {format(new Date(startedAt), \"MMM dd, yyyy\")}\n              </div>\n            )}\n\n            <div className=\"space-y-2\">\n              <div className=\"flex gap-2\">\n                <Input\n                  type=\"number\"\n                  value={newPage}\n                  onChange={(e) => setNewPage(parseInt(e.target.value) || 0)}\n                  min={0}\n                  max={totalPages}\n                  placeholder=\"Update page\"\n                  className=\"flex-1\"\n                  data-testid={`input-update-page-${id}`}\n                />\n                <Button \n                  onClick={handleUpdateProgress}\n                  disabled={isUpdating || newPage === currentPage}\n                  data-testid={`button-update-progress-${id}`}\n                >\n                  {isUpdating ? \"Updating...\" : \"Update\"}\n                </Button>\n              </div>\n              {newPage > currentPage && (\n                <div className=\"flex items-center gap-2 text-xs text-muted-foreground bg-muted/50 p-2 rounded\" data-testid={`sync-note-${id}`}>\n                  <Lightbulb className=\"h-3 w-3 text-blue-500\" />\n                  <span>This will create a reading session: pages {currentPage}→{newPage}</span>\n                </div>\n              )}\n            </div>\n          </TabsContent>\n          \n          <TabsContent value=\"history\" className=\"mt-4\">\n            <ReadingSessionHistory \n              bookId={id}\n              currentPage={currentPage}\n              sessions={sessions}\n              onAddSession={handleAddSession}\n              onEditSession={handleEditSession}\n            />\n          </TabsContent>\n        </Tabs>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7956},"client/src/components/reading-session-history.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { History, Calendar, BookOpen, Plus, Edit2, Save, X } from \"lucide-react\";\nimport { format, formatDistanceToNow } from \"date-fns\";\nimport { useState } from \"react\";\n\ninterface ReadingSession {\n  id: string;\n  startPage: number;\n  endPage: number;\n  sessionDate: string;\n  notes?: string;\n}\n\ninterface ReadingSessionHistoryProps {\n  bookId: string;\n  currentPage: number;\n  sessions: ReadingSession[];\n  onAddSession?: (session: { startPage: number; endPage: number; notes?: string }) => void;\n  onEditSession?: (sessionId: string, updates: { startPage: number; endPage: number; notes?: string }) => void;\n}\n\nexport function ReadingSessionHistory({ bookId, currentPage, sessions, onAddSession, onEditSession }: ReadingSessionHistoryProps) {\n  const [isAddingSession, setIsAddingSession] = useState(false);\n  const [editingSessionId, setEditingSessionId] = useState<string | null>(null);\n  const [newSession, setNewSession] = useState({\n    startPage: \"\",\n    endPage: \"\", \n    notes: \"\",\n  });\n  const [editSession, setEditSession] = useState({\n    startPage: \"\",\n    endPage: \"\",\n    notes: \"\",\n  });\n\n  const handleStartAddingSession = () => {\n    setNewSession({\n      startPage: currentPage.toString(),\n      endPage: \"\",\n      notes: \"\",\n    });\n    setIsAddingSession(true);\n  };\n\n  const totalPagesRead = sessions.reduce((sum, session) => \n    sum + (session.endPage - session.startPage), 0\n  );\n\n  const averageSessionLength = sessions.length > 0 \n    ? Math.round(totalPagesRead / sessions.length) \n    : 0;\n\n  const handleAddSession = () => {\n    const startPage = parseInt(newSession.startPage);\n    const endPage = parseInt(newSession.endPage);\n    \n    if (startPage >= 0 && endPage > startPage) {\n      onAddSession?.({\n        startPage,\n        endPage,\n        notes: newSession.notes.trim() || undefined,\n      });\n      setNewSession({ startPage: \"\", endPage: \"\", notes: \"\" });\n      setIsAddingSession(false);\n      console.log(`Added reading session: pages ${startPage}-${endPage}`);\n    }\n  };\n\n  const handleStartEdit = (session: ReadingSession) => {\n    setEditSession({\n      startPage: session.startPage.toString(),\n      endPage: session.endPage.toString(),\n      notes: session.notes || \"\",\n    });\n    setEditingSessionId(session.id);\n    console.log(`Started editing session ${session.id}`);\n  };\n\n  const handleSaveEdit = () => {\n    if (!editingSessionId) return;\n    \n    const startPage = parseInt(editSession.startPage);\n    const endPage = parseInt(editSession.endPage);\n    \n    if (startPage >= 0 && endPage > startPage) {\n      onEditSession?.(editingSessionId, {\n        startPage,\n        endPage,\n        notes: editSession.notes.trim() || undefined,\n      });\n      setEditingSessionId(null);\n      setEditSession({ startPage: \"\", endPage: \"\", notes: \"\" });\n      console.log(`Saved changes to session ${editingSessionId}: pages ${startPage}-${endPage}`);\n    }\n  };\n\n  const handleCancelEdit = () => {\n    setEditingSessionId(null);\n    setEditSession({ startPage: \"\", endPage: \"\", notes: \"\" });\n    console.log(\"Cancelled session edit\");\n  };\n\n  const sortedSessions = [...sessions].sort((a, b) => \n    new Date(b.sessionDate).getTime() - new Date(a.sessionDate).getTime()\n  );\n\n  return (\n    <Card data-testid={`card-session-history-${bookId}`}>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2 text-lg\">\n            <History className=\"h-5 w-5\" />\n            Reading Sessions\n            <div className=\"text-xs font-normal text-muted-foreground bg-muted/50 px-2 py-1 rounded\">\n              Synced with Progress\n            </div>\n          </CardTitle>\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={handleStartAddingSession}\n            data-testid={`button-add-session-${bookId}`}\n          >\n            <Plus className=\"mr-2 h-4 w-4\" />\n            Add Session\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {/* Session Stats */}\n        <div className=\"grid grid-cols-3 gap-4 p-4 bg-muted/50 rounded-lg\">\n          <div className=\"text-center\">\n            <div className=\"text-lg font-semibold\" data-testid={`text-total-sessions-${bookId}`}>\n              {sessions.length}\n            </div>\n            <div className=\"text-xs text-muted-foreground\">Sessions</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-lg font-semibold\" data-testid={`text-total-pages-read-${bookId}`}>\n              {totalPagesRead}\n            </div>\n            <div className=\"text-xs text-muted-foreground\">Pages Read</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-lg font-semibold\" data-testid={`text-avg-session-${bookId}`}>\n              {averageSessionLength}\n            </div>\n            <div className=\"text-xs text-muted-foreground\">Avg/Session</div>\n          </div>\n        </div>\n\n        {/* Add Session Form */}\n        {isAddingSession && (\n          <Card className=\"border-dashed\" data-testid={`form-add-session-${bookId}`}>\n            <CardContent className=\"pt-4 space-y-3\">\n              <div className=\"grid grid-cols-2 gap-3\">\n                <div>\n                  <label className=\"text-sm font-medium\">Start Page</label>\n                  <input\n                    type=\"number\"\n                    value={newSession.startPage}\n                    onChange={(e) => setNewSession(prev => ({ ...prev, startPage: e.target.value }))}\n                    className=\"w-full px-3 py-2 border rounded-md text-sm\"\n                    placeholder=\"0\"\n                    data-testid={`input-start-page-${bookId}`}\n                  />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">End Page</label>\n                  <input\n                    type=\"number\"\n                    value={newSession.endPage}\n                    onChange={(e) => setNewSession(prev => ({ ...prev, endPage: e.target.value }))}\n                    className=\"w-full px-3 py-2 border rounded-md text-sm\"\n                    placeholder=\"0\"\n                    data-testid={`input-end-page-${bookId}`}\n                  />\n                </div>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium\">Session Notes (Optional)</label>\n                <Textarea\n                  value={newSession.notes}\n                  onChange={(e) => setNewSession(prev => ({ ...prev, notes: e.target.value }))}\n                  placeholder=\"What did you learn or find interesting?\"\n                  className=\"mt-1\"\n                  data-testid={`textarea-session-notes-${bookId}`}\n                />\n              </div>\n              <div className=\"flex gap-2\">\n                <Button \n                  size=\"sm\" \n                  onClick={handleAddSession}\n                  data-testid={`button-save-session-${bookId}`}\n                >\n                  Save Session\n                </Button>\n                <Button \n                  size=\"sm\" \n                  variant=\"outline\" \n                  onClick={() => setIsAddingSession(false)}\n                  data-testid={`button-cancel-session-${bookId}`}\n                >\n                  Cancel\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Session History */}\n        {sortedSessions.length === 0 ? (\n          <div className=\"text-center py-8 text-muted-foreground\" data-testid={`empty-sessions-${bookId}`}>\n            <BookOpen className=\"mx-auto h-8 w-8 mb-2\" />\n            <p className=\"text-sm\">No reading sessions recorded yet</p>\n            <p className=\"text-xs\">Add your first session to start tracking your progress</p>\n          </div>\n        ) : (\n          <div className=\"space-y-3\" data-testid={`list-sessions-${bookId}`}>\n            <h4 className=\"text-sm font-medium text-muted-foreground\">Recent Sessions</h4>\n            {sortedSessions.slice(0, 5).map((session, index) => {\n              const isEditing = editingSessionId === session.id;\n              \n              return (\n                <div \n                  key={session.id} \n                  className=\"flex items-start gap-3 p-3 border rounded-lg hover-elevate\"\n                  data-testid={`session-${session.id}-${bookId}`}\n                >\n                  {isEditing ? (\n                    // Edit Mode\n                    <div className=\"flex-1 space-y-3\">\n                      <div className=\"grid grid-cols-2 gap-3\">\n                        <div>\n                          <label className=\"text-sm font-medium\">Start Page</label>\n                          <input\n                            type=\"number\"\n                            value={editSession.startPage}\n                            onChange={(e) => setEditSession(prev => ({ ...prev, startPage: e.target.value }))}\n                            className=\"w-full px-3 py-2 border rounded-md text-sm\"\n                            data-testid={`input-edit-start-page-${session.id}`}\n                          />\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-medium\">End Page</label>\n                          <input\n                            type=\"number\"\n                            value={editSession.endPage}\n                            onChange={(e) => setEditSession(prev => ({ ...prev, endPage: e.target.value }))}\n                            className=\"w-full px-3 py-2 border rounded-md text-sm\"\n                            data-testid={`input-edit-end-page-${session.id}`}\n                          />\n                        </div>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium\">Session Notes</label>\n                        <Textarea\n                          value={editSession.notes}\n                          onChange={(e) => setEditSession(prev => ({ ...prev, notes: e.target.value }))}\n                          placeholder=\"What did you learn or find interesting?\"\n                          className=\"mt-1\"\n                          data-testid={`textarea-edit-notes-${session.id}`}\n                        />\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <Button \n                          size=\"sm\" \n                          onClick={handleSaveEdit}\n                          data-testid={`button-save-edit-${session.id}`}\n                        >\n                          <Save className=\"mr-2 h-3 w-3\" />\n                          Save\n                        </Button>\n                        <Button \n                          size=\"sm\" \n                          variant=\"outline\" \n                          onClick={handleCancelEdit}\n                          data-testid={`button-cancel-edit-${session.id}`}\n                        >\n                          <X className=\"mr-2 h-3 w-3\" />\n                          Cancel\n                        </Button>\n                      </div>\n                    </div>\n                  ) : (\n                    // View Mode\n                    <>\n                      <div className=\"flex-1 space-y-1\">\n                        <div className=\"flex items-center gap-2\">\n                          <Badge variant=\"outline\" data-testid={`badge-pages-${session.id}`}>\n                            Pages {session.startPage}-{session.endPage}\n                          </Badge>\n                          <Badge variant=\"secondary\" data-testid={`badge-read-${session.id}`}>\n                            +{session.endPage - session.startPage} pages\n                          </Badge>\n                        </div>\n                        <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\n                          <Calendar className=\"h-3 w-3\" />\n                          <span data-testid={`text-session-date-${session.id}`}>\n                            {format(new Date(session.sessionDate), \"MMM dd, yyyy 'at' h:mm a\")}\n                          </span>\n                          <span>•</span>\n                          <span data-testid={`text-session-ago-${session.id}`}>\n                            {formatDistanceToNow(new Date(session.sessionDate), { addSuffix: true })}\n                          </span>\n                        </div>\n                        {session.notes && (\n                          <p className=\"text-sm text-muted-foreground mt-2\" data-testid={`text-session-notes-${session.id}`}>\n                            {session.notes}\n                          </p>\n                        )}\n                      </div>\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() => handleStartEdit(session)}\n                        className=\"flex-shrink-0\"\n                        data-testid={`button-edit-session-${session.id}`}\n                      >\n                        <Edit2 className=\"h-3 w-3\" />\n                      </Button>\n                    </>\n                  )}\n                </div>\n              );\n            })}\n            {sortedSessions.length > 5 && (\n              <p className=\"text-xs text-center text-muted-foreground\">\n                ...and {sortedSessions.length - 5} more sessions\n              </p>\n            )}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":13862},"client/src/components/theme-toggle.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport function ThemeToggle() {\n  const [theme, setTheme] = useState<\"light\" | \"dark\">(\"light\");\n\n  useEffect(() => {\n    const savedTheme = localStorage.getItem(\"theme\") as \"light\" | \"dark\" | null;\n    const prefersDark = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n    const initialTheme = savedTheme || (prefersDark ? \"dark\" : \"light\");\n    \n    setTheme(initialTheme);\n    document.documentElement.classList.toggle(\"dark\", initialTheme === \"dark\");\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = theme === \"light\" ? \"dark\" : \"light\";\n    setTheme(newTheme);\n    localStorage.setItem(\"theme\", newTheme);\n    document.documentElement.classList.toggle(\"dark\", newTheme === \"dark\");\n    console.log(\"Theme toggled to:\", newTheme);\n  };\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n    >\n      {theme === \"light\" ? (\n        <Moon className=\"h-5 w-5\" />\n      ) : (\n        <Sun className=\"h-5 w-5\" />\n      )}\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}","size_bytes":1236},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useBookSearch.ts":{"content":"import { useState, useEffect, useCallback, useRef } from 'react';\nimport { bookSearchService, BookSuggestion } from '@/services/bookSearch';\n\ninterface UseBookSearchResult {\n  suggestions: BookSuggestion[];\n  isLoading: boolean;\n  error: string | null;\n  search: (query: string) => void;\n  clearSuggestions: () => void;\n}\n\nexport function useBookSearch(debounceMs = 300): UseBookSearchResult {\n  const [suggestions, setSuggestions] = useState<BookSuggestion[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const debounceTimerRef = useRef<ReturnType<typeof setTimeout>>();\n\n  const search = useCallback((query: string) => {\n    // Clear previous timer\n    if (debounceTimerRef.current) {\n      clearTimeout(debounceTimerRef.current);\n    }\n\n    // Clear error state\n    setError(null);\n\n    // If query is empty, clear suggestions immediately\n    if (!query.trim()) {\n      setSuggestions([]);\n      setIsLoading(false);\n      return;\n    }\n\n    // Set loading state immediately for better UX\n    setIsLoading(true);\n\n    // Debounce the actual search\n    debounceTimerRef.current = setTimeout(async () => {\n      try {\n        const results = await bookSearchService.searchBooks(query, 8);\n        setSuggestions(results);\n        setError(null);\n      } catch (err) {\n        console.error('Book search failed:', err);\n        setError('Failed to search for books. Please try again.');\n        setSuggestions([]);\n      } finally {\n        setIsLoading(false);\n      }\n    }, debounceMs);\n  }, [debounceMs]);\n\n  const clearSuggestions = useCallback(() => {\n    setSuggestions([]);\n    setIsLoading(false);\n    setError(null);\n    bookSearchService.cancel();\n  }, []);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (debounceTimerRef.current) {\n        clearTimeout(debounceTimerRef.current);\n      }\n      bookSearchService.cancel();\n    };\n  }, []);\n\n  return {\n    suggestions,\n    isLoading,\n    error,\n    search,\n    clearSuggestions,\n  };\n}","size_bytes":2047},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/currently-reading.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { BookSwitcher } from '@/components/book-switcher';\nimport { HeroSessionCard } from '@/components/hero-session-card';\nimport { AddBookDialog } from '@/components/add-book-dialog';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { BookOpen, Plus } from 'lucide-react';\nimport type { Book, ReadingSession } from '@shared/schema';\n\nexport default function CurrentlyReading() {\n  const [selectedBook, setSelectedBook] = useState<Book | null>(null);\n  const [showAddBookDialog, setShowAddBookDialog] = useState(false);\n\n  // Query for currently reading books to initialize the selected book\n  const { data: currentlyReadingBooks = [], isLoading: isLoadingBooks, error: booksError } = useQuery({\n    queryKey: ['/api/books/currently-reading'],\n    queryFn: async () => {\n      const response = await fetch('/api/books/currently-reading');\n      if (!response.ok) throw new Error('Failed to fetch currently reading books');\n      const data = await response.json();\n      return data.map((book: any) => ({\n        ...book,\n        addedAt: new Date(book.addedAt),\n        lastReadAt: book.lastReadAt ? new Date(book.lastReadAt) : null,\n        startedAt: book.startedAt ? new Date(book.startedAt) : null,\n        completedAt: book.completedAt ? new Date(book.completedAt) : null,\n      })) as Book[];\n    },\n  });\n\n  // Query for active session of selected book (moved here to fix hooks rule violation)\n  const { data: activeSession, refetch: refetchActiveSession } = useQuery({\n    queryKey: ['/api/books', selectedBook?.id, 'active-session'],\n    queryFn: async () => {\n      if (!selectedBook) return null;\n      \n      const response = await fetch(`/api/books/${selectedBook.id}/active-session`);\n      if (!response.ok) {\n        if (response.status === 404) return null;\n        throw new Error('Failed to fetch active session');\n      }\n      \n      const data = await response.json();\n      return data ? {\n        ...data,\n        startedAt: new Date(data.startedAt),\n        sessionDate: new Date(data.sessionDate),\n        pausedAt: data.pausedAt ? new Date(data.pausedAt) : null,\n        resumedAt: data.resumedAt ? new Date(data.resumedAt) : null,\n        endedAt: data.endedAt ? new Date(data.endedAt) : null,\n      } as ReadingSession : null;\n    },\n    enabled: !!selectedBook,\n  });\n\n  // Auto-select the first book if none is selected\n  useEffect(() => {\n    if (!selectedBook && currentlyReadingBooks.length > 0) {\n      setSelectedBook(currentlyReadingBooks[0]);\n    }\n  }, [currentlyReadingBooks, selectedBook]);\n\n  // Show loading state\n  if (isLoadingBooks) {\n    return (\n      <div className=\"space-y-6\" data-testid=\"page-currently-reading\">\n        <div>\n          <h1 className=\"text-3xl font-serif font-semibold\">Currently Reading</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Track your reading sessions with advanced timer and progress forecasting\n          </p>\n        </div>\n        \n        <div className=\"space-y-4\">\n          <Skeleton className=\"h-16 w-full\" />\n          <div className=\"max-w-2xl mx-auto\">\n            <Skeleton className=\"h-96 w-full\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Show error state\n  if (booksError) {\n    return (\n      <div className=\"space-y-6\" data-testid=\"page-currently-reading\">\n        <div>\n          <h1 className=\"text-3xl font-serif font-semibold\">Currently Reading</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Track your reading sessions with advanced timer and progress forecasting\n          </p>\n        </div>\n        \n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center py-12 text-center\">\n            <div className=\"text-destructive mb-4\">Error loading books</div>\n            <p className=\"text-muted-foreground\">\n              {booksError instanceof Error ? booksError.message : 'Failed to load currently reading books'}\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n\n  const handleBookSelect = (book: Book) => {\n    setSelectedBook(book);\n  };\n\n  const handleSessionUpdate = () => {\n    refetchActiveSession();\n  };\n\n  const handleAddNewBook = () => {\n    setShowAddBookDialog(true);\n  };\n\n  // Show empty state if no books are currently being read\n  if (currentlyReadingBooks.length === 0) {\n    return (\n      <div className=\"space-y-6\" data-testid=\"page-currently-reading\">\n        <div>\n          <h1 className=\"text-3xl font-serif font-semibold\">Currently Reading</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Advanced session tracking for your active books\n          </p>\n        </div>\n\n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center py-12 text-center\">\n            <BookOpen className=\"h-16 w-16 text-muted-foreground mb-6\" />\n            <h3 className=\"text-xl font-semibold mb-2\">No books currently reading</h3>\n            <p className=\"text-muted-foreground mb-6 max-w-md\">\n              Start your first reading session with our advanced timer and progress tracking. \n              Add a book and begin tracking your reading journey.\n            </p>\n            <Button onClick={handleAddNewBook} size=\"lg\" data-testid=\"button-add-first-book\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Your First Book\n            </Button>\n          </CardContent>\n        </Card>\n\n        <AddBookDialog\n          open={showAddBookDialog}\n          onOpenChange={setShowAddBookDialog}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"page-currently-reading\">\n      <div>\n        <h1 className=\"text-3xl font-serif font-semibold\">Currently Reading</h1>\n        <p className=\"text-muted-foreground mt-1\">\n          Track your reading sessions with advanced timer and progress forecasting\n        </p>\n      </div>\n\n      {/* Book Switcher */}\n      <BookSwitcher\n        selectedBook={selectedBook}\n        onBookSelect={handleBookSelect}\n        onAddNewBook={handleAddNewBook}\n        currentlyReadingBooks={currentlyReadingBooks}\n      />\n\n      {/* Hero Session Card */}\n      {selectedBook && (\n        <div className=\"max-w-2xl mx-auto\">\n          <HeroSessionCard\n            book={selectedBook}\n            activeSession={activeSession}\n            onSessionUpdate={handleSessionUpdate}\n          />\n        </div>\n      )}\n\n      {!selectedBook && currentlyReadingBooks.length > 0 && (\n        <Card>\n          <CardContent className=\"text-center py-8\">\n            <BookOpen className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">Select a book to start reading</h3>\n            <p className=\"text-muted-foreground\">\n              Choose a book from the dropdown above to begin your reading session\n            </p>\n          </CardContent>\n        </Card>\n      )}\n\n      <AddBookDialog\n        open={showAddBookDialog}\n        onOpenChange={setShowAddBookDialog}\n      />\n    </div>\n  );\n}","size_bytes":7244},"client/src/pages/library.tsx":{"content":"import { useState, useEffect, useCallback, useMemo } from \"react\";\nimport { BookCard } from \"@/components/book-card\";\nimport { AddBookDialog } from \"@/components/add-book-dialog\";\nimport { BulkUploadDialog } from \"@/components/bulk-upload-dialog\";\nimport { BookSearchDialog } from \"@/components/book-search-dialog\";\nimport { ExportDialog } from \"@/components/export-dialog\";\nimport { ImportDialog } from \"@/components/import-dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Search,\n  Filter,\n  Loader2,\n  Grid3X3,\n  List,\n  CheckSquare,\n  Square,\n  ChevronDown,\n  X,\n  Plus,\n  Trash2,\n  Tag,\n  RotateCcw,\n  Download,\n  Upload\n} from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { BOOK_GENRES, BOOK_STATUSES } from \"@shared/schema\";\nimport type { Book, InsertBook } from \"@shared/schema\";\nimport { useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n// URL state management types\ninterface LibraryFilters {\n  search: string;\n  statuses: string[];\n  genres: string[];\n  tags: string[];\n  sort: string;\n  sortOrder: \"asc\" | \"desc\";\n  view: \"grid\" | \"list\";\n}\n\n// Status display configuration\nconst STATUS_CONFIG = {\n  toRead: { label: \"To-Read\", color: \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\" },\n  reading: { label: \"Reading\", color: \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\" },\n  onHold: { label: \"On-Hold\", color: \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\" },\n  dnf: { label: \"DNF\", color: \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\" },\n  finished: { label: \"Finished\", color: \"bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200\" },\n};\n\nconst SORT_OPTIONS = [\n  { value: \"priority\", label: \"Priority\" },\n  { value: \"addedAt\", label: \"Recently Added\" },\n  { value: \"title\", label: \"Title\" },\n  { value: \"author\", label: \"Author\" },\n  { value: \"lastReadAt\", label: \"Last Read\" },\n  { value: \"progress\", label: \"Progress\" },\n];\n\nexport default function Library() {\n  const [location, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  \n  // Bulk selection state\n  const [bulkMode, setBulkMode] = useState(false);\n  const [selectedBooks, setSelectedBooks] = useState<Set<string>>(new Set());\n  const [searchInputRef, setSearchInputRef] = useState<HTMLInputElement | null>(null);\n  \n  // Debounced search state\n  const [searchValue, setSearchValue] = useState(\"\");\n  const [debouncedSearch, setDebouncedSearch] = useState(\"\");\n\n  // Parse URL state\n  const urlParams = useMemo(() => new URLSearchParams(location.split('?')[1] || ''), [location]);\n  \n  const filters: LibraryFilters = useMemo(() => ({\n    search: debouncedSearch || \"\",\n    statuses: urlParams.get('statuses')?.split(',').filter(Boolean) || [],\n    genres: urlParams.get('genres')?.split(',').filter(Boolean) || [],\n    tags: urlParams.get('tags')?.split(',').filter(Boolean) || [],\n    sort: urlParams.get('sort') || \"priority\",\n    sortOrder: (urlParams.get('sortOrder') as \"asc\" | \"desc\") || \"desc\",\n    view: (urlParams.get('view') as \"grid\" | \"list\") || (localStorage.getItem('library-view') as \"grid\" | \"list\") || \"grid\",\n  }), [urlParams, debouncedSearch]);\n\n  // Update URL when filters change\n  const updateURL = useCallback((newFilters: Partial<LibraryFilters>) => {\n    const params = new URLSearchParams(urlParams);\n    \n    Object.entries(newFilters).forEach(([key, value]) => {\n      if (value === undefined || value === null) return;\n      \n      if (Array.isArray(value)) {\n        if (value.length > 0) {\n          params.set(key, value.join(','));\n        } else {\n          params.delete(key);\n        }\n      } else if (value === \"\" || (key === 'search' && !value)) {\n        params.delete(key);\n      } else {\n        params.set(key, String(value));\n      }\n    });\n    \n    // Update view in localStorage\n    if (newFilters.view) {\n      localStorage.setItem('library-view', newFilters.view);\n    }\n    \n    setLocation('?' + params.toString());\n  }, [urlParams, setLocation]);\n\n  // Debounced search effect\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedSearch(searchValue);\n    }, 250);\n    return () => clearTimeout(timer);\n  }, [searchValue]);\n\n  // Update URL when search changes\n  useEffect(() => {\n    if (searchValue !== (urlParams.get('search') || '')) {\n      updateURL({ search: debouncedSearch });\n    }\n  }, [debouncedSearch, updateURL, urlParams]);\n\n  // Fetch books with filters\n  const { data: books = [], isLoading, error } = useQuery<Book[]>({\n    queryKey: [\"/api/books\", filters],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (filters.search) params.set('search', filters.search);\n      if (filters.statuses.length) params.set('statuses', filters.statuses.join(','));\n      if (filters.genres.length) params.set('genres', filters.genres.join(','));\n      if (filters.tags.length) params.set('tags', filters.tags.join(','));\n      if (filters.sort) params.set('sort', filters.sort);\n      if (filters.sortOrder) params.set('sortOrder', filters.sortOrder);\n      \n      const response = await apiRequest(\"GET\", `/api/books?${params.toString()}`);\n      return response.json();\n    },\n  });\n\n  // Get unique values for filter options\n  const availableTags = useMemo(() => {\n    const tagSet = new Set<string>();\n    books.forEach(book => {\n      (book.tags || []).forEach(tag => tagSet.add(tag));\n    });\n    return Array.from(tagSet).sort();\n  }, [books]);\n\n  // Mutations\n  const addBookMutation = useMutation({\n    mutationFn: async (bookData: InsertBook) => {\n      const response = await apiRequest(\"POST\", \"/api/books\", bookData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/books\"] });\n      toast({ title: \"Book added to library\" });\n    },\n  });\n\n  const updateBookMutation = useMutation({\n    mutationFn: async ({ id, updates }: { id: string; updates: Partial<Book> }) => {\n      const response = await apiRequest(\"PATCH\", `/api/books/${id}`, updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/books\"] });\n    },\n  });\n\n  const deleteBookMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/books/${id}`);\n      return response.ok;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/books\"] });\n      toast({ title: \"Book deleted\" });\n    },\n  });\n\n  // Bulk mutations\n  const bulkUpdateStatusMutation = useMutation({\n    mutationFn: async ({ ids, status }: { ids: string[]; status: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/books/bulk/status\", { ids, status });\n      return response.json();\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/books\"] });\n      toast({ \n        title: `${variables.ids.length} books moved to ${STATUS_CONFIG[variables.status as keyof typeof STATUS_CONFIG]?.label}`,\n        action: <Button variant=\"outline\" size=\"sm\" onClick={() => window.history.back()}>Undo</Button>\n      });\n    },\n  });\n\n  const bulkAddTagsMutation = useMutation({\n    mutationFn: async ({ ids, tags }: { ids: string[]; tags: string[] }) => {\n      const response = await apiRequest(\"POST\", \"/api/books/bulk/tags\", { ids, tags });\n      return response.json();\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/books\"] });\n      toast({ title: `Tags added to ${variables.ids.length} books` });\n    },\n  });\n\n  const bulkDeleteMutation = useMutation({\n    mutationFn: async (ids: string[]) => {\n      const response = await apiRequest(\"DELETE\", \"/api/books/bulk\", { ids });\n      return response.ok;\n    },\n    onSuccess: (_, ids) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/books\"] });\n      setSelectedBooks(new Set());\n      setBulkMode(false);\n      toast({ \n        title: `${ids.length} books deleted`,\n        action: <Button variant=\"outline\" size=\"sm\" onClick={() => window.history.back()}>Undo</Button>\n      });\n    },\n  });\n\n  // Event handlers\n  const handleAddBook = async (bookData: InsertBook) => {\n    try {\n      await addBookMutation.mutateAsync(bookData);\n    } catch (error) {\n      console.error(\"Failed to add book:\", error);\n      toast({ title: \"Failed to add book\", variant: \"destructive\" });\n    }\n  };\n\n  const handleBulkUpload = async (newBooks: InsertBook[]) => {\n    try {\n      for (const book of newBooks) {\n        await addBookMutation.mutateAsync(book);\n      }\n    } catch (error) {\n      console.error(\"Failed to bulk upload books:\", error);\n      toast({ title: \"Failed to upload books\", variant: \"destructive\" });\n    }\n  };\n\n  const handleStartReading = async (id: string) => {\n    try {\n      await updateBookMutation.mutateAsync({\n        id,\n        updates: { \n          status: \"reading\",\n          lastReadAt: new Date().toISOString(),\n        }\n      });\n      toast({ title: \"Started reading\" });\n    } catch (error) {\n      console.error(\"Failed to start reading:\", error);\n    }\n  };\n\n  const handleContinueReading = async (id: string) => {\n    try {\n      await updateBookMutation.mutateAsync({\n        id,\n        updates: { \n          lastReadAt: new Date().toISOString(),\n        }\n      });\n      toast({ title: \"Reading session updated\" });\n    } catch (error) {\n      console.error(\"Failed to update reading:\", error);\n    }\n  };\n\n  const handleDeleteBook = async (id: string) => {\n    try {\n      await deleteBookMutation.mutateAsync(id);\n    } catch (error) {\n      console.error(\"Failed to delete book:\", error);\n    }\n  };\n\n  const handleViewDetails = (id: string) => {\n    console.log(\"View details for book:\", id);\n    // TODO: Navigate to book details page\n  };\n\n  const handleStatusChange = async (id: string, newStatus: string) => {\n    try {\n      await updateBookMutation.mutateAsync({\n        id,\n        updates: { \n          status: newStatus as any,\n          lastReadAt: newStatus === \"reading\" ? new Date().toISOString() : undefined,\n        }\n      });\n      toast({ title: `Status changed to ${newStatus}` });\n    } catch (error) {\n      console.error(\"Failed to change status:\", error);\n      toast({ title: \"Failed to change status\", variant: \"destructive\" });\n    }\n  };\n\n  const handleEditBook = (id: string) => {\n    console.log(\"Edit book:\", id);\n    // TODO: Open edit dialog for the book\n    toast({ title: \"Edit functionality coming soon\" });\n  };\n\n  // Filter functions\n  const toggleStatusFilter = (status: string) => {\n    const newStatuses = filters.statuses.includes(status)\n      ? filters.statuses.filter(s => s !== status)\n      : [...filters.statuses, status];\n    updateURL({ statuses: newStatuses });\n  };\n\n  const clearAllFilters = () => {\n    setSearchValue(\"\");\n    updateURL({ \n      search: \"\", \n      statuses: [], \n      genres: [], \n      tags: [],\n      sort: \"priority\",\n      sortOrder: \"desc\"\n    });\n  };\n\n  // Bulk selection functions\n  const toggleBookSelection = (bookId: string) => {\n    const newSelected = new Set(selectedBooks);\n    if (newSelected.has(bookId)) {\n      newSelected.delete(bookId);\n    } else {\n      newSelected.add(bookId);\n    }\n    setSelectedBooks(newSelected);\n  };\n\n  const selectAllBooks = () => {\n    setSelectedBooks(new Set(books.map(book => book.id)));\n  };\n\n  const clearSelection = () => {\n    setSelectedBooks(new Set());\n    setBulkMode(false);\n  };\n\n  // Bulk operations\n  const handleBulkStatusChange = async (status: string) => {\n    const ids = Array.from(selectedBooks);\n    try {\n      await bulkUpdateStatusMutation.mutateAsync({ ids, status });\n      clearSelection();\n    } catch (error) {\n      console.error(\"Failed to update book statuses:\", error);\n      toast({ title: \"Failed to update books\", variant: \"destructive\" });\n    }\n  };\n\n  const handleBulkAddTags = async (tags: string[]) => {\n    const ids = Array.from(selectedBooks);\n    try {\n      await bulkAddTagsMutation.mutateAsync({ ids, tags });\n      clearSelection();\n    } catch (error) {\n      console.error(\"Failed to add tags:\", error);\n      toast({ title: \"Failed to add tags\", variant: \"destructive\" });\n    }\n  };\n\n  const handleBulkDelete = async () => {\n    const ids = Array.from(selectedBooks);\n    try {\n      await bulkDeleteMutation.mutateAsync(ids);\n    } catch (error) {\n      console.error(\"Failed to delete books:\", error);\n      toast({ title: \"Failed to delete books\", variant: \"destructive\" });\n    }\n  };\n\n  // Keyboard shortcuts\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      // Don't trigger shortcuts if user is typing in an input\n      if ((e.target as HTMLElement).tagName === 'INPUT') return;\n      \n      switch (e.key) {\n        case '/':\n          e.preventDefault();\n          searchInputRef?.focus();\n          break;\n        case 'f':\n          e.preventDefault();\n          // Could open filter panel in mobile\n          break;\n        case 'v':\n          e.preventDefault();\n          updateURL({ view: filters.view === 'grid' ? 'list' : 'grid' });\n          break;\n        case 'Escape':\n          e.preventDefault();\n          if (bulkMode) {\n            clearSelection();\n          } else if (searchValue) {\n            setSearchValue(\"\");\n          }\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [searchInputRef, filters.view, updateURL, bulkMode, searchValue, clearSelection]);\n\n  // Initialize search value from URL\n  useEffect(() => {\n    const urlSearch = urlParams.get('search') || '';\n    if (urlSearch !== searchValue) {\n      setSearchValue(urlSearch);\n    }\n  }, [urlParams]);\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"page-library\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-serif font-semibold\">My Library</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            {isLoading ? \"Loading...\" : `${books.length} books in your collection`}\n          </p>\n        </div>\n        <div className=\"flex gap-2 flex-wrap\">\n          <BookSearchDialog>\n            <Button data-testid=\"button-search-books\">\n              <Search className=\"h-4 w-4 mr-2\" />\n              Search Books\n            </Button>\n          </BookSearchDialog>\n          <ImportDialog>\n            <Button variant=\"outline\" data-testid=\"button-import-books\">\n              <Upload className=\"h-4 w-4 mr-2\" />\n              Import\n            </Button>\n          </ImportDialog>\n          <ExportDialog>\n            <Button variant=\"outline\" data-testid=\"button-export-books\">\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export\n            </Button>\n          </ExportDialog>\n          <BulkUploadDialog onBulkUpload={handleBulkUpload} />\n          <AddBookDialog onAddBook={handleAddBook} />\n        </div>\n      </div>\n\n      {/* Search and Filter Bar */}\n      <div className=\"space-y-4\">\n        {/* Primary controls */}\n        <div className=\"flex gap-4 items-center flex-wrap\">\n          {/* Search */}\n          <div className=\"relative flex-1 max-w-md\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n            <Input\n              ref={setSearchInputRef}\n              placeholder=\"Search books, authors, or tags... (Press / to focus)\"\n              value={searchValue}\n              onChange={(e) => setSearchValue(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-search-books\"\n            />\n          </div>\n\n          {/* Sort */}\n          <Select value={filters.sort} onValueChange={(sort) => updateURL({ sort })}>\n            <SelectTrigger className=\"w-48\" data-testid=\"select-sort\">\n              <ChevronDown className=\"mr-2 h-4 w-4\" />\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              {SORT_OPTIONS.map((option) => (\n                <SelectItem key={option.value} value={option.value}>\n                  {option.label}\n                  {filters.sortOrder === \"asc\" && filters.sort === option.value && \" ↑\"}\n                  {filters.sortOrder === \"desc\" && filters.sort === option.value && \" ↓\"}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n\n          {/* View Toggle */}\n          <div className=\"flex border rounded-md\">\n            <Button\n              variant={filters.view === 'grid' ? 'default' : 'ghost'}\n              size=\"sm\"\n              onClick={() => updateURL({ view: 'grid' })}\n              data-testid=\"button-view-grid\"\n            >\n              <Grid3X3 className=\"h-4 w-4\" />\n            </Button>\n            <Button\n              variant={filters.view === 'list' ? 'default' : 'ghost'}\n              size=\"sm\"\n              onClick={() => updateURL({ view: 'list' })}\n              data-testid=\"button-view-list\"\n            >\n              <List className=\"h-4 w-4\" />\n            </Button>\n          </div>\n\n          {/* Bulk Select */}\n          <Button\n            variant={bulkMode ? 'default' : 'outline'}\n            size=\"sm\"\n            onClick={() => setBulkMode(!bulkMode)}\n            data-testid=\"button-bulk-select\"\n          >\n            {bulkMode ? <CheckSquare className=\"h-4 w-4 mr-2\" /> : <Square className=\"h-4 w-4 mr-2\" />}\n            Bulk Select\n          </Button>\n        </div>\n\n        {/* Status Chips */}\n        <div className=\"flex gap-2 flex-wrap items-center\">\n          <span className=\"text-sm text-muted-foreground font-medium\">Status:</span>\n          {BOOK_STATUSES.map((status) => {\n            const isActive = filters.statuses.includes(status);\n            const statusCount = books.filter(b => b.status === status).length;\n            \n            return (\n              <Badge\n                key={status}\n                variant={isActive ? \"default\" : \"outline\"}\n                className={`cursor-pointer hover-elevate ${isActive ? STATUS_CONFIG[status].color : ''}`}\n                onClick={() => toggleStatusFilter(status)}\n                data-testid={`chip-status-${status}`}\n              >\n                {STATUS_CONFIG[status].label}\n                {statusCount > 0 && <span className=\"ml-1\">({statusCount})</span>}\n              </Badge>\n            );\n          })}\n          \n          {(filters.statuses.length > 0 || filters.search || filters.genres.length > 0 || filters.tags.length > 0) && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={clearAllFilters}\n              className=\"text-muted-foreground\"\n              data-testid=\"button-clear-filters\"\n            >\n              <X className=\"h-4 w-4 mr-1\" />\n              Clear all\n            </Button>\n          )}\n        </div>\n      </div>\n\n      {/* Bulk Toolbar */}\n      {bulkMode && selectedBooks.size > 0 && (\n        <div className=\"bg-muted/50 rounded-lg p-4 border border-dashed\">\n          <div className=\"flex items-center justify-between flex-wrap gap-4\">\n            <div className=\"flex items-center gap-4\">\n              <span className=\"font-medium\">{selectedBooks.size} books selected</span>\n              <div className=\"flex gap-2\">\n                <Button size=\"sm\" onClick={selectAllBooks}>Select All</Button>\n                <Button size=\"sm\" variant=\"outline\" onClick={clearSelection}>Clear</Button>\n              </div>\n            </div>\n            \n            <div className=\"flex gap-2 flex-wrap\">\n              {/* Status change buttons */}\n              {BOOK_STATUSES.map((status) => (\n                <Button\n                  key={status}\n                  size=\"sm\"\n                  variant=\"outline\"\n                  onClick={() => handleBulkStatusChange(status)}\n                  data-testid={`button-bulk-status-${status}`}\n                >\n                  Move to {STATUS_CONFIG[status].label}\n                </Button>\n              ))}\n              \n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => handleBulkAddTags(['urgent'])}\n                data-testid=\"button-bulk-add-tag\"\n              >\n                <Tag className=\"h-4 w-4 mr-1\" />\n                Add Tag\n              </Button>\n              \n              <Button\n                size=\"sm\"\n                variant=\"destructive\"\n                onClick={handleBulkDelete}\n                data-testid=\"button-bulk-delete\"\n              >\n                <Trash2 className=\"h-4 w-4 mr-1\" />\n                Delete\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Content */}\n      {isLoading ? (\n        <div className=\"flex items-center justify-center py-12\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n          <span className=\"ml-2 text-muted-foreground\">Loading your library...</span>\n        </div>\n      ) : error ? (\n        <div className=\"text-center py-12\">\n          <div className=\"text-muted-foreground\">\n            Failed to load books. Please try refreshing the page.\n          </div>\n        </div>\n      ) : books.length === 0 ? (\n        <div className=\"text-center py-12 space-y-4\">\n          <div className=\"text-muted-foreground text-lg\">\n            Welcome to your personal library!\n          </div>\n          <div className=\"space-y-4 max-w-md mx-auto\">\n            <div className=\"flex gap-2 justify-center\">\n              <AddBookDialog \n                onAddBook={handleAddBook}\n                trigger={\n                  <Button size=\"lg\" data-testid=\"button-add-first-book\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Your First Book\n                  </Button>\n                }\n              />\n              <BulkUploadDialog onBulkUpload={handleBulkUpload} />\n            </div>\n            <p className=\"text-sm text-muted-foreground\">\n              Start building your reading collection. Scan ISBN codes, search by title/author, or bulk import your existing books.\n            </p>\n          </div>\n        </div>\n      ) : (\n        <div className={\n          filters.view === 'grid' \n            ? \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\" \n            : \"space-y-4\"\n        } data-testid={`${filters.view}-books`}>\n          {books.map((book: Book) => (\n            <BookCard\n              key={book.id}\n              {...book}\n              // Handle null arrays for compatibility with BookCard component\n              topics={book.topics || []}\n              tags={book.tags || []}\n              isSelected={selectedBooks.has(book.id)}\n              showSelection={bulkMode}\n              viewMode={filters.view}\n              onSelect={() => toggleBookSelection(book.id)}\n              onStartReading={handleStartReading}\n              onContinueReading={handleContinueReading}\n              onViewDetails={handleViewDetails}\n              onDelete={handleDeleteBook}\n              onEdit={handleEditBook}\n              onStatusChange={handleStatusChange}\n            />\n          ))}\n        </div>\n      )}\n\n      {/* Keyboard shortcuts help */}\n      <div className=\"text-xs text-muted-foreground text-center space-x-4\">\n        <span>Press <kbd className=\"px-1 py-0.5 bg-muted rounded text-xs\">⌘/</kbd> to search</span>\n        <span><kbd className=\"px-1 py-0.5 bg-muted rounded text-xs\">V</kbd> to toggle view</span>\n        <span><kbd className=\"px-1 py-0.5 bg-muted rounded text-xs\">Esc</kbd> to clear</span>\n      </div>\n    </div>\n  );\n}","size_bytes":24159},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/notes.tsx":{"content":"import { useState, useMemo } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from '@/components/ui/sheet';\nimport { HeaderSearchFilters } from '@/components/notes/header-search-filters';\nimport { QuickCaptureInline } from '@/components/notes/quick-capture-inline';\nimport { NotesListVirtualized } from '@/components/notes/notes-list-virtualized';\nimport { EditNoteSheet } from '@/components/notes/edit-note-sheet';\nimport type { BookNote, Book } from '@shared/schema';\n\ninterface FilterState {\n  books: string[];\n  types: string[];\n  tags: string[];\n  hasImage: boolean | null;\n  dateRange: string | null;\n}\n\nconst initialFilters: FilterState = {\n  books: [],\n  types: [],\n  tags: [],\n  hasImage: null,\n  dateRange: null,\n};\n\nexport default function Notes() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filters, setFilters] = useState<FilterState>(initialFilters);\n  const [showQuickCapture, setShowQuickCapture] = useState(false);\n  const [selectedNote, setSelectedNote] = useState<BookNote | null>(null);\n  const [showEditSheet, setShowEditSheet] = useState(false);\n  const [showQuickCaptureSheet, setShowQuickCaptureSheet] = useState(false);\n\n  // Fetch all notes\n  const { data: notes = [], isLoading: isLoadingNotes } = useQuery({\n    queryKey: ['/api/notes'],\n    queryFn: async () => {\n      const response = await fetch('/api/notes');\n      if (!response.ok) throw new Error('Failed to fetch notes');\n      const data = await response.json();\n      return data.map((note: any) => ({\n        ...note,\n        createdAt: new Date(note.createdAt),\n      })) as BookNote[];\n    },\n  });\n\n  // Fetch all books for filtering\n  const { data: allBooks = [] } = useQuery({\n    queryKey: ['/api/books'],\n    queryFn: async () => {\n      const response = await fetch('/api/books');\n      if (!response.ok) throw new Error('Failed to fetch books');\n      const data = await response.json();\n      return data.map((book: any) => ({\n        ...book,\n        addedAt: new Date(book.addedAt),\n        lastReadAt: book.lastReadAt ? new Date(book.lastReadAt) : null,\n        startedAt: book.startedAt ? new Date(book.startedAt) : null,\n        completedAt: book.completedAt ? new Date(book.completedAt) : null,\n      })) as Book[];\n    },\n  });\n\n  // Get notes with book data enriched\n  const notesWithBooks = useMemo(() => {\n    return notes.map(note => ({\n      ...note,\n      book: allBooks.find(book => book.id === note.bookId),\n    }));\n  }, [notes, allBooks]);\n\n  // Extract available tags for filtering\n  const availableTags = useMemo(() => {\n    const tagCounts = new Map<string, number>();\n    notes.forEach(note => {\n      note.tags?.forEach(tag => {\n        tagCounts.set(tag, (tagCounts.get(tag) || 0) + 1);\n      });\n    });\n    return Array.from(tagCounts.entries())\n      .sort((a, b) => b[1] - a[1])\n      .map(([tag]) => tag);\n  }, [notes]);\n\n  // Filter and search notes\n  const filteredNotes = useMemo(() => {\n    let filtered = notesWithBooks;\n\n    // Text search - searches content, book title/author, tags, page numbers\n    if (searchTerm.trim()) {\n      const searchLower = searchTerm.toLowerCase();\n      filtered = filtered.filter(note => {\n        const matchesContent = note.content.toLowerCase().includes(searchLower);\n        const matchesBook = note.book?.title.toLowerCase().includes(searchLower) ||\n                           note.book?.author.toLowerCase().includes(searchLower);\n        const matchesTags = note.tags?.some(tag => tag.toLowerCase().includes(searchLower));\n        const matchesPage = note.page?.toString().includes(searchLower);\n        \n        return matchesContent || matchesBook || matchesTags || matchesPage;\n      });\n    }\n\n    // Book filter\n    if (filters.books.length > 0) {\n      filtered = filtered.filter(note => filters.books.includes(note.bookId));\n    }\n\n    // Type filter\n    if (filters.types.length > 0) {\n      filtered = filtered.filter(note => filters.types.includes(note.noteType));\n    }\n\n    // Tags filter\n    if (filters.tags.length > 0) {\n      filtered = filtered.filter(note => \n        note.tags?.some(tag => filters.tags.includes(tag))\n      );\n    }\n\n    // Has image filter\n    if (filters.hasImage !== null) {\n      filtered = filtered.filter(note => \n        filters.hasImage ? !!note.sourceImage : !note.sourceImage\n      );\n    }\n\n    // Date range filter\n    if (filters.dateRange) {\n      const now = new Date();\n      const startOfToday = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n      \n      switch (filters.dateRange) {\n        case 'today':\n          filtered = filtered.filter(note => note.createdAt >= startOfToday);\n          break;\n        case '7d':\n          const sevenDaysAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n          filtered = filtered.filter(note => note.createdAt >= sevenDaysAgo);\n          break;\n        case '30d':\n          const thirtyDaysAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n          filtered = filtered.filter(note => note.createdAt >= thirtyDaysAgo);\n          break;\n        // Custom date range would need additional UI\n      }\n    }\n\n    // Sort by most recent\n    return filtered.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }, [notesWithBooks, searchTerm, filters]);\n\n  const handleQuickCaptureOpen = () => {\n    setShowQuickCaptureSheet(true);\n  };\n\n  const handleEditNote = (note: BookNote) => {\n    setSelectedNote(note);\n    setShowEditSheet(true);\n  };\n\n  const handleDeleteNote = (noteId: string) => {\n    if (window.confirm('Are you sure you want to delete this note?')) {\n      // Note deletion is handled by the edit sheet component\n      console.log('Delete note:', noteId);\n    }\n  };\n\n  const handleMakeRecall = (noteId: string) => {\n    // TODO: Implement recall functionality\n    console.log('Make recall for note:', noteId);\n  };\n\n  const handleNoteCapture = () => {\n    setShowQuickCaptureSheet(false);\n  };\n\n  const handleNoteUpdated = () => {\n    setShowEditSheet(false);\n    setSelectedNote(null);\n  };\n\n  const handleNoteDeleted = () => {\n    setShowEditSheet(false);\n    setSelectedNote(null);\n  };\n\n  return (\n    <div className=\"flex flex-col h-screen\" data-testid=\"page-notes\">\n      {/* Sticky header with search and filters */}\n      <HeaderSearchFilters\n        searchTerm={searchTerm}\n        onSearchChange={setSearchTerm}\n        filters={filters}\n        onFiltersChange={setFilters}\n        onQuickCaptureOpen={handleQuickCaptureOpen}\n        availableBooks={allBooks}\n        availableTags={availableTags}\n        noteCount={filteredNotes.length}\n      />\n\n      {/* Quick capture inline (collapsed) */}\n      <div className=\"px-4\">\n        <QuickCaptureInline\n          isCollapsed={true}\n          onCapture={handleNoteCapture}\n        />\n      </div>\n\n      {/* Notes list */}\n      <div className=\"flex-1 overflow-hidden\">\n        {isLoadingNotes ? (\n          <div className=\"flex items-center justify-center h-full\">\n            <div className=\"text-muted-foreground\">Loading notes...</div>\n          </div>\n        ) : (\n          <NotesListVirtualized\n            notes={filteredNotes}\n            onEditNote={handleEditNote}\n            onDeleteNote={handleDeleteNote}\n            onMakeRecall={handleMakeRecall}\n          />\n        )}\n      </div>\n\n      {/* Quick capture bottom sheet */}\n      <Sheet open={showQuickCaptureSheet} onOpenChange={setShowQuickCaptureSheet}>\n        <SheetContent side=\"bottom\" className=\"h-[80vh]\" data-testid=\"sheet-quick-capture\">\n          <SheetHeader>\n            <SheetTitle>Quick Capture</SheetTitle>\n            <SheetDescription>\n              Add a note in ≤3 taps with automatic book and page linking\n            </SheetDescription>\n          </SheetHeader>\n          <div className=\"py-4\">\n            <QuickCaptureInline\n              isCollapsed={false}\n              onCapture={handleNoteCapture}\n            />\n          </div>\n        </SheetContent>\n      </Sheet>\n\n      {/* Edit note sheet */}\n      <EditNoteSheet\n        note={selectedNote}\n        isOpen={showEditSheet}\n        onOpenChange={setShowEditSheet}\n        onUpdated={handleNoteUpdated}\n        onDeleted={handleNoteDeleted}\n      />\n\n      {/* Optional: Bottom bar for recall queue */}\n      {/* TODO: Implement recall system\n      <div className=\"border-t p-4 bg-background\">\n        <Button variant=\"outline\" className=\"w-full\">\n          Today's 5 to review\n        </Button>\n      </div>\n      */}\n    </div>\n  );\n}","size_bytes":8596},"client/src/pages/stats.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { BookOpen, Clock, TrendingUp, Target, Award, Calendar as CalendarIcon, BarChart3 } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { cn } from \"@/lib/utils\";\n\ninterface StatsOverviewResponse {\n  totals: {\n    pages: number;\n    minutes: number;\n    sessions: number;\n  };\n  goals: {\n    targetPages: number;\n    targetMinutes: number;\n    biteTargetPerDay: number;\n  };\n  streak: {\n    current: number;\n    best: number;\n  };\n  finishedBooks: Array<{\n    id: number;\n    title: string;\n    daysToFinish: number;\n    avgPph: number;\n  }>;\n  activeEtas: Array<{\n    bookId: number;\n    title: string;\n    progressPct: number;\n    etaDate: string | null;\n    bitePages: number;\n  }>;\n  sparkline: Array<{\n    date: string;\n    pages: number;\n  }>;\n  heatmap: Array<{\n    date: string;\n    pages: number;\n    minutes: number;\n  }>;\n  range: {\n    from: string;\n    to: string;\n  };\n}\n\nfunction OverviewTab({ data }: { data: StatsOverviewResponse }) {\n  const { totals, goals, streak, finishedBooks, activeEtas, range } = data;\n  \n  // Calculate actual days in selected range\n  const fromDate = new Date(range.from);\n  const toDate = new Date(range.to);\n  const daysInRange = Math.max(1, Math.ceil((toDate.getTime() - fromDate.getTime()) / (1000 * 60 * 60 * 24)) + 1);\n  \n  const goalProgress = goals.targetPages > 0 ? Math.round((totals.pages / goals.targetPages) * 100) : 0;\n  const avgPagesPerDay = totals.pages / daysInRange;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card data-testid=\"card-total-pages\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pages Read</CardTitle>\n            <BookOpen className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-pages\">{totals.pages.toLocaleString()}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {totals.sessions} reading sessions\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-reading-time\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Reading Time</CardTitle>\n            <Clock className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-reading-time\">\n              {Math.floor(totals.minutes / 60)}h {totals.minutes % 60}m\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {Math.round(totals.minutes / Math.max(1, totals.sessions))} min/session avg\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-daily-average\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Daily Average</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-daily-average\">{avgPagesPerDay.toFixed(1)}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Pages per day\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-current-streak\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Current Streak</CardTitle>\n            <Award className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-current-streak\">{streak.current}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Best: {streak.best} days\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Reading Goal Progress */}\n        <Card data-testid=\"card-reading-goal\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Target className=\"h-5 w-5\" />\n              Reading Goal Progress\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm font-medium\">Pages Goal</span>\n              <span className=\"text-sm text-muted-foreground\">\n                {totals.pages.toLocaleString()} / {goals.targetPages.toLocaleString()}\n              </span>\n            </div>\n            <Progress value={Math.min(100, goalProgress)} className=\"h-3\" data-testid=\"progress-pages-goal\" />\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold\" data-testid=\"text-goal-progress\">{goalProgress}%</div>\n              <div className=\"text-sm text-muted-foreground\">Complete</div>\n            </div>\n            <div className=\"text-xs text-muted-foreground\">\n              Daily target: {goals.biteTargetPerDay} pages\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Active Books ETAs */}\n        <Card data-testid=\"card-active-etas\">\n          <CardHeader>\n            <CardTitle>Currently Reading</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {activeEtas.length === 0 ? (\n              <p className=\"text-sm text-muted-foreground\">No books currently being read</p>\n            ) : (\n              <div className=\"space-y-3\">\n                {activeEtas.slice(0, 3).map((book) => (\n                  <div key={book.bookId} className=\"space-y-2\">\n                    <div className=\"flex justify-between items-start\">\n                      <span className=\"text-sm font-medium line-clamp-1\" data-testid={`text-active-book-${book.bookId}`}>\n                        {book.title}\n                      </span>\n                      <Badge variant=\"outline\" data-testid={`badge-progress-${book.bookId}`}>\n                        {book.progressPct}%\n                      </Badge>\n                    </div>\n                    <Progress value={book.progressPct} className=\"h-2\" data-testid={`progress-book-${book.bookId}`} />\n                    <div className=\"flex justify-between text-xs text-muted-foreground\">\n                      <span>{book.bitePages} pages/day target</span>\n                      {book.etaDate && (\n                        <span data-testid={`text-eta-${book.bookId}`}>\n                          ETA: {format(new Date(book.etaDate), \"MMM d\")}\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Finished Books */}\n      {finishedBooks.length > 0 && (\n        <Card data-testid=\"card-finished-books\">\n          <CardHeader>\n            <CardTitle>Recently Finished</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {finishedBooks.slice(0, 5).map((book) => (\n                <div key={book.id} className=\"flex items-center justify-between p-3 rounded-lg bg-muted/30\" data-testid={`finished-book-${book.id}`}>\n                  <div className=\"flex-1\">\n                    <div className=\"font-medium\" data-testid={`finished-book-title-${book.id}`}>\n                      {book.title}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Finished in {book.daysToFinish} days • {book.avgPph.toFixed(1)} pages/hour avg\n                    </div>\n                  </div>\n                  <Badge variant=\"secondary\" data-testid={`badge-days-${book.id}`}>\n                    {book.daysToFinish}d\n                  </Badge>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n\nfunction TrendsTab({ data }: { data: StatsOverviewResponse }) {\n  const { sparkline, heatmap } = data;\n\n  // Guard against empty or insufficient data\n  if (!sparkline || sparkline.length === 0) {\n    return (\n      <div className=\"space-y-6\">\n        <Card data-testid=\"card-no-data\">\n          <CardContent className=\"p-6\">\n            <p className=\"text-center text-muted-foreground\">\n              No data available for the selected range\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // Calculate trend metrics with guards\n  const recentDays = sparkline.slice(-7);\n  const weekTotal = recentDays.length > 0 ? recentDays.reduce((sum, day) => sum + day.pages, 0) : 0;\n  const weekAvg = recentDays.length > 0 ? weekTotal / recentDays.length : 0;\n  \n  const prevWeekDays = sparkline.slice(-14, -7);\n  const prevWeekTotal = prevWeekDays.length > 0 ? prevWeekDays.reduce((sum, day) => sum + day.pages, 0) : 0;\n  const prevWeekAvg = prevWeekDays.length > 0 ? prevWeekTotal / prevWeekDays.length : 0;\n  \n  const weekTrend = prevWeekAvg > 0 ? ((weekAvg - prevWeekAvg) / prevWeekAvg) * 100 : 0;\n  \n  const maxPages = sparkline.length > 0 ? Math.max(0, ...sparkline.map(d => d.pages)) : 0;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Trend Summary */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card data-testid=\"card-week-total\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">This Week</CardTitle>\n            <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-week-total\">{weekTotal}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {weekAvg.toFixed(1)} pages/day avg\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-week-trend\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Week Trend</CardTitle>\n            <TrendingUp className={cn(\"h-4 w-4\", weekTrend >= 0 ? \"text-green-500\" : \"text-red-500\")} />\n          </CardHeader>\n          <CardContent>\n            <div className={cn(\"text-2xl font-bold\", weekTrend >= 0 ? \"text-green-600\" : \"text-red-600\")} data-testid=\"text-week-trend\">\n              {weekTrend >= 0 ? '+' : ''}{weekTrend.toFixed(1)}%\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              vs last week\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-best-day\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Best Day</CardTitle>\n            <Award className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-best-day\">\n              {maxPages}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Pages in one day\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Simple Sparkline Visualization */}\n      <Card data-testid=\"card-reading-chart\">\n        <CardHeader>\n          <CardTitle>Daily Reading Pattern</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-end justify-between h-32 gap-1\" data-testid=\"sparkline-chart\">\n              {sparkline.slice(-30).map((day, index) => {\n                const chartMaxPages = Math.max(1, maxPages);\n                const height = (day.pages / chartMaxPages) * 100;\n                return (\n                  <div\n                    key={day.date}\n                    className=\"bg-primary/20 hover:bg-primary/40 transition-colors flex-1 min-w-[2px] rounded-t\"\n                    style={{ height: `${Math.max(2, height)}%` }}\n                    title={`${day.date}: ${day.pages} pages`}\n                    data-testid={`bar-${index}`}\n                  />\n                );\n              })}\n            </div>\n            <div className=\"flex justify-between text-xs text-muted-foreground\">\n              <span>{sparkline.length > 30 ? format(new Date(sparkline[sparkline.length - 30].date), \"MMM d\") : format(new Date(sparkline[0]?.date || new Date()), \"MMM d\")}</span>\n              <span>Last 30 days</span>\n              <span>{format(new Date(sparkline[sparkline.length - 1]?.date || new Date()), \"MMM d\")}</span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nfunction BreakdownTab({ data }: { data: StatsOverviewResponse }) {\n  const { finishedBooks, totals, goals, range } = data;\n  \n  // Calculate actual days in selected range\n  const fromDate = new Date(range.from);\n  const toDate = new Date(range.to);\n  const daysInRange = Math.max(1, Math.ceil((toDate.getTime() - fromDate.getTime()) / (1000 * 60 * 60 * 24)) + 1);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Detailed Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <Card data-testid=\"card-reading-efficiency\">\n          <CardHeader>\n            <CardTitle>Reading Efficiency</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-sm\">Pages per session</span>\n              <span className=\"font-medium\" data-testid=\"text-pages-per-session\">\n                {totals.sessions > 0 ? (totals.pages / totals.sessions).toFixed(1) : '0'}\n              </span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-sm\">Minutes per page</span>\n              <span className=\"font-medium\" data-testid=\"text-minutes-per-page\">\n                {totals.pages > 0 ? (totals.minutes / totals.pages).toFixed(1) : '0'}\n              </span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-sm\">Session frequency</span>\n              <span className=\"font-medium\" data-testid=\"text-session-frequency\">\n                {(totals.sessions / daysInRange).toFixed(1)}/day\n              </span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-goal-breakdown\">\n          <CardHeader>\n            <CardTitle>Goal Analysis</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-sm\">Daily target</span>\n              <span className=\"font-medium\" data-testid=\"text-daily-target\">\n                {goals.biteTargetPerDay} pages\n              </span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-sm\">Progress to goal</span>\n              <span className=\"font-medium\" data-testid=\"text-goal-percentage\">\n                {goals.targetPages > 0 ? Math.round((totals.pages / goals.targetPages) * 100) : 0}%\n              </span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-sm\">Pages remaining</span>\n              <span className=\"font-medium\" data-testid=\"text-pages-remaining\">\n                {Math.max(0, goals.targetPages - totals.pages).toLocaleString()}\n              </span>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Detailed Finished Books List */}\n      <Card data-testid=\"card-all-finished-books\">\n        <CardHeader>\n          <CardTitle>All Finished Books</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {finishedBooks.length === 0 ? (\n            <p className=\"text-sm text-muted-foreground\">No books finished in this period</p>\n          ) : (\n            <div className=\"space-y-3\">\n              {finishedBooks.map((book, index) => (\n                <div key={book.id} className=\"flex items-center justify-between p-3 rounded-lg border\" data-testid={`detailed-book-${book.id}`}>\n                  <div className=\"flex-1\">\n                    <div className=\"font-medium\" data-testid={`detailed-book-title-${book.id}`}>\n                      {book.title}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Reading pace: {book.avgPph.toFixed(1)} pages/hour\n                    </div>\n                  </div>\n                  <div className=\"text-right space-y-1\">\n                    <Badge variant=\"outline\" data-testid={`detailed-badge-days-${book.id}`}>\n                      {book.daysToFinish} days\n                    </Badge>\n                    <div className=\"text-xs text-muted-foreground\">\n                      #{index + 1} fastest\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default function Stats() {\n  const [dateRange, setDateRange] = useState<{ from: Date; to: Date }>({\n    from: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // 30 days ago\n    to: new Date(),\n  });\n  const [calendarOpen, setCalendarOpen] = useState(false);\n\n  // Format dates for API query\n  const formatDate = (date: Date) => {\n    return date.toISOString().split('T')[0];\n  };\n\n  const { data, isLoading, error } = useQuery<StatsOverviewResponse>({\n    queryKey: ['/api/stats/overview', formatDate(dateRange.from), formatDate(dateRange.to)],\n    queryFn: async () => {\n      const params = new URLSearchParams({\n        from: formatDate(dateRange.from),\n        to: formatDate(dateRange.to),\n      });\n      const response = await fetch(`/api/stats/overview?${params}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch stats');\n      }\n      return response.json();\n    },\n  });\n\n  if (error) {\n    return (\n      <div className=\"space-y-6\" data-testid=\"page-stats\">\n        <div>\n          <h1 className=\"text-3xl font-serif font-semibold\">Reading Statistics</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Track your reading habits and achievements\n          </p>\n        </div>\n        <Card>\n          <CardContent className=\"p-6\">\n            <p className=\"text-center text-muted-foreground\">\n              Failed to load statistics. Please try again later.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"page-stats\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-serif font-semibold\">Reading Statistics</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Track your reading habits and achievements\n          </p>\n        </div>\n        \n        {/* Date Range Picker */}\n        <Popover open={calendarOpen} onOpenChange={setCalendarOpen}>\n          <PopoverTrigger asChild>\n            <Button variant=\"outline\" className=\"w-auto justify-start text-left font-normal\" data-testid=\"button-date-range\">\n              <CalendarIcon className=\"mr-2 h-4 w-4\" />\n              {format(dateRange.from, \"MMM d\")} - {format(dateRange.to, \"MMM d\")}\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent className=\"w-auto p-0\" align=\"end\">\n            <div className=\"p-3 space-y-3\">\n              <div className=\"text-sm font-medium\">Select date range</div>\n              <div className=\"grid grid-cols-2 gap-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => {\n                    setDateRange({\n                      from: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),\n                      to: new Date(),\n                    });\n                    setCalendarOpen(false);\n                  }}\n                  data-testid=\"button-last-7-days\"\n                >\n                  Last 7 days\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => {\n                    setDateRange({\n                      from: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),\n                      to: new Date(),\n                    });\n                    setCalendarOpen(false);\n                  }}\n                  data-testid=\"button-last-30-days\"\n                >\n                  Last 30 days\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => {\n                    setDateRange({\n                      from: new Date(Date.now() - 90 * 24 * 60 * 60 * 1000),\n                      to: new Date(),\n                    });\n                    setCalendarOpen(false);\n                  }}\n                  data-testid=\"button-last-90-days\"\n                >\n                  Last 90 days\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => {\n                    const now = new Date();\n                    const currentYear = now.getFullYear();\n                    setDateRange({\n                      from: new Date(currentYear, 0, 1),\n                      to: now,\n                    });\n                    setCalendarOpen(false);\n                  }}\n                  data-testid=\"button-this-year\"\n                >\n                  This year\n                </Button>\n              </div>\n            </div>\n          </PopoverContent>\n        </Popover>\n      </div>\n\n      {isLoading ? (\n        <div className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            {[...Array(4)].map((_, i) => (\n              <Card key={i}>\n                <CardContent className=\"p-6\">\n                  <div className=\"animate-pulse space-y-2\">\n                    <div className=\"h-4 bg-muted rounded w-1/2\"></div>\n                    <div className=\"h-8 bg-muted rounded w-3/4\"></div>\n                    <div className=\"h-3 bg-muted rounded w-full\"></div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      ) : data ? (\n        <Tabs defaultValue=\"overview\" className=\"space-y-6\" data-testid=\"tabs-stats\">\n          <TabsList className=\"grid w-full grid-cols-3\" data-testid=\"tabs-list\">\n            <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"trends\" data-testid=\"tab-trends\">Trends</TabsTrigger>\n            <TabsTrigger value=\"breakdown\" data-testid=\"tab-breakdown\">Breakdown</TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"overview\" data-testid=\"tab-content-overview\">\n            <OverviewTab data={data} />\n          </TabsContent>\n          \n          <TabsContent value=\"trends\" data-testid=\"tab-content-trends\">\n            <TrendsTab data={data} />\n          </TabsContent>\n          \n          <TabsContent value=\"breakdown\" data-testid=\"tab-content-breakdown\">\n            <BreakdownTab data={data} />\n          </TabsContent>\n        </Tabs>\n      ) : null}\n    </div>\n  );\n}","size_bytes":24208},"client/src/services/bookSearch.ts":{"content":"export interface BookSuggestion {\n  key: string;\n  title: string;\n  author_name?: string[];\n  first_publish_year?: number;\n  isbn?: string[];\n  number_of_pages_median?: number;\n  subject?: string[];\n  cover_i?: number;\n  edition_key?: string[];\n  cover_edition_key?: string;\n}\n\nexport interface BookDetails {\n  title: string;\n  authors: string[];\n  publishYear?: number;\n  isbn?: string;\n  pageCount?: number;\n  subjects: string[];\n  description?: string;\n  coverUrl?: string;\n}\n\nconst OPEN_LIBRARY_BASE = 'https://openlibrary.org';\nconst SEARCH_API = `${OPEN_LIBRARY_BASE}/search.json`;\nconst BOOKS_API = `${OPEN_LIBRARY_BASE}/api/books`;\n\nexport class BookSearchService {\n  private controller: AbortController | null = null;\n\n  async searchBooks(query: string, limit = 10): Promise<BookSuggestion[]> {\n    if (!query.trim()) return [];\n\n    // Cancel previous request if it exists\n    if (this.controller) {\n      this.controller.abort();\n    }\n\n    this.controller = new AbortController();\n\n    try {\n      const response = await fetch(\n        `${SEARCH_API}?q=${encodeURIComponent(query)}&limit=${limit}&fields=key,title,author_name,first_publish_year,isbn,number_of_pages_median,subject,cover_i,edition_key,cover_edition_key`,\n        {\n          signal: this.controller.signal,\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error(`Search failed: ${response.status}`);\n      }\n\n      const data = await response.json();\n      return data.docs || [];\n    } catch (error) {\n      if (error instanceof Error && error.name === 'AbortError') {\n        return []; // Request was cancelled, return empty results\n      }\n      console.error('Book search error:', error);\n      throw error;\n    }\n  }\n\n  async getBookDetails(suggestion: BookSuggestion): Promise<BookDetails | null> {\n    try {\n      // Try to find a proper edition key for the Books API\n      let bibkey = '';\n      \n      if (suggestion.cover_edition_key) {\n        bibkey = `OLID:${suggestion.cover_edition_key}`;\n      } else if (suggestion.edition_key && suggestion.edition_key.length > 0) {\n        bibkey = `OLID:${suggestion.edition_key[0]}`;\n      } else if (suggestion.isbn && suggestion.isbn.length > 0) {\n        bibkey = `ISBN:${suggestion.isbn[0]}`;\n      } else {\n        // If no suitable key, return fallback data from suggestion\n        return this.createFallbackDetails(suggestion);\n      }\n\n      const response = await fetch(\n        `${BOOKS_API}?bibkeys=${bibkey}&jscmd=data&format=json`\n      );\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch book details: ${response.status}`);\n      }\n\n      const data = await response.json();\n      const bookData = Object.values(data)[0] as any;\n\n      if (!bookData) {\n        // Fallback to suggestion data if API details are unavailable\n        return this.createFallbackDetails(suggestion);\n      }\n\n      // Extract and format the book details\n      const details: BookDetails = {\n        title: bookData.title || '',\n        authors: bookData.authors ? bookData.authors.map((a: any) => a.name) : [],\n        publishYear: bookData.publish_date ? parseInt(bookData.publish_date) : undefined,\n        pageCount: bookData.number_of_pages || undefined,\n        subjects: bookData.subjects ? bookData.subjects.map((s: any) => s.name) : [],\n        description: bookData.description?.value || bookData.description,\n        coverUrl: bookData.cover?.large || bookData.cover?.medium || bookData.cover?.small,\n      };\n\n      // Extract ISBN if available\n      if (bookData.identifiers?.isbn_13?.length > 0) {\n        details.isbn = bookData.identifiers.isbn_13[0];\n      } else if (bookData.identifiers?.isbn_10?.length > 0) {\n        details.isbn = bookData.identifiers.isbn_10[0];\n      }\n\n      return details;\n    } catch (error) {\n      console.error('Error fetching book details:', error);\n      // Always return fallback data if API fails\n      return this.createFallbackDetails(suggestion);\n    }\n  }\n\n  private createFallbackDetails(suggestion: BookSuggestion): BookDetails {\n    return {\n      title: suggestion.title,\n      authors: suggestion.author_name || [],\n      publishYear: suggestion.first_publish_year,\n      pageCount: suggestion.number_of_pages_median,\n      subjects: suggestion.subject || [],\n      coverUrl: suggestion.cover_i ? this.getCoverUrl(suggestion.cover_i, 'M') || undefined : undefined,\n    };\n  }\n\n  getCoverUrl(coverI?: number, size: 'S' | 'M' | 'L' = 'M'): string | null {\n    if (!coverI) return null;\n    return `https://covers.openlibrary.org/b/id/${coverI}-${size}.jpg`;\n  }\n\n  // Map subjects to one of our fixed genre options\n  getCanonicalGenre(subjects?: string[]): string {\n    if (!subjects || subjects.length === 0) return 'General Non-Fiction';\n    \n    // Define keyword mapping to our fixed genres\n    const genreMapping: Record<string, string> = {\n      // Fiction keywords\n      'fiction': 'Fiction',\n      'novel': 'Fiction', \n      'science fiction': 'Fiction',\n      'fantasy': 'Fiction',\n      'mystery': 'Fiction',\n      'romance': 'Fiction',\n      'horror': 'Fiction',\n      'thriller': 'Fiction',\n      'adventure': 'Fiction',\n      'drama': 'Fiction',\n      'literary fiction': 'Fiction',\n      \n      // Personal Development\n      'self help': 'Personal Development',\n      'self-help': 'Personal Development',\n      'personal development': 'Personal Development',\n      'self improvement': 'Personal Development',\n      'self-improvement': 'Personal Development',\n      'motivation': 'Personal Development',\n      'productivity': 'Personal Development',\n      'habits': 'Personal Development',\n      \n      // Business / Finance\n      'business': 'Business / Finance',\n      'entrepreneurship': 'Business / Finance',\n      'management': 'Business / Finance',\n      'economics': 'Business / Finance',\n      'finance': 'Business / Finance',\n      'investing': 'Business / Finance',\n      'money': 'Business / Finance',\n      'leadership': 'Business / Finance',\n      'marketing': 'Business / Finance',\n      'startup': 'Business / Finance',\n      \n      // Philosophy / Spirituality  \n      'philosophy': 'Philosophy / Spirituality',\n      'spirituality': 'Philosophy / Spirituality',\n      'religion': 'Philosophy / Spirituality',\n      'meditation': 'Philosophy / Spirituality',\n      'wisdom': 'Philosophy / Spirituality',\n      'ethics': 'Philosophy / Spirituality',\n      'consciousness': 'Philosophy / Spirituality',\n      \n      // Psychology / Self-Improvement\n      'psychology': 'Psychology / Self-Improvement',\n      'cognitive science': 'Psychology / Self-Improvement',\n      'behavioral psychology': 'Psychology / Self-Improvement',\n      'mental health': 'Psychology / Self-Improvement',\n      'therapy': 'Psychology / Self-Improvement',\n      'mindfulness': 'Psychology / Self-Improvement',\n      'emotional intelligence': 'Psychology / Self-Improvement',\n      \n      // History / Culture\n      'history': 'History / Culture',\n      'culture': 'History / Culture',\n      'anthropology': 'History / Culture',\n      'sociology': 'History / Culture',\n      'civilization': 'History / Culture',\n      'world history': 'History / Culture',\n      'cultural studies': 'History / Culture',\n      \n      // Science / Technology\n      'science': 'Science / Technology',\n      'technology': 'Science / Technology',\n      'computer science': 'Science / Technology',\n      'programming': 'Science / Technology',\n      'physics': 'Science / Technology',\n      'biology': 'Science / Technology',\n      'chemistry': 'Science / Technology',\n      'mathematics': 'Science / Technology',\n      'engineering': 'Science / Technology',\n      'artificial intelligence': 'Science / Technology',\n      \n      // Biography/Memoir\n      'biography': 'Biography/Memoir',\n      'autobiography': 'Biography/Memoir',\n      'memoir': 'Biography/Memoir',\n      'memoirs': 'Biography/Memoir',\n      'personal narrative': 'Biography/Memoir',\n    };\n\n    // Check each subject for keyword matches\n    for (const subject of subjects) {\n      const normalizedSubject = subject.toLowerCase().trim();\n      \n      // Direct match\n      if (genreMapping[normalizedSubject]) {\n        return genreMapping[normalizedSubject];\n      }\n      \n      // Partial match - check if subject contains any keywords\n      for (const [keyword, genre] of Object.entries(genreMapping)) {\n        if (normalizedSubject.includes(keyword)) {\n          return genre;\n        }\n      }\n    }\n\n    // Check if any subjects suggest fiction (generic fiction indicators)\n    const fictionIndicators = ['juvenile', 'young adult', 'children', 'stories'];\n    for (const subject of subjects) {\n      const normalized = subject.toLowerCase();\n      if (fictionIndicators.some(indicator => normalized.includes(indicator))) {\n        return 'Fiction';\n      }\n    }\n\n    // Default fallback\n    return 'General Non-Fiction';\n  }\n\n  // Extract relevant topics from subjects and description\n  extractTopics(subjects?: string[], description?: string, maxTopics = 5): string[] {\n    const topics = new Set<string>();\n    \n    // Topic keywords to look for\n    const topicKeywords: Record<string, string> = {\n      'redemption': 'Redemption',\n      'betrayal': 'Betrayal', \n      'cultural conflict': 'Cultural Conflict',\n      'identity': 'Identity',\n      'friendship': 'Friendship',\n      'trauma': 'Trauma',\n      'forgiveness': 'Forgiveness',\n      'immigration': 'Immigration',\n      'loyalty': 'Loyalty',\n      'guilt': 'Guilt',\n      'class': 'Social Class',\n      'war': 'War',\n      'resilience': 'Resilience',\n      'coming of age': 'Coming of Age',\n      'family': 'Family',\n      'love': 'Love',\n      'death': 'Death',\n      'power': 'Power',\n      'corruption': 'Corruption',\n      'survival': 'Survival',\n      'violence': 'Violence',\n      'justice': 'Justice',\n      'freedom': 'Freedom',\n      'oppression': 'Oppression',\n      'revolution': 'Revolution',\n      'leadership': 'Leadership',\n      'innovation': 'Innovation',\n      'success': 'Success',\n      'failure': 'Failure',\n      'courage': 'Courage',\n      'fear': 'Fear',\n      'hope': 'Hope',\n      'transformation': 'Transformation',\n      'self-discovery': 'Self-Discovery',\n      'relationships': 'Relationships',\n      'morality': 'Morality',\n      'sacrifice': 'Sacrifice',\n      'honor': 'Honor',\n      'tradition': 'Tradition',\n      'change': 'Change',\n      'conflict': 'Conflict',\n      'peace': 'Peace',\n      'loss': 'Loss',\n      'recovery': 'Recovery',\n      'growth': 'Personal Growth',\n      'purpose': 'Purpose',\n      'meaning': 'Meaning',\n      'truth': 'Truth',\n      'deception': 'Deception',\n    };\n\n    // Filter out noise from subjects and extract clean topics\n    const filterOutTerms = [\n      'fiction', 'nonfiction', 'non-fiction', 'novel', 'book', 'books', 'literature',\n      'english', 'american', 'british', 'juvenile', 'adult', 'young adult',\n      'textbook', 'study guide', 'guide', 'handbook', 'manual', 'reference',\n      'collection', 'anthology', 'series', 'volume', 'edition', 'revised',\n      'paperback', 'hardcover', 'ebook', 'audiobook', 'large print',\n      'accessible book', 'protected daisy', 'in library', 'borrowable',\n    ];\n\n    if (subjects) {\n      for (const subject of subjects) {\n        const normalized = subject.toLowerCase().trim();\n        \n        // Skip noise terms and very long/generic subjects\n        if (filterOutTerms.some(term => normalized.includes(term)) || \n            normalized.length > 50 || \n            /^\\d{4}$/.test(normalized) || // Skip years\n            normalized.includes('accessible_book') ||\n            normalized.includes('protected_daisy')) {\n          continue;\n        }\n\n        // Check for topic keywords in subject\n        for (const [keyword, topic] of Object.entries(topicKeywords)) {\n          if (normalized.includes(keyword)) {\n            topics.add(topic);\n          }\n        }\n\n        // Add clean subjects as topics if they're concise and meaningful\n        if (normalized.length <= 25 && \n            normalized.split(' ').length <= 3 &&\n            !normalized.includes('--') &&\n            normalized !== 'fiction' &&\n            normalized !== 'non-fiction') {\n          // Title case the subject\n          const titleCased = subject.split(' ')\n            .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n            .join(' ');\n          topics.add(titleCased);\n        }\n      }\n    }\n\n    // Check description for topic keywords\n    if (description) {\n      const descLower = description.toLowerCase();\n      for (const [keyword, topic] of Object.entries(topicKeywords)) {\n        if (descLower.includes(keyword)) {\n          topics.add(topic);\n        }\n      }\n    }\n\n    // Return top topics, limiting to maxTopics\n    return Array.from(topics).slice(0, maxTopics);\n  }\n\n  cancel() {\n    if (this.controller) {\n      this.controller.abort();\n      this.controller = null;\n    }\n  }\n}\n\n// Export a singleton instance\nexport const bookSearchService = new BookSearchService();","size_bytes":13167},"client/src/components/examples/add-book-dialog.tsx":{"content":"import { AddBookDialog } from '../add-book-dialog';\n\nexport default function AddBookDialogExample() {\n  // todo: remove mock functionality\n  const handleAddBook = (book: any) => {\n    console.log('Book added:', book);\n  };\n\n  return (\n    <div className=\"p-4\">\n      <AddBookDialog onAddBook={handleAddBook} />\n    </div>\n  );\n}","size_bytes":328},"client/src/components/examples/book-card.tsx":{"content":"import { BookCard } from '../book-card';\n\nexport default function BookCardExample() {\n  // todo: remove mock functionality\n  const handleStartReading = (id: string) => {\n    console.log('Start reading book:', id);\n  };\n\n  const handleViewDetails = (id: string) => {\n    console.log('View details for book:', id);\n  };\n\n  const handleDelete = (id: string) => {\n    console.log('Delete book:', id);\n  };\n\n  return (\n    <div className=\"max-w-sm\">\n      <BookCard\n        id=\"1\"\n        title=\"The Design of Everyday Things\"\n        author=\"Don Norman\"\n        genre=\"Design\"\n        topics={[\"Design\", \"UX\", \"Psychology\"]}\n        tags={[\"Essential\", \"Design Thinking\"]}\n        status=\"reading\"\n        priority={4}\n        format=\"paper\"\n        language=\"English\"\n        progress={0.34}\n        usefulness=\"Learning user experience principles and design thinking\"\n        totalPages={368}\n        currentPage={125}\n        addedAt={new Date()}\n        lastReadAt={new Date()}\n        notes={[\"Great insights on design psychology\"]}\n        startedAt={new Date()}\n        completedAt={null}\n        coverUrl={null}\n        isCurrentlyReading={true}\n        onStartReading={handleStartReading}\n        onViewDetails={handleViewDetails}\n        onDelete={handleDelete}\n      />\n    </div>\n  );\n}","size_bytes":1294},"client/src/components/examples/reading-progress.tsx":{"content":"import { ReadingProgress } from '../reading-progress';\n\nexport default function ReadingProgressExample() {\n  // todo: remove mock functionality\n  const handleUpdateProgress = (id: string, newPage: number) => {\n    console.log('Updated progress for book', id, 'to page', newPage);\n  };\n\n  return (\n    <div className=\"max-w-md\">\n      <ReadingProgress\n        id=\"1\"\n        title=\"Atomic Habits\"\n        author=\"James Clear\"\n        totalPages={320}\n        currentPage={187}\n        startedAt=\"2024-01-15\"\n        onUpdateProgress={handleUpdateProgress}\n      />\n    </div>\n  );\n}","size_bytes":581},"client/src/components/examples/theme-toggle.tsx":{"content":"import { ThemeToggle } from '../theme-toggle';\n\nexport default function ThemeToggleExample() {\n  return (\n    <div className=\"p-4\">\n      <ThemeToggle />\n    </div>\n  );\n}","size_bytes":171},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/book-search-dialog.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Search, Plus, Star, Calendar, BookOpen, Users } from \"lucide-react\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface SearchResult {\n  googleId: string;\n  title: string;\n  authors: string[];\n  description: string;\n  publishedDate: string;\n  pageCount: number;\n  categories: string[];\n  thumbnail: string;\n  isbn: string;\n  publisher: string;\n  language: string;\n  averageRating: number;\n  ratingsCount: number;\n}\n\ninterface SearchResponse {\n  books: SearchResult[];\n  total: number;\n}\n\ninterface BookSearchDialogProps {\n  children: React.ReactNode;\n}\n\nexport function BookSearchDialog({ children }: BookSearchDialogProps) {\n  const [open, setOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [debouncedQuery, setDebouncedQuery] = useState(\"\");\n  const { toast } = useToast();\n\n  // Debounce search query\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedQuery(searchQuery);\n    }, 500);\n\n    return () => clearTimeout(timer);\n  }, [searchQuery]);\n\n  const { data: searchResults, isLoading: isSearching } = useQuery<SearchResponse>({\n    queryKey: ['/api/books/search', debouncedQuery],\n    queryFn: async () => {\n      if (!debouncedQuery || debouncedQuery.trim().length < 2) {\n        return { books: [], total: 0 };\n      }\n      \n      const params = new URLSearchParams({ q: debouncedQuery.trim() });\n      const response = await fetch(`/api/books/search?${params}`);\n      if (!response.ok) {\n        throw new Error('Failed to search books');\n      }\n      return response.json();\n    },\n    enabled: debouncedQuery.trim().length >= 2,\n  });\n\n  const addBookMutation = useMutation({\n    mutationFn: (bookData: SearchResult) => apiRequest('POST', `/api/books/add-from-search`, {\n      searchResult: bookData,\n      format: \"paper\",\n      status: \"toRead\", \n      priority: 2\n    }),\n    onSuccess: () => {\n      toast({\n        title: \"Book added successfully\",\n        description: \"The book has been added to your library\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/books'] });\n      setOpen(false);\n      setSearchQuery(\"\");\n      setDebouncedQuery(\"\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to add book\",\n        description: error.message || \"An error occurred while adding the book\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddBook = (book: SearchResult) => {\n    addBookMutation.mutate(book);\n  };\n\n  const resetSearch = () => {\n    setSearchQuery(\"\");\n    setDebouncedQuery(\"\");\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={(newOpen) => {\n      setOpen(newOpen);\n      if (!newOpen) {\n        resetSearch();\n      }\n    }}>\n      <DialogTrigger asChild>\n        {children}\n      </DialogTrigger>\n      <DialogContent className=\"max-w-4xl max-h-[80vh] flex flex-col\" data-testid=\"dialog-book-search\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Search className=\"h-5 w-5\" />\n            Search Books\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-4 flex-1 overflow-hidden\">\n          {/* Search Input */}\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search by title, author, or ISBN...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-book-search\"\n            />\n          </div>\n\n          {/* Search Results */}\n          <ScrollArea className=\"flex-1\" data-testid=\"scroll-search-results\">\n            <div className=\"space-y-3 pr-4\">\n              {isSearching && (\n                <div className=\"space-y-3\">\n                  {[...Array(3)].map((_, i) => (\n                    <Card key={i}>\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex gap-4\">\n                          <Skeleton className=\"w-16 h-20 rounded\" />\n                          <div className=\"flex-1 space-y-2\">\n                            <Skeleton className=\"h-5 w-3/4\" />\n                            <Skeleton className=\"h-4 w-1/2\" />\n                            <Skeleton className=\"h-3 w-full\" />\n                            <Skeleton className=\"h-3 w-2/3\" />\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              )}\n\n              {!isSearching && debouncedQuery.trim().length >= 2 && searchResults?.books.length === 0 && (\n                <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"text-no-results\">\n                  <BookOpen className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                  <p>No books found for \"{debouncedQuery}\"</p>\n                  <p className=\"text-sm\">Try different keywords or check the spelling</p>\n                </div>\n              )}\n\n              {!isSearching && debouncedQuery.trim().length < 2 && (\n                <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"text-search-prompt\">\n                  <Search className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                  <p>Start typing to search for books</p>\n                  <p className=\"text-sm\">Search by title, author, or ISBN</p>\n                </div>\n              )}\n\n              {searchResults?.books.map((book) => (\n                <Card key={book.googleId} className=\"hover:shadow-md transition-shadow\" data-testid={`book-result-${book.googleId}`}>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex gap-4\">\n                      {/* Book Cover */}\n                      <div className=\"flex-shrink-0\">\n                        {book.thumbnail ? (\n                          <img\n                            src={book.thumbnail}\n                            alt={book.title}\n                            className=\"w-16 h-20 object-cover rounded border\"\n                            data-testid={`img-book-cover-${book.googleId}`}\n                          />\n                        ) : (\n                          <div className=\"w-16 h-20 bg-muted rounded border flex items-center justify-center\">\n                            <BookOpen className=\"h-6 w-6 text-muted-foreground\" />\n                          </div>\n                        )}\n                      </div>\n\n                      {/* Book Details */}\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-start justify-between gap-2 mb-2\">\n                          <h3 className=\"font-semibold line-clamp-2 leading-5\" data-testid={`text-book-title-${book.googleId}`}>\n                            {book.title}\n                          </h3>\n                          <Button\n                            size=\"sm\"\n                            onClick={() => handleAddBook(book)}\n                            disabled={addBookMutation.isPending}\n                            className=\"flex-shrink-0\"\n                            data-testid={`button-add-book-${book.googleId}`}\n                          >\n                            <Plus className=\"h-4 w-4 mr-1\" />\n                            Add\n                          </Button>\n                        </div>\n\n                        <div className=\"space-y-2\">\n                          {/* Authors */}\n                          <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n                            <Users className=\"h-3 w-3\" />\n                            <span data-testid={`text-book-authors-${book.googleId}`}>\n                              {book.authors.join(', ')}\n                            </span>\n                          </div>\n\n                          {/* Publication info */}\n                          <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n                            {book.publishedDate && (\n                              <div className=\"flex items-center gap-1\">\n                                <Calendar className=\"h-3 w-3\" />\n                                <span>{book.publishedDate}</span>\n                              </div>\n                            )}\n                            {book.pageCount > 0 && (\n                              <div className=\"flex items-center gap-1\">\n                                <BookOpen className=\"h-3 w-3\" />\n                                <span>{book.pageCount} pages</span>\n                              </div>\n                            )}\n                            {book.averageRating > 0 && (\n                              <div className=\"flex items-center gap-1\">\n                                <Star className=\"h-3 w-3\" />\n                                <span>{book.averageRating}/5 ({book.ratingsCount})</span>\n                              </div>\n                            )}\n                          </div>\n\n                          {/* Categories */}\n                          {book.categories.length > 0 && (\n                            <div className=\"flex flex-wrap gap-1\">\n                              {book.categories.slice(0, 3).map((category, index) => (\n                                <Badge key={index} variant=\"outline\" className=\"text-xs\" data-testid={`badge-category-${book.googleId}-${index}`}>\n                                  {category}\n                                </Badge>\n                              ))}\n                              {book.categories.length > 3 && (\n                                <Badge variant=\"outline\" className=\"text-xs\">\n                                  +{book.categories.length - 3} more\n                                </Badge>\n                              )}\n                            </div>\n                          )}\n\n                          {/* Description */}\n                          {book.description && (\n                            <p className=\"text-sm text-muted-foreground line-clamp-2\" data-testid={`text-book-description-${book.googleId}`}>\n                              {book.description}\n                            </p>\n                          )}\n\n                          {/* Publisher and ISBN */}\n                          <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n                            {book.publisher && <span>Publisher: {book.publisher}</span>}\n                            {book.isbn && <span>ISBN: {book.isbn}</span>}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </ScrollArea>\n\n          {/* Results summary */}\n          {searchResults && searchResults.total > 0 && (\n            <div className=\"text-sm text-muted-foreground text-center\" data-testid=\"text-results-summary\">\n              Showing {searchResults.books.length} of {searchResults.total.toLocaleString()} results\n            </div>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":11887},"client/src/components/book-switcher.tsx":{"content":"import { useState } from 'react';\nimport { ChevronDown, BookOpen, Plus } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuSeparator,\n} from '@/components/ui/dropdown-menu';\nimport { Badge } from '@/components/ui/badge';\nimport { getProgressPercentage } from '@/lib/progressUtils';\nimport type { Book } from '@shared/schema';\n\ninterface BookSwitcherProps {\n  selectedBook: Book | null;\n  onBookSelect: (book: Book) => void;\n  onAddNewBook?: () => void;\n  currentlyReadingBooks: Book[];\n}\n\nexport function BookSwitcher({ selectedBook, onBookSelect, onAddNewBook, currentlyReadingBooks }: BookSwitcherProps) {\n\n  if (currentlyReadingBooks.length === 0) {\n    return (\n      <Card data-testid=\"card-no-books-reading\">\n        <CardContent className=\"flex flex-col items-center justify-center py-8 text-center\">\n          <BookOpen className=\"h-12 w-12 text-muted-foreground mb-4\" />\n          <h3 className=\"text-lg font-semibold mb-2\">No books currently reading</h3>\n          <p className=\"text-muted-foreground mb-4\">\n            Start reading a book to track your progress with session management\n          </p>\n          {onAddNewBook && (\n            <Button onClick={onAddNewBook} data-testid=\"button-add-first-book\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Your First Book\n            </Button>\n          )}\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-col space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-xl font-semibold\">Currently Reading</h2>\n        <Badge variant=\"outline\" data-testid=\"badge-books-count\">\n          {currentlyReadingBooks.length} book{currentlyReadingBooks.length === 1 ? '' : 's'}\n        </Badge>\n      </div>\n\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button \n            variant=\"outline\" \n            className=\"w-full justify-between h-auto p-4\"\n            data-testid=\"button-book-switcher\"\n          >\n            {selectedBook ? (\n              <div className=\"flex flex-col items-start space-y-1\">\n                <div className=\"font-medium\">{selectedBook.title}</div>\n                <div className=\"text-sm text-muted-foreground\">\n                  by {selectedBook.author} • {getProgressPercentage(selectedBook)}% complete\n                </div>\n              </div>\n            ) : (\n              <div className=\"flex items-center space-x-2\">\n                <BookOpen className=\"h-4 w-4\" />\n                <span>Select a book to read</span>\n              </div>\n            )}\n            <ChevronDown className=\"h-4 w-4 text-muted-foreground\" />\n          </Button>\n        </DropdownMenuTrigger>\n        \n        <DropdownMenuContent className=\"w-80\" align=\"start\">\n          {currentlyReadingBooks.map((book) => (\n            <DropdownMenuItem\n              key={book.id}\n              onClick={() => onBookSelect(book)}\n              className=\"p-3 h-auto\"\n              data-testid={`menu-item-book-${book.id}`}\n            >\n              <div className=\"flex flex-col space-y-1 w-full\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"font-medium truncate\">{book.title}</span>\n                  {selectedBook?.id === book.id && (\n                    <Badge variant=\"default\" className=\"ml-2\">Current</Badge>\n                  )}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">\n                  by {book.author}\n                </div>\n                <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n                  <span>{book.genre}</span>\n                  <span>{getProgressPercentage(book)}% complete</span>\n                </div>\n                {book.currentPage && book.totalPages && (\n                  <div className=\"w-full bg-muted rounded-full h-1.5 mt-1\">\n                    <div \n                      className=\"bg-accent h-1.5 rounded-full transition-all\" \n                      style={{ width: `${getProgressPercentage(book)}%` }}\n                    />\n                  </div>\n                )}\n              </div>\n            </DropdownMenuItem>\n          ))}\n          \n          {onAddNewBook && (\n            <>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem onClick={onAddNewBook} data-testid=\"menu-item-add-book\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add New Book\n              </DropdownMenuItem>\n            </>\n          )}\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </div>\n  );\n}","size_bytes":4797},"client/src/components/hero-session-card.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useQueryClient } from '@tanstack/react-query';\nimport { Play, Pause, Square, Clock, BookOpen, Target, Calendar } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { ProgressInput } from '@/components/progress-input';\nimport { useSessionTimer } from '@/hooks/useSessionTimer';\nimport { useSessionState } from '@/hooks/useSessionState';\nimport { getProgressPercentage, calculateProgressForecast } from '@/lib/progressUtils';\nimport { formatSessionTime, getSessionDuration } from '@/lib/sessionUtils';\nimport type { Book, ReadingSession } from '@shared/schema';\n\ninterface HeroSessionCardProps {\n  book: Book;\n  activeSession?: ReadingSession | null;\n  onSessionUpdate?: () => void;\n}\n\nexport function HeroSessionCard({ book, activeSession, onSessionUpdate }: HeroSessionCardProps) {\n  const queryClient = useQueryClient();\n  const { actions, isLoading, error } = useSessionState(book.id);\n  const { timer, startTimer, pauseTimer, resumeTimer, stopTimer, getFormattedTime } = useSessionTimer(activeSession);\n  const [isStarting, setIsStarting] = useState(false);\n  const [showProgressInput, setShowProgressInput] = useState(false);\n\n  // Fetch recent sessions for progress forecasting\n  const { data: recentSessions = [] } = useQuery({\n    queryKey: ['/api/books', book.id, 'sessions'],\n    queryFn: async () => {\n      const response = await fetch(`/api/books/${book.id}/sessions?limit=10`);\n      if (!response.ok) throw new Error('Failed to fetch sessions');\n      const data = await response.json();\n      return data.map((session: any) => ({\n        ...session,\n        startedAt: new Date(session.startedAt),\n        sessionDate: new Date(session.sessionDate),\n        pausedAt: session.pausedAt ? new Date(session.pausedAt) : null,\n        resumedAt: session.resumedAt ? new Date(session.resumedAt) : null,\n        endedAt: session.endedAt ? new Date(session.endedAt) : null,\n      }));\n    },\n  });\n\n  const progressPercentage = getProgressPercentage(book);\n  const forecast = calculateProgressForecast(book, recentSessions);\n\n  const handleStartSession = async () => {\n    if (activeSession) return;\n    \n    setIsStarting(true);\n    try {\n      await actions.startSession({\n        bookId: book.id,\n        startPage: book.currentPage || 0,\n      });\n      startTimer();\n      onSessionUpdate?.();\n    } catch (err) {\n      console.error('Failed to start session:', err);\n    } finally {\n      setIsStarting(false);\n    }\n  };\n\n  const handlePauseSession = async () => {\n    if (!activeSession) return;\n    \n    try {\n      await actions.pauseSession(activeSession.id);\n      pauseTimer();\n      onSessionUpdate?.();\n    } catch (err) {\n      console.error('Failed to pause session:', err);\n    }\n  };\n\n  const handleResumeSession = async () => {\n    if (!activeSession || activeSession.state !== 'paused') return;\n    \n    try {\n      await actions.resumeSession(activeSession.id);\n      resumeTimer();\n      onSessionUpdate?.();\n    } catch (err) {\n      console.error('Failed to resume session:', err);\n    }\n  };\n\n  const handleStopSession = () => {\n    if (!activeSession) return;\n    setShowProgressInput(true);\n  };\n\n  const handleProgressUpdate = async (endPage: number) => {\n    if (!activeSession) return;\n    \n    try {\n      // Update book progress first\n      const response = await fetch(`/api/books/${book.id}/progress`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ currentPage: endPage }),\n      });\n\n      if (!response.ok) throw new Error('Failed to update progress');\n\n      // Stop the session with the updated end page\n      await actions.stopSession({\n        sessionId: activeSession.id,\n        endPage,\n      });\n      \n      stopTimer();\n      setShowProgressInput(false);\n      \n      // Invalidate relevant queries\n      queryClient.invalidateQueries({ queryKey: ['/api/books/currently-reading'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/books', book.id] });\n      queryClient.invalidateQueries({ queryKey: ['/api/books', book.id, 'sessions'] });\n      \n      onSessionUpdate?.();\n    } catch (err) {\n      console.error('Failed to stop session:', err);\n    }\n  };\n\n  const handleCancelProgressInput = () => {\n    setShowProgressInput(false);\n  };\n\n  const getSessionStatusInfo = () => {\n    if (!activeSession) {\n      return {\n        status: 'Ready to start',\n        color: 'gray' as const,\n        action: 'start',\n      };\n    }\n\n    switch (activeSession.state) {\n      case 'active':\n        return {\n          status: 'Reading session active',\n          color: 'green' as const,\n          action: 'pause',\n        };\n      case 'paused':\n        return {\n          status: 'Session paused',\n          color: 'orange' as const,\n          action: 'resume',\n        };\n      default:\n        return {\n          status: 'Ready to start',\n          color: 'gray' as const,\n          action: 'start',\n        };\n    }\n  };\n\n  const statusInfo = getSessionStatusInfo();\n\n  return (\n    <Card className=\"w-full\" data-testid=\"card-hero-session\">\n      <CardHeader>\n        <div className=\"flex items-start justify-between\">\n          <div className=\"space-y-1\">\n            <CardTitle className=\"text-xl font-serif\">{book.title}</CardTitle>\n            <p className=\"text-muted-foreground\">by {book.author}</p>\n          </div>\n          <Badge \n            variant={statusInfo.color === 'green' ? 'default' : statusInfo.color === 'orange' ? 'secondary' : 'outline'}\n            data-testid=\"badge-session-status\"\n          >\n            {statusInfo.status}\n          </Badge>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-6\">\n        {/* Progress Section */}\n        <div className=\"space-y-3\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <BookOpen className=\"h-4 w-4 text-muted-foreground\" />\n              <span className=\"text-sm font-medium\">Reading Progress</span>\n            </div>\n            <span className=\"text-sm text-muted-foreground\">\n              {book.currentPage || 0} of {book.totalPages || 0} pages\n            </span>\n          </div>\n          <Progress value={progressPercentage} className=\"h-2\" data-testid=\"progress-book\" />\n          <div className=\"text-xs text-muted-foreground text-right\">\n            {progressPercentage}% complete\n          </div>\n        </div>\n\n        {/* Session Timer */}\n        <div className=\"space-y-3\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <Clock className=\"h-4 w-4 text-muted-foreground\" />\n              <span className=\"text-sm font-medium\">Session Time</span>\n            </div>\n            {activeSession && (\n              <span className=\"text-xs text-muted-foreground\">\n                Started {formatSessionTime(activeSession.startedAt)}\n              </span>\n            )}\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-3xl font-mono font-bold\" data-testid=\"text-timer\">\n              {getFormattedTime()}\n            </div>\n            {activeSession && activeSession.duration && (\n              <div className=\"text-xs text-muted-foreground mt-1\">\n                Total: {getSessionDuration(activeSession)}\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Session Controls */}\n        <div className=\"flex justify-center space-x-3\">\n          {!activeSession && (\n            <Button\n              size=\"lg\"\n              onClick={handleStartSession}\n              disabled={isStarting || isLoading}\n              data-testid=\"button-start-session\"\n            >\n              <Play className=\"h-4 w-4 mr-2\" />\n              {isStarting ? 'Starting...' : 'Start Reading'}\n            </Button>\n          )}\n\n          {activeSession?.state === 'active' && (\n            <>\n              <Button\n                size=\"lg\"\n                variant=\"outline\"\n                onClick={handlePauseSession}\n                disabled={isLoading}\n                data-testid=\"button-pause-session\"\n              >\n                <Pause className=\"h-4 w-4 mr-2\" />\n                Pause\n              </Button>\n              <Button\n                size=\"lg\"\n                variant=\"destructive\"\n                onClick={handleStopSession}\n                disabled={isLoading}\n                data-testid=\"button-stop-session\"\n              >\n                <Square className=\"h-4 w-4 mr-2\" />\n                Stop\n              </Button>\n            </>\n          )}\n\n          {activeSession?.state === 'paused' && (\n            <>\n              <Button\n                size=\"lg\"\n                onClick={handleResumeSession}\n                disabled={isLoading}\n                data-testid=\"button-resume-session\"\n              >\n                <Play className=\"h-4 w-4 mr-2\" />\n                Resume\n              </Button>\n              <Button\n                size=\"lg\"\n                variant=\"destructive\"\n                onClick={handleStopSession}\n                disabled={isLoading}\n                data-testid=\"button-stop-session\"\n              >\n                <Square className=\"h-4 w-4 mr-2\" />\n                Stop\n              </Button>\n            </>\n          )}\n        </div>\n\n        {/* Progress Forecast */}\n        {forecast.estimatedTimeToFinish && (\n          <div className=\"space-y-3 pt-4 border-t\">\n            <div className=\"flex items-center space-x-2\">\n              <Target className=\"h-4 w-4 text-muted-foreground\" />\n              <span className=\"text-sm font-medium\">Reading Forecast</span>\n            </div>\n            <div className=\"grid grid-cols-2 gap-4 text-sm\">\n              <div>\n                <div className=\"text-muted-foreground\">Time to finish</div>\n                <div className=\"font-medium\" data-testid=\"text-time-to-finish\">\n                  {forecast.estimatedTimeToFinish}\n                </div>\n              </div>\n              <div>\n                <div className=\"text-muted-foreground\">Reading pace</div>\n                <div className=\"font-medium\" data-testid=\"text-reading-pace\">\n                  {forecast.averagePagesPerHour > 0 ? \n                    `${forecast.averagePagesPerHour.toFixed(1)} pages/hr` : \n                    'No data yet'\n                  }\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Progress Input */}\n        {showProgressInput && (\n          <div className=\"pt-4 border-t\">\n            <ProgressInput\n              book={book}\n              onPageUpdate={() => {}} // Not used in this context\n              onCancel={handleCancelProgressInput}\n              onConfirm={handleProgressUpdate}\n              isLoading={isLoading}\n            />\n          </div>\n        )}\n\n        {/* Error Display */}\n        {error && (\n          <div className=\"text-sm text-destructive bg-destructive/10 p-3 rounded-md\" data-testid=\"text-session-error\">\n            {error}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":11434},"client/src/components/notes/edit-note-sheet.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useMutation, useQueryClient, useQuery } from '@tanstack/react-query';\nimport { \n  PenTool, \n  Quote, \n  Highlighter, \n  FileText, \n  CheckSquare,\n  Calendar,\n  Link as LinkIcon,\n  Copy,\n  ArrowRightLeft,\n  Brain\n} from 'lucide-react';\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetFooter,\n  SheetHeader,\n  SheetTitle,\n} from '@/components/ui/sheet';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Badge } from '@/components/ui/badge';\nimport { Switch } from '@/components/ui/switch';\nimport { Label } from '@/components/ui/label';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { apiRequest } from '@/lib/queryClient';\nimport { formatDistanceToNow } from 'date-fns';\nimport type { BookNote, Book, UpdateBookNote } from '@shared/schema';\n\ninterface EditNoteSheetProps {\n  note: BookNote | null;\n  isOpen: boolean;\n  onOpenChange: (open: boolean) => void;\n  onUpdated?: (note: BookNote) => void;\n  onDeleted?: (noteId: string) => void;\n}\n\nconst NOTE_TYPES = [\n  { id: 'note', label: 'Note', icon: PenTool, color: 'bg-blue-100 text-blue-700' },\n  { id: 'quote', label: 'Quote', icon: Quote, color: 'bg-green-100 text-green-700' },\n  { id: 'highlight', label: 'Highlight', icon: Highlighter, color: 'bg-yellow-100 text-yellow-700' },\n  { id: 'summary', label: 'Summary', icon: FileText, color: 'bg-purple-100 text-purple-700' },\n  { id: 'action', label: 'Action', icon: CheckSquare, color: 'bg-orange-100 text-orange-700' },\n];\n\nconst CONVERSION_OPTIONS = [\n  { from: 'quote', to: 'summary', label: 'Quote → Summary' },\n  { from: 'note', to: 'action', label: 'Note → Action' },\n  { from: 'highlight', to: 'note', label: 'Highlight → Note' },\n  { from: 'summary', to: 'note', label: 'Summary → Note' },\n  { from: 'action', to: 'note', label: 'Action → Note' },\n];\n\nexport function EditNoteSheet({ \n  note, \n  isOpen, \n  onOpenChange, \n  onUpdated, \n  onDeleted \n}: EditNoteSheetProps) {\n  const queryClient = useQueryClient();\n  const [content, setContent] = useState('');\n  const [selectedBookId, setSelectedBookId] = useState('');\n  const [page, setPage] = useState('');\n  const [noteType, setNoteType] = useState('note');\n  const [makeRecall, setMakeRecall] = useState(false);\n  const [newTag, setNewTag] = useState('');\n  const [tags, setTags] = useState<string[]>([]);\n\n  // Fetch all books for book selector\n  const { data: allBooks = [] } = useQuery({\n    queryKey: ['/api/books'],\n    queryFn: async () => {\n      const response = await fetch('/api/books');\n      if (!response.ok) throw new Error('Failed to fetch books');\n      const data = await response.json();\n      return data.map((book: any) => ({\n        ...book,\n        addedAt: new Date(book.addedAt),\n        lastReadAt: book.lastReadAt ? new Date(book.lastReadAt) : null,\n        startedAt: book.startedAt ? new Date(book.startedAt) : null,\n        completedAt: book.completedAt ? new Date(book.completedAt) : null,\n      })) as Book[];\n    },\n    enabled: isOpen,\n  });\n\n  // Reset form when note changes\n  useEffect(() => {\n    if (note) {\n      setContent(note.content || '');\n      setSelectedBookId(note.bookId);\n      setPage(note.page?.toString() || '');\n      setNoteType(note.noteType);\n      setTags(note.tags || []);\n      setMakeRecall(false);\n      setNewTag('');\n    }\n  }, [note]);\n\n  // Update note mutation\n  const updateNoteMutation = useMutation({\n    mutationFn: async (noteData: UpdateBookNote) => {\n      if (!note) throw new Error('No note to update');\n      const response = await fetch(`/api/notes/${note.id}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(noteData),\n      });\n      if (!response.ok) throw new Error('Failed to update note');\n      return await response.json();\n    },\n    onSuccess: (updatedNote: BookNote) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/notes'] });\n      onUpdated?.(updatedNote);\n      onOpenChange(false);\n    },\n    onError: (error) => {\n      console.error('Failed to update note:', error);\n    },\n  });\n\n  // Delete note mutation\n  const deleteNoteMutation = useMutation({\n    mutationFn: async () => {\n      if (!note) throw new Error('No note to delete');\n      const response = await fetch(`/api/notes/${note.id}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) throw new Error('Failed to delete note');\n      return response;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/notes'] });\n      onDeleted?.(note!.id);\n      onOpenChange(false);\n    },\n    onError: (error) => {\n      console.error('Failed to delete note:', error);\n    },\n  });\n\n  const handleSave = () => {\n    if (!content.trim() || !selectedBookId) return;\n\n    const noteData: UpdateBookNote = {\n      content: content.trim(),\n      bookId: selectedBookId,\n      page: page ? parseInt(page) : undefined,\n      noteType: noteType as any,\n      tags: tags,\n    };\n\n    updateNoteMutation.mutate(noteData);\n  };\n\n  const handleDelete = () => {\n    if (window.confirm('Are you sure you want to delete this note?')) {\n      deleteNoteMutation.mutate();\n    }\n  };\n\n  const handleAddTag = () => {\n    if (newTag.trim() && !tags.includes(newTag.trim())) {\n      setTags([...tags, newTag.trim()]);\n      setNewTag('');\n    }\n  };\n\n  const removeTag = (tagToRemove: string) => {\n    setTags(tags.filter(tag => tag !== tagToRemove));\n  };\n\n  const handleConvertTo = (newType: string) => {\n    setNoteType(newType);\n  };\n\n  const copyNoteLink = () => {\n    if (note) {\n      const link = `app://note/${note.id}`;\n      navigator.clipboard.writeText(link);\n      // Could show a toast here\n    }\n  };\n\n  const selectedType = NOTE_TYPES.find(type => type.id === noteType) || NOTE_TYPES[0];\n  const availableConversions = CONVERSION_OPTIONS.filter(option => option.from === noteType);\n  const currentBook = allBooks.find(book => book.id === selectedBookId);\n\n  if (!note) return null;\n\n  return (\n    <Sheet open={isOpen} onOpenChange={onOpenChange}>\n      <SheetContent className=\"w-full sm:max-w-lg overflow-y-auto\" data-testid=\"sheet-edit-note\">\n        <SheetHeader>\n          <SheetTitle>Edit Note</SheetTitle>\n          <SheetDescription>\n            Make changes to your note. All fields are optional except content.\n          </SheetDescription>\n        </SheetHeader>\n\n        <div className=\"py-6 space-y-6\">\n          {/* Note content */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"content\">Content</Label>\n            <Textarea\n              id=\"content\"\n              placeholder=\"Write your note content...\"\n              value={content}\n              onChange={(e) => setContent(e.target.value)}\n              className=\"min-h-[120px] resize-none\"\n              data-testid=\"textarea-edit-content\"\n            />\n            <div className=\"text-xs text-muted-foreground\">\n              {content.length} characters\n            </div>\n          </div>\n\n          {/* Book and page */}\n          <div className=\"grid grid-cols-3 gap-3\">\n            <div className=\"col-span-2 space-y-2\">\n              <Label>Book</Label>\n              <Select value={selectedBookId} onValueChange={setSelectedBookId}>\n                <SelectTrigger data-testid=\"select-edit-book\">\n                  <SelectValue placeholder=\"Select book\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {allBooks.map(book => (\n                    <SelectItem key={book.id} value={book.id}>\n                      {book.title} - {book.author}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2\">\n              <Label>Page</Label>\n              <Input\n                type=\"number\"\n                placeholder=\"Page\"\n                value={page}\n                onChange={(e) => setPage(e.target.value)}\n                data-testid=\"input-edit-page\"\n              />\n            </div>\n          </div>\n\n          {/* Note type */}\n          <div className=\"space-y-3\">\n            <Label>Type</Label>\n            <div className=\"flex gap-2 flex-wrap\">\n              {NOTE_TYPES.map(type => {\n                const Icon = type.icon;\n                const isSelected = noteType === type.id;\n                return (\n                  <Button\n                    key={type.id}\n                    variant={isSelected ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => setNoteType(type.id)}\n                    className={`${isSelected ? type.color : ''} gap-1`}\n                    data-testid={`button-edit-type-${type.id}`}\n                  >\n                    <Icon className=\"h-3 w-3\" />\n                    {type.label}\n                  </Button>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* Conversion shortcuts */}\n          {availableConversions.length > 0 && (\n            <div className=\"space-y-2\">\n              <Label>Convert to...</Label>\n              <div className=\"flex gap-2 flex-wrap\">\n                {availableConversions.map(conversion => (\n                  <Button\n                    key={conversion.to}\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handleConvertTo(conversion.to)}\n                    className=\"gap-1\"\n                    data-testid={`button-convert-${conversion.to}`}\n                  >\n                    <ArrowRightLeft className=\"h-3 w-3\" />\n                    {conversion.label}\n                  </Button>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Tags */}\n          <div className=\"space-y-3\">\n            <Label>Tags</Label>\n            <div className=\"flex gap-2\">\n              <Input\n                placeholder=\"Add tag\"\n                value={newTag}\n                onChange={(e) => setNewTag(e.target.value)}\n                onKeyPress={(e) => e.key === 'Enter' && handleAddTag()}\n                data-testid=\"input-edit-tag\"\n              />\n              <Button onClick={handleAddTag} size=\"sm\" data-testid=\"button-edit-add-tag\">\n                Add\n              </Button>\n            </div>\n            {tags.length > 0 && (\n              <div className=\"flex gap-1 flex-wrap\">\n                {tags.map(tag => (\n                  <Badge\n                    key={tag}\n                    variant=\"secondary\"\n                    className=\"cursor-pointer\"\n                    onClick={() => removeTag(tag)}\n                    data-testid={`edit-tag-${tag}`}\n                  >\n                    {tag} ×\n                  </Badge>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Recall toggle */}\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <Switch\n                id=\"make-recall-edit\"\n                checked={makeRecall}\n                onCheckedChange={setMakeRecall}\n                data-testid=\"switch-edit-recall\"\n              />\n              <Label htmlFor=\"make-recall-edit\" className=\"flex items-center gap-2\">\n                <Brain className=\"h-4 w-4\" />\n                Make Recall\n              </Label>\n            </div>\n          </div>\n\n          {/* Metadata */}\n          <div className=\"space-y-2 pt-4 border-t\">\n            <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n              <div className=\"flex items-center gap-2\">\n                <Calendar className=\"h-4 w-4\" />\n                <span>Created {formatDistanceToNow(new Date(note.createdAt), { addSuffix: true })}</span>\n              </div>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={copyNoteLink}\n                data-testid=\"button-copy-link\"\n              >\n                <LinkIcon className=\"h-4 w-4 mr-1\" />\n                Copy Link\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        <SheetFooter className=\"gap-2\">\n          <Button\n            variant=\"destructive\"\n            onClick={handleDelete}\n            disabled={deleteNoteMutation.isPending}\n            data-testid=\"button-delete-note\"\n          >\n            {deleteNoteMutation.isPending ? 'Deleting...' : 'Delete'}\n          </Button>\n          <Button\n            variant=\"outline\"\n            onClick={() => onOpenChange(false)}\n            data-testid=\"button-cancel-edit\"\n          >\n            Cancel\n          </Button>\n          <Button\n            onClick={handleSave}\n            disabled={!content.trim() || !selectedBookId || updateNoteMutation.isPending}\n            data-testid=\"button-save-edit\"\n          >\n            {updateNoteMutation.isPending ? 'Saving...' : 'Save Changes'}\n          </Button>\n        </SheetFooter>\n      </SheetContent>\n    </Sheet>\n  );\n}","size_bytes":13382},"client/src/components/notes/header-search-filters.tsx":{"content":"import { useState } from 'react';\nimport { Search, X, Filter, Calendar } from 'lucide-react';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n  DropdownMenuCheckboxItem,\n} from '@/components/ui/dropdown-menu';\nimport type { Book } from '@shared/schema';\n\ninterface FilterState {\n  books: string[];\n  types: string[];\n  tags: string[];\n  hasImage: boolean | null;\n  dateRange: string | null;\n}\n\ninterface HeaderSearchFiltersProps {\n  searchTerm: string;\n  onSearchChange: (search: string) => void;\n  filters: FilterState;\n  onFiltersChange: (filters: FilterState) => void;\n  onQuickCaptureOpen: () => void;\n  availableBooks: Book[];\n  availableTags: string[];\n  noteCount: number;\n}\n\nconst NOTE_TYPES = [\n  { id: 'note', label: 'Note' },\n  { id: 'quote', label: 'Quote' },\n  { id: 'highlight', label: 'Highlight' },\n  { id: 'summary', label: 'Summary' },\n  { id: 'action', label: 'Action' },\n];\n\nconst DATE_RANGES = [\n  { id: 'today', label: 'Today' },\n  { id: '7d', label: '7 days' },\n  { id: '30d', label: '30 days' },\n  { id: 'custom', label: 'Custom' },\n];\n\nexport function HeaderSearchFilters({\n  searchTerm,\n  onSearchChange,\n  filters,\n  onFiltersChange,\n  onQuickCaptureOpen,\n  availableBooks,\n  availableTags,\n  noteCount,\n}: HeaderSearchFiltersProps) {\n  const [isFilterOpen, setIsFilterOpen] = useState(false);\n\n  const activeFilterCount = \n    filters.books.length + \n    filters.types.length + \n    filters.tags.length + \n    (filters.hasImage !== null ? 1 : 0) + \n    (filters.dateRange ? 1 : 0);\n\n  const clearAllFilters = () => {\n    onFiltersChange({\n      books: [],\n      types: [],\n      tags: [],\n      hasImage: null,\n      dateRange: null,\n    });\n  };\n\n  const toggleBookFilter = (bookId: string) => {\n    const newBooks = filters.books.includes(bookId)\n      ? filters.books.filter(id => id !== bookId)\n      : [...filters.books, bookId];\n    onFiltersChange({ ...filters, books: newBooks });\n  };\n\n  const toggleTypeFilter = (typeId: string) => {\n    const newTypes = filters.types.includes(typeId)\n      ? filters.types.filter(id => id !== typeId)\n      : [...filters.types, typeId];\n    onFiltersChange({ ...filters, types: newTypes });\n  };\n\n  const toggleTagFilter = (tag: string) => {\n    const newTags = filters.tags.includes(tag)\n      ? filters.tags.filter(t => t !== tag)\n      : [...filters.tags, tag];\n    onFiltersChange({ ...filters, tags: newTags });\n  };\n\n  const removeFilter = (type: string, value: string) => {\n    switch (type) {\n      case 'book':\n        toggleBookFilter(value);\n        break;\n      case 'type':\n        toggleTypeFilter(value);\n        break;\n      case 'tag':\n        toggleTagFilter(value);\n        break;\n      case 'hasImage':\n        onFiltersChange({ ...filters, hasImage: null });\n        break;\n      case 'dateRange':\n        onFiltersChange({ ...filters, dateRange: null });\n        break;\n    }\n  };\n\n  const getBookTitle = (bookId: string) => {\n    const book = availableBooks.find(b => b.id === bookId);\n    return book?.title || 'Unknown Book';\n  };\n\n  const recentBooks = availableBooks.slice(0, 5);\n  const frequentTags = availableTags.slice(0, 10);\n\n  return (\n    <div className=\"sticky top-0 z-10 bg-background border-b\">\n      <div className=\"p-4 space-y-4\">\n        {/* Header with search and add button */}\n        <div className=\"flex items-center gap-3\">\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n            <Input\n              placeholder=\"Search notes, quotes, tags\"\n              value={searchTerm}\n              onChange={(e) => onSearchChange(e.target.value)}\n              className=\"pl-10 pr-10\"\n              data-testid=\"input-search-notes\"\n            />\n            {searchTerm && (\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"absolute right-1 top-1/2 transform -translate-y-1/2 h-8 w-8 p-0\"\n                onClick={() => onSearchChange('')}\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            )}\n          </div>\n          <Button onClick={onQuickCaptureOpen} data-testid=\"button-quick-capture\">\n            +\n          </Button>\n        </div>\n\n        {/* Filter chips and controls */}\n        <div className=\"flex items-center gap-2\">\n          <DropdownMenu open={isFilterOpen} onOpenChange={setIsFilterOpen}>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-filters\">\n                <Filter className=\"h-4 w-4 mr-2\" />\n                Filters\n                {activeFilterCount > 0 && (\n                  <Badge variant=\"secondary\" className=\"ml-2 h-5 w-5 p-0 text-xs rounded-full\">\n                    {activeFilterCount}\n                  </Badge>\n                )}\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent className=\"w-80\" align=\"start\">\n              {/* Books Filter */}\n              <DropdownMenuLabel>Books (Recent 5)</DropdownMenuLabel>\n              {recentBooks.map(book => (\n                <DropdownMenuCheckboxItem\n                  key={book.id}\n                  checked={filters.books.includes(book.id)}\n                  onCheckedChange={() => toggleBookFilter(book.id)}\n                  data-testid={`filter-book-${book.id}`}\n                >\n                  {book.title}\n                </DropdownMenuCheckboxItem>\n              ))}\n              {availableBooks.length > 5 && (\n                <DropdownMenuItem className=\"text-xs text-muted-foreground\">\n                  All... (showing recent 5)\n                </DropdownMenuItem>\n              )}\n\n              <DropdownMenuSeparator />\n\n              {/* Note Types Filter */}\n              <DropdownMenuLabel>Type</DropdownMenuLabel>\n              {NOTE_TYPES.map(type => (\n                <DropdownMenuCheckboxItem\n                  key={type.id}\n                  checked={filters.types.includes(type.id)}\n                  onCheckedChange={() => toggleTypeFilter(type.id)}\n                  data-testid={`filter-type-${type.id}`}\n                >\n                  {type.label}\n                </DropdownMenuCheckboxItem>\n              ))}\n\n              <DropdownMenuSeparator />\n\n              {/* Tags Filter */}\n              <DropdownMenuLabel>Tags (Top 10)</DropdownMenuLabel>\n              {frequentTags.map(tag => (\n                <DropdownMenuCheckboxItem\n                  key={tag}\n                  checked={filters.tags.includes(tag)}\n                  onCheckedChange={() => toggleTagFilter(tag)}\n                  data-testid={`filter-tag-${tag}`}\n                >\n                  {tag}\n                </DropdownMenuCheckboxItem>\n              ))}\n              {availableTags.length > 10 && (\n                <DropdownMenuItem className=\"text-xs text-muted-foreground\">\n                  All... (showing top 10)\n                </DropdownMenuItem>\n              )}\n\n              <DropdownMenuSeparator />\n\n              {/* Has Image Filter */}\n              <DropdownMenuCheckboxItem\n                checked={filters.hasImage === true}\n                onCheckedChange={(checked) => \n                  onFiltersChange({ ...filters, hasImage: checked ? true : null })\n                }\n                data-testid=\"filter-has-image\"\n              >\n                Has image\n              </DropdownMenuCheckboxItem>\n\n              <DropdownMenuSeparator />\n\n              {/* Date Range Filter */}\n              <DropdownMenuLabel>Date</DropdownMenuLabel>\n              {DATE_RANGES.map(range => (\n                <DropdownMenuCheckboxItem\n                  key={range.id}\n                  checked={filters.dateRange === range.id}\n                  onCheckedChange={(checked) => \n                    onFiltersChange({ ...filters, dateRange: checked ? range.id : null })\n                  }\n                  data-testid={`filter-date-${range.id}`}\n                >\n                  {range.label}\n                </DropdownMenuCheckboxItem>\n              ))}\n            </DropdownMenuContent>\n          </DropdownMenu>\n\n          {activeFilterCount > 0 && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={clearAllFilters}\n              data-testid=\"button-clear-filters\"\n            >\n              Clear all\n            </Button>\n          )}\n\n          <div className=\"text-sm text-muted-foreground\">\n            {noteCount} note{noteCount === 1 ? '' : 's'}\n          </div>\n        </div>\n\n        {/* Active filter chips */}\n        {activeFilterCount > 0 && (\n          <ScrollArea className=\"w-full\">\n            <div className=\"flex gap-2 pb-2\">\n              {filters.books.map(bookId => (\n                <Badge\n                  key={bookId}\n                  variant=\"secondary\"\n                  className=\"flex items-center gap-1\"\n                  data-testid={`chip-book-${bookId}`}\n                >\n                  {getBookTitle(bookId)}\n                  <X\n                    className=\"h-3 w-3 cursor-pointer\"\n                    onClick={() => removeFilter('book', bookId)}\n                  />\n                </Badge>\n              ))}\n              {filters.types.map(type => (\n                <Badge\n                  key={type}\n                  variant=\"secondary\"\n                  className=\"flex items-center gap-1\"\n                  data-testid={`chip-type-${type}`}\n                >\n                  {NOTE_TYPES.find(t => t.id === type)?.label || type}\n                  <X\n                    className=\"h-3 w-3 cursor-pointer\"\n                    onClick={() => removeFilter('type', type)}\n                  />\n                </Badge>\n              ))}\n              {filters.tags.map(tag => (\n                <Badge\n                  key={tag}\n                  variant=\"secondary\"\n                  className=\"flex items-center gap-1\"\n                  data-testid={`chip-tag-${tag}`}\n                >\n                  {tag}\n                  <X\n                    className=\"h-3 w-3 cursor-pointer\"\n                    onClick={() => removeFilter('tag', tag)}\n                  />\n                </Badge>\n              ))}\n              {filters.hasImage && (\n                <Badge\n                  variant=\"secondary\"\n                  className=\"flex items-center gap-1\"\n                  data-testid=\"chip-has-image\"\n                >\n                  Has image\n                  <X\n                    className=\"h-3 w-3 cursor-pointer\"\n                    onClick={() => removeFilter('hasImage', '')}\n                  />\n                </Badge>\n              )}\n              {filters.dateRange && (\n                <Badge\n                  variant=\"secondary\"\n                  className=\"flex items-center gap-1\"\n                  data-testid={`chip-date-${filters.dateRange}`}\n                >\n                  {DATE_RANGES.find(d => d.id === filters.dateRange)?.label || filters.dateRange}\n                  <X\n                    className=\"h-3 w-3 cursor-pointer\"\n                    onClick={() => removeFilter('dateRange', '')}\n                  />\n                </Badge>\n              )}\n            </div>\n          </ScrollArea>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":11642},"client/src/components/notes/notes-list-virtualized.tsx":{"content":"import { useMemo } from 'react';\nimport { useVirtualizer } from '@tanstack/react-virtual';\nimport { useRef } from 'react';\nimport { formatDistanceToNow } from 'date-fns';\nimport { \n  PenTool, \n  Quote, \n  Highlighter, \n  FileText, \n  CheckSquare,\n  Edit,\n  Brain,\n  MoreHorizontal,\n  Calendar,\n  BookOpen\n} from 'lucide-react';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport type { BookNote, Book } from '@shared/schema';\n\ninterface NotesListProps {\n  notes: (BookNote & { book?: Book })[];\n  onEditNote: (note: BookNote) => void;\n  onDeleteNote: (noteId: string) => void;\n  onMakeRecall: (noteId: string) => void;\n}\n\nconst NOTE_TYPE_CONFIG = {\n  note: { icon: PenTool, color: 'bg-blue-100 text-blue-700 border-blue-200', label: 'Note' },\n  quote: { icon: Quote, color: 'bg-green-100 text-green-700 border-green-200', label: 'Quote' },\n  highlight: { icon: Highlighter, color: 'bg-yellow-100 text-yellow-700 border-yellow-200', label: 'Highlight' },\n  summary: { icon: FileText, color: 'bg-purple-100 text-purple-700 border-purple-200', label: 'Summary' },\n  action: { icon: CheckSquare, color: 'bg-orange-100 text-orange-700 border-orange-200', label: 'Action' },\n};\n\nexport function NotesListVirtualized({\n  notes,\n  onEditNote,\n  onDeleteNote,\n  onMakeRecall,\n}: NotesListProps) {\n  const parentRef = useRef<HTMLDivElement>(null);\n\n  const virtualizer = useVirtualizer({\n    count: notes.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 150, // Estimated height per note card\n    overscan: 5,\n  });\n\n  const virtualItems = virtualizer.getVirtualItems();\n\n  const renderNote = (note: BookNote & { book?: Book }) => {\n    const typeConfig = NOTE_TYPE_CONFIG[note.noteType as keyof typeof NOTE_TYPE_CONFIG] || NOTE_TYPE_CONFIG.note;\n    const TypeIcon = typeConfig.icon;\n\n    return (\n      <Card \n        className=\"hover-elevate transition-all duration-200 group\"\n        data-testid={`note-card-${note.id}`}\n      >\n        <CardContent className=\"p-4\">\n          {/* Header with type pill, book info, and actions */}\n          <div className=\"flex items-start justify-between mb-3\">\n            <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n              <Badge \n                variant=\"secondary\" \n                className={`${typeConfig.color} flex items-center gap-1 shrink-0`}\n                data-testid={`note-type-${note.id}`}\n              >\n                <TypeIcon className=\"h-3 w-3\" />\n                {typeConfig.label}\n              </Badge>\n              \n              <div className=\"flex items-center gap-2 text-sm text-muted-foreground min-w-0\">\n                <BookOpen className=\"h-3 w-3 shrink-0\" />\n                <span className=\"truncate\" data-testid={`note-book-${note.id}`}>\n                  {note.book?.title || 'Unknown Book'}\n                </span>\n                {note.page && (\n                  <>\n                    <span>•</span>\n                    <span data-testid={`note-page-${note.id}`}>p.{note.page}</span>\n                  </>\n                )}\n              </div>\n            </div>\n\n            <div className=\"flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => onEditNote(note)}\n                data-testid={`button-edit-${note.id}`}\n              >\n                <Edit className=\"h-3 w-3\" />\n              </Button>\n              \n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    data-testid={`button-menu-${note.id}`}\n                  >\n                    <MoreHorizontal className=\"h-3 w-3\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\">\n                  <DropdownMenuItem onClick={() => onEditNote(note)}>\n                    <Edit className=\"h-4 w-4 mr-2\" />\n                    Edit\n                  </DropdownMenuItem>\n                  <DropdownMenuItem onClick={() => onMakeRecall(note.id)}>\n                    <Brain className=\"h-4 w-4 mr-2\" />\n                    Make Recall\n                  </DropdownMenuItem>\n                  <DropdownMenuItem \n                    onClick={() => onDeleteNote(note.id)}\n                    className=\"text-destructive focus:text-destructive\"\n                  >\n                    Delete\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </div>\n          </div>\n\n          {/* Note content (2-4 lines with truncation) */}\n          <div className=\"mb-3\">\n            <p \n              className=\"text-sm leading-relaxed line-clamp-3\"\n              data-testid={`note-content-${note.id}`}\n            >\n              {note.content}\n            </p>\n          </div>\n\n          {/* Footer with timestamp and tags */}\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n              <Calendar className=\"h-3 w-3\" />\n              <span data-testid={`note-timestamp-${note.id}`}>\n                {formatDistanceToNow(new Date(note.createdAt), { addSuffix: true })}\n              </span>\n            </div>\n\n            {note.tags && note.tags.length > 0 && (\n              <div className=\"flex gap-1 flex-wrap\" data-testid={`note-tags-${note.id}`}>\n                {note.tags.slice(0, 3).map((tag, index) => (\n                  <Badge \n                    key={index} \n                    variant=\"outline\" \n                    className=\"text-xs px-1 py-0\"\n                    data-testid={`note-tag-${tag}-${note.id}`}\n                  >\n                    {tag}\n                  </Badge>\n                ))}\n                {note.tags.length > 3 && (\n                  <Badge variant=\"outline\" className=\"text-xs px-1 py-0\">\n                    +{note.tags.length - 3}\n                  </Badge>\n                )}\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  if (notes.length === 0) {\n    return (\n      <div className=\"flex flex-col items-center justify-center py-12 text-center\">\n        <Quote className=\"h-12 w-12 text-muted-foreground mb-4\" />\n        <h3 className=\"text-lg font-semibold mb-2\">No notes found</h3>\n        <p className=\"text-muted-foreground max-w-md\">\n          Start capturing your thoughts and insights while reading. Use the quick capture above to add your first note.\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={parentRef}\n      className=\"flex-1 overflow-auto\"\n      style={{ height: '100%' }}\n      data-testid=\"notes-list-container\"\n    >\n      <div\n        style={{\n          height: virtualizer.getTotalSize(),\n          width: '100%',\n          position: 'relative',\n        }}\n      >\n        {virtualItems.map((virtualItem) => {\n          const note = notes[virtualItem.index];\n          return (\n            <div\n              key={virtualItem.key}\n              data-index={virtualItem.index}\n              ref={virtualizer.measureElement}\n              style={{\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                width: '100%',\n                transform: `translateY(${virtualItem.start}px)`,\n              }}\n              className=\"px-4 pb-4\"\n            >\n              {renderNote(note)}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}","size_bytes":7867},"client/src/components/notes/quick-capture-inline.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useMutation, useQueryClient, useQuery } from '@tanstack/react-query';\nimport { \n  PenTool, \n  Quote, \n  Highlighter, \n  FileText, \n  CheckSquare, \n  Mic, \n  Camera, \n  Clipboard,\n  ChevronDown,\n  Brain\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Badge } from '@/components/ui/badge';\nimport { Switch } from '@/components/ui/switch';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent } from '@/components/ui/card';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { apiRequest } from '@/lib/queryClient';\nimport type { Book, InsertBookNote } from '@shared/schema';\n\ninterface QuickCaptureProps {\n  isCollapsed: boolean;\n  defaultBook?: Book | null;\n  defaultPage?: number;\n  onCapture?: (note: any) => void;\n}\n\nconst NOTE_TYPES = [\n  { id: 'note', label: 'Note', icon: PenTool, color: 'bg-blue-100 text-blue-700' },\n  { id: 'quote', label: 'Quote', icon: Quote, color: 'bg-green-100 text-green-700' },\n  { id: 'highlight', label: 'Highlight', icon: Highlighter, color: 'bg-yellow-100 text-yellow-700' },\n  { id: 'summary', label: 'Summary', icon: FileText, color: 'bg-purple-100 text-purple-700' },\n  { id: 'action', label: 'Action', icon: CheckSquare, color: 'bg-orange-100 text-orange-700' },\n];\n\nexport function QuickCaptureInline({ \n  isCollapsed, \n  defaultBook, \n  defaultPage,\n  onCapture \n}: QuickCaptureProps) {\n  const queryClient = useQueryClient();\n  const [content, setContent] = useState('');\n  const [selectedBook, setSelectedBook] = useState<string>(defaultBook?.id || '');\n  const [page, setPage] = useState<string>(defaultPage?.toString() || '');\n  const [noteType, setNoteType] = useState<string>('note');\n  const [makeRecall, setMakeRecall] = useState(false);\n  const [addTag, setAddTag] = useState(false);\n  const [newTag, setNewTag] = useState('');\n  const [tags, setTags] = useState<string[]>([]);\n  const [bookSelectOpen, setBookSelectOpen] = useState(false);\n  const [typeSelectOpen, setTypeSelectOpen] = useState(false);\n\n  // Fetch currently reading books for quick selection\n  const { data: currentlyReadingBooks = [] } = useQuery({\n    queryKey: ['/api/books/currently-reading'],\n    queryFn: async () => {\n      const response = await fetch('/api/books/currently-reading');\n      if (!response.ok) throw new Error('Failed to fetch books');\n      const data = await response.json();\n      return data.map((book: any) => ({\n        ...book,\n        addedAt: new Date(book.addedAt),\n        lastReadAt: book.lastReadAt ? new Date(book.lastReadAt) : null,\n        startedAt: book.startedAt ? new Date(book.startedAt) : null,\n        completedAt: book.completedAt ? new Date(book.completedAt) : null,\n      })) as Book[];\n    },\n  });\n\n  // Auto-fill book and page from Currently Reading if not provided\n  useEffect(() => {\n    if (!defaultBook && currentlyReadingBooks.length > 0 && !selectedBook) {\n      const firstBook = currentlyReadingBooks[0];\n      setSelectedBook(firstBook.id);\n      if (!defaultPage && firstBook.currentPage) {\n        setPage(firstBook.currentPage.toString());\n      }\n    }\n  }, [currentlyReadingBooks, defaultBook, defaultPage, selectedBook]);\n\n  // Create note mutation\n  const createNoteMutation = useMutation({\n    mutationFn: async (noteData: InsertBookNote) => {\n      const response = await fetch('/api/notes', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(noteData),\n      });\n      if (!response.ok) throw new Error('Failed to create note');\n      return await response.json();\n    },\n    onSuccess: (newNote) => {\n      // Invalidate notes queries\n      queryClient.invalidateQueries({ queryKey: ['/api/notes'] });\n      \n      // Reset form\n      setContent('');\n      setNewTag('');\n      setTags([]);\n      setMakeRecall(false);\n      setAddTag(false);\n      \n      // Keep book and page for convenience\n      onCapture?.(newNote);\n    },\n    onError: (error) => {\n      console.error('Failed to create note:', error);\n    },\n  });\n\n  const handleSubmit = () => {\n    if (!content.trim() || !selectedBook) return;\n\n    const noteData: InsertBookNote = {\n      bookId: selectedBook,\n      content: content.trim(),\n      noteType: noteType as any,\n      page: page ? parseInt(page) : undefined,\n      tags: tags,\n    };\n\n    createNoteMutation.mutate(noteData);\n  };\n\n  const handleAddTag = () => {\n    if (newTag.trim() && !tags.includes(newTag.trim())) {\n      setTags([...tags, newTag.trim()]);\n      setNewTag('');\n    }\n  };\n\n  const removeTag = (tagToRemove: string) => {\n    setTags(tags.filter(tag => tag !== tagToRemove));\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && e.metaKey) {\n      handleSubmit();\n    }\n  };\n\n  const selectedType = NOTE_TYPES.find(type => type.id === noteType) || NOTE_TYPES[0];\n\n  if (isCollapsed) {\n    return null; // Will be handled by bottom sheet instead\n  }\n\n  return (\n    <Card className=\"border-dashed\" data-testid=\"card-quick-capture\">\n      <CardContent className=\"p-4 space-y-4\">\n        {/* Note content input */}\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"note-content\" className=\"text-sm font-medium\">Note content</Label>\n          <Textarea\n            id=\"note-content\"\n            placeholder={`Write your ${selectedType.label.toLowerCase()}...`}\n            value={content}\n            onChange={(e) => setContent(e.target.value)}\n            onKeyDown={handleKeyPress}\n            className=\"min-h-[80px] resize-none\"\n            data-testid=\"textarea-note-content\"\n            aria-describedby=\"content-help\"\n          />\n          <div id=\"content-help\" className=\"text-xs text-muted-foreground\">\n            ⌘+Enter to save • {content.length} characters\n          </div>\n        </div>\n\n        {/* Book and page selectors */}\n        <div className=\"grid grid-cols-3 gap-3\">\n          <div className=\"col-span-2 space-y-2\">\n            <Label htmlFor=\"select-note-book-trigger\">Book</Label>\n            <Select \n              value={selectedBook} \n              onValueChange={setSelectedBook}\n              open={bookSelectOpen}\n              onOpenChange={setBookSelectOpen}\n            >\n              <SelectTrigger \n                id=\"select-note-book-trigger\"\n                data-testid=\"select-note-book\"\n                aria-label=\"Select book\"\n              >\n                <SelectValue placeholder=\"Select book\" />\n              </SelectTrigger>\n              <SelectContent \n                data-testid=\"listbox-note-book\"\n                className=\"z-50\"\n                position=\"popper\"\n                sideOffset={4}\n                aria-labelledby=\"select-note-book-trigger\"\n              >\n                {currentlyReadingBooks.map(book => (\n                  <SelectItem \n                    key={book.id} \n                    value={book.id}\n                    data-testid={`option-book-${book.id}`}\n                  >\n                    {book.title} - {book.author}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"note-page-input\">Page</Label>\n            <Input\n              id=\"note-page-input\"\n              type=\"number\"\n              placeholder=\"Page\"\n              value={page}\n              onChange={(e) => setPage(e.target.value)}\n              data-testid=\"input-note-page\"\n            />\n          </div>\n        </div>\n\n        {/* Note type pills */}\n        <div className=\"space-y-2\">\n          <Label className=\"text-sm font-medium\">Type</Label>\n          <div className=\"flex gap-2 flex-wrap\" role=\"radiogroup\" aria-label=\"Note type\">\n            {NOTE_TYPES.map(type => {\n              const Icon = type.icon;\n              const isSelected = noteType === type.id;\n              return (\n                <Button\n                  key={type.id}\n                  variant={isSelected ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setNoteType(type.id)}\n                  className={`${isSelected ? type.color : ''} gap-1`}\n                  data-testid={`button-type-${type.id}`}\n                  role=\"radio\"\n                  aria-checked={isSelected}\n                  aria-label={`Select ${type.label} type`}\n                >\n                  <Icon className=\"h-3 w-3\" />\n                  {type.label}\n                </Button>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Toggles and options */}\n        <div className=\"space-y-3\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <Switch\n                id=\"make-recall\"\n                checked={makeRecall}\n                onCheckedChange={setMakeRecall}\n                data-testid=\"switch-make-recall\"\n                aria-describedby=\"recall-help\"\n              />\n              <Label htmlFor=\"make-recall\" className=\"flex items-center gap-2\">\n                <Brain className=\"h-4 w-4\" />\n                Make Recall\n              </Label>\n              <span id=\"recall-help\" className=\"sr-only\">\n                Turn this note into a spaced repetition flashcard for later review\n              </span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Switch\n                id=\"add-tag\"\n                checked={addTag}\n                onCheckedChange={setAddTag}\n                data-testid=\"switch-add-tag\"\n                aria-describedby=\"tag-help\"\n              />\n              <Label htmlFor=\"add-tag\">Add Tag</Label>\n              <span id=\"tag-help\" className=\"sr-only\">\n                Add tags to organize and filter this note\n              </span>\n            </div>\n          </div>\n\n          {addTag && (\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"new-tag-input\" className=\"text-sm font-medium\">Add tags</Label>\n              <div className=\"flex gap-2\">\n                <Input\n                  id=\"new-tag-input\"\n                  placeholder=\"Tag name\"\n                  value={newTag}\n                  onChange={(e) => setNewTag(e.target.value)}\n                  onKeyPress={(e) => e.key === 'Enter' && handleAddTag()}\n                  data-testid=\"input-new-tag\"\n                  aria-describedby=\"tag-input-help\"\n                />\n                <Button \n                  onClick={handleAddTag} \n                  size=\"sm\" \n                  data-testid=\"button-add-tag\"\n                  disabled={!newTag.trim()}\n                >\n                  Add\n                </Button>\n              </div>\n              <div id=\"tag-input-help\" className=\"text-xs text-muted-foreground\">\n                Press Enter to add tag\n              </div>\n              {tags.length > 0 && (\n                <div className=\"flex gap-1 flex-wrap\" aria-label=\"Current tags\">\n                  {tags.map(tag => (\n                    <Badge\n                      key={tag}\n                      variant=\"secondary\"\n                      className=\"cursor-pointer\"\n                      onClick={() => removeTag(tag)}\n                      data-testid={`chip-tag-${tag}`}\n                      role=\"button\"\n                      aria-label={`Remove tag ${tag}`}\n                    >\n                      {tag} ×\n                    </Badge>\n                  ))}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n\n        {/* Secondary actions row */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex gap-2\">\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              data-testid=\"button-dictate\"\n              aria-label=\"Dictate note\"\n              title=\"Voice input (coming soon)\"\n            >\n              <Mic className=\"h-4 w-4\" />\n            </Button>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              data-testid=\"button-camera\"\n              aria-label=\"Camera OCR\"\n              title=\"Camera OCR (coming soon)\"\n            >\n              <Camera className=\"h-4 w-4\" />\n            </Button>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              data-testid=\"button-clipboard\"\n              aria-label=\"Paste from clipboard\"\n              title=\"Paste from clipboard\"\n            >\n              <Clipboard className=\"h-4 w-4\" />\n            </Button>\n          </div>\n\n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setContent('');\n                setTags([]);\n                setNewTag('');\n                setMakeRecall(false);\n                setAddTag(false);\n              }}\n              data-testid=\"button-cancel-note\"\n              disabled={createNoteMutation.isPending}\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleSubmit}\n              disabled={!content.trim() || !selectedBook || createNoteMutation.isPending}\n              data-testid=\"button-save-note\"\n              aria-busy={createNoteMutation.isPending}\n            >\n              {createNoteMutation.isPending ? 'Saving...' : 'Save'}\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":13697},"client/src/components/progress-input.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Plus, Minus } from 'lucide-react';\nimport type { Book } from '@shared/schema';\n\ninterface ProgressInputProps {\n  book: Book;\n  onPageUpdate: (newPage: number) => void;\n  onCancel: () => void;\n  onConfirm: (endPage: number) => void;\n  isLoading?: boolean;\n}\n\nexport function ProgressInput({ book, onPageUpdate, onCancel, onConfirm, isLoading }: ProgressInputProps) {\n  const [currentPage, setCurrentPage] = useState(book.currentPage || 0);\n\n  const handlePageChip = (increment: number) => {\n    const newPage = Math.max(0, currentPage + increment);\n    const maxPage = book.totalPages || 999999;\n    const finalPage = Math.min(newPage, maxPage);\n    setCurrentPage(finalPage);\n  };\n\n  const handleInputChange = (value: string) => {\n    const newPage = parseInt(value) || 0;\n    const maxPage = book.totalPages || 999999;\n    const finalPage = Math.max(0, Math.min(newPage, maxPage));\n    setCurrentPage(finalPage);\n  };\n\n  const handleConfirm = () => {\n    onConfirm(currentPage);\n  };\n\n  return (\n    <Card className=\"border-dashed\" data-testid=\"card-progress-input\">\n      <CardContent className=\"p-4 space-y-4\">\n        <div className=\"text-center\">\n          <h4 className=\"font-medium mb-1\">Update Your Progress</h4>\n          <p className=\"text-sm text-muted-foreground\">\n            What page did you finish on?\n          </p>\n        </div>\n\n        {/* Quick Page Chips */}\n        <div className=\"flex justify-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => handlePageChip(-5)}\n            disabled={currentPage <= 0}\n            data-testid=\"button-minus-5\"\n          >\n            <Minus className=\"h-3 w-3 mr-1\" />\n            5\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => handlePageChip(5)}\n            data-testid=\"button-plus-5\"\n          >\n            <Plus className=\"h-3 w-3 mr-1\" />\n            5\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => handlePageChip(10)}\n            data-testid=\"button-plus-10\"\n          >\n            <Plus className=\"h-3 w-3 mr-1\" />\n            10\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => handlePageChip(25)}\n            data-testid=\"button-plus-25\"\n          >\n            <Plus className=\"h-3 w-3 mr-1\" />\n            25\n          </Button>\n        </div>\n\n        {/* Current Page Input */}\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-center space-x-3\">\n            <span className=\"text-sm text-muted-foreground\">Page:</span>\n            <Input\n              type=\"number\"\n              value={currentPage}\n              onChange={(e) => handleInputChange(e.target.value)}\n              className=\"w-20 text-center\"\n              min={0}\n              max={book.totalPages || undefined}\n              data-testid=\"input-current-page\"\n            />\n            {book.totalPages && (\n              <span className=\"text-sm text-muted-foreground\">\n                of {book.totalPages}\n              </span>\n            )}\n          </div>\n          {book.totalPages && (\n            <div className=\"text-xs text-center text-muted-foreground\">\n              {Math.round((currentPage / book.totalPages) * 100)}% complete\n            </div>\n          )}\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"flex space-x-2\">\n          <Button\n            variant=\"outline\"\n            onClick={onCancel}\n            disabled={isLoading}\n            className=\"flex-1\"\n            data-testid=\"button-cancel-progress\"\n          >\n            Cancel\n          </Button>\n          <Button\n            onClick={handleConfirm}\n            disabled={isLoading}\n            className=\"flex-1\"\n            data-testid=\"button-confirm-progress\"\n          >\n            {isLoading ? 'Stopping...' : 'Stop Session'}\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":4272},"client/src/hooks/useSessionState.ts":{"content":"import { useState, useEffect, useCallback } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport type { \n  ReadingSession, \n  Book, \n  StartSessionRequest, \n  PauseSessionRequest, \n  StopSessionRequest, \n  QuickAddPagesRequest \n} from '@shared/schema';\n\nexport interface SessionActions {\n  startSession: (request: StartSessionRequest) => Promise<ReadingSession>;\n  pauseSession: (sessionId: string, reason?: string) => Promise<ReadingSession>;\n  resumeSession: (sessionId: string) => Promise<ReadingSession>;\n  stopSession: (request: StopSessionRequest) => Promise<ReadingSession>;\n  quickAddPages: (request: QuickAddPagesRequest) => Promise<ReadingSession>;\n}\n\nexport interface UseSessionStateReturn {\n  activeSession: ReadingSession | null;\n  isLoading: boolean;\n  error: string | null;\n  actions: SessionActions;\n  refreshActiveSession: () => void;\n}\n\n/**\n * Hook for managing reading session state and operations\n */\nexport function useSessionState(bookId: string): UseSessionStateReturn {\n  const queryClient = useQueryClient();\n  const [error, setError] = useState<string | null>(null);\n\n  // Query for active session\n  const { \n    data: activeSession, \n    isLoading, \n    refetch: refreshActiveSession \n  } = useQuery({\n    queryKey: ['activeSession', bookId],\n    queryFn: async () => {\n      const response = await fetch(`/api/books/${bookId}/active-session`);\n      if (!response.ok) {\n        if (response.status === 404) return null;\n        throw new Error('Failed to fetch active session');\n      }\n      const data = await response.json();\n      return data ? {\n        ...data,\n        startedAt: new Date(data.startedAt),\n        sessionDate: new Date(data.sessionDate),\n        pausedAt: data.pausedAt ? new Date(data.pausedAt) : null,\n        resumedAt: data.resumedAt ? new Date(data.resumedAt) : null,\n        endedAt: data.endedAt ? new Date(data.endedAt) : null,\n      } as ReadingSession : null;\n    },\n    enabled: !!bookId,\n  });\n\n  // Start session mutation\n  const startSessionMutation = useMutation({\n    mutationFn: async (request: StartSessionRequest) => {\n      const response = await fetch('/api/sessions/start', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(request),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to start session');\n      }\n      \n      const data = await response.json();\n      return {\n        ...data,\n        startedAt: new Date(data.startedAt),\n        sessionDate: new Date(data.sessionDate),\n        pausedAt: data.pausedAt ? new Date(data.pausedAt) : null,\n        resumedAt: data.resumedAt ? new Date(data.resumedAt) : null,\n        endedAt: data.endedAt ? new Date(data.endedAt) : null,\n      } as ReadingSession;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['activeSession', bookId] });\n      queryClient.invalidateQueries({ queryKey: ['books', bookId] });\n      queryClient.invalidateQueries({ queryKey: ['sessions', bookId] });\n      setError(null);\n    },\n    onError: (error: any) => {\n      setError(error.message || 'Failed to start session');\n    },\n  });\n\n  // Pause session mutation\n  const pauseSessionMutation = useMutation({\n    mutationFn: async ({ sessionId, reason }: { sessionId: string; reason?: string }) => {\n      const response = await fetch(`/api/sessions/${sessionId}/pause`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ reason }),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to pause session');\n      }\n      \n      const data = await response.json();\n      return {\n        ...data,\n        startedAt: new Date(data.startedAt),\n        sessionDate: new Date(data.sessionDate),\n        pausedAt: data.pausedAt ? new Date(data.pausedAt) : null,\n        resumedAt: data.resumedAt ? new Date(data.resumedAt) : null,\n        endedAt: data.endedAt ? new Date(data.endedAt) : null,\n      } as ReadingSession;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['activeSession', bookId] });\n      queryClient.invalidateQueries({ queryKey: ['sessions', bookId] });\n      setError(null);\n    },\n    onError: (error: any) => {\n      setError(error.message || 'Failed to pause session');\n    },\n  });\n\n  // Resume session mutation\n  const resumeSessionMutation = useMutation({\n    mutationFn: async (sessionId: string) => {\n      const response = await fetch(`/api/sessions/${sessionId}/resume`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to resume session');\n      }\n      \n      const data = await response.json();\n      return {\n        ...data,\n        startedAt: new Date(data.startedAt),\n        sessionDate: new Date(data.sessionDate),\n        pausedAt: data.pausedAt ? new Date(data.pausedAt) : null,\n        resumedAt: data.resumedAt ? new Date(data.resumedAt) : null,\n        endedAt: data.endedAt ? new Date(data.endedAt) : null,\n      } as ReadingSession;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['activeSession', bookId] });\n      queryClient.invalidateQueries({ queryKey: ['sessions', bookId] });\n      setError(null);\n    },\n    onError: (error: any) => {\n      setError(error.message || 'Failed to resume session');\n    },\n  });\n\n  // Stop session mutation\n  const stopSessionMutation = useMutation({\n    mutationFn: async (request: StopSessionRequest) => {\n      const response = await fetch(`/api/sessions/${request.sessionId}/stop`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(request),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to stop session');\n      }\n      \n      const data = await response.json();\n      return {\n        ...data,\n        startedAt: new Date(data.startedAt),\n        sessionDate: new Date(data.sessionDate),\n        pausedAt: data.pausedAt ? new Date(data.pausedAt) : null,\n        resumedAt: data.resumedAt ? new Date(data.resumedAt) : null,\n        endedAt: data.endedAt ? new Date(data.endedAt) : null,\n      } as ReadingSession;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['activeSession', bookId] });\n      queryClient.invalidateQueries({ queryKey: ['books', bookId] });\n      queryClient.invalidateQueries({ queryKey: ['sessions', bookId] });\n      setError(null);\n    },\n    onError: (error: any) => {\n      setError(error.message || 'Failed to stop session');\n    },\n  });\n\n  // Quick add pages mutation\n  const quickAddMutation = useMutation({\n    mutationFn: async (request: QuickAddPagesRequest) => {\n      const response = await fetch('/api/sessions/quick-add', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(request),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to add pages');\n      }\n      \n      const data = await response.json();\n      return {\n        ...data,\n        startedAt: new Date(data.startedAt),\n        sessionDate: new Date(data.sessionDate),\n        pausedAt: data.pausedAt ? new Date(data.pausedAt) : null,\n        resumedAt: data.resumedAt ? new Date(data.resumedAt) : null,\n        endedAt: data.endedAt ? new Date(data.endedAt) : null,\n      } as ReadingSession;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['activeSession', bookId] });\n      queryClient.invalidateQueries({ queryKey: ['books', bookId] });\n      queryClient.invalidateQueries({ queryKey: ['sessions', bookId] });\n      setError(null);\n    },\n    onError: (error: any) => {\n      setError(error.message || 'Failed to add pages');\n    },\n  });\n\n  const actions: SessionActions = {\n    startSession: startSessionMutation.mutateAsync,\n    pauseSession: (sessionId: string, reason?: string) => \n      pauseSessionMutation.mutateAsync({ sessionId, reason }),\n    resumeSession: resumeSessionMutation.mutateAsync,\n    stopSession: stopSessionMutation.mutateAsync,\n    quickAddPages: quickAddMutation.mutateAsync,\n  };\n\n  const isLoadingAny = \n    isLoading ||\n    startSessionMutation.isPending ||\n    pauseSessionMutation.isPending ||\n    resumeSessionMutation.isPending ||\n    stopSessionMutation.isPending ||\n    quickAddMutation.isPending;\n\n  return {\n    activeSession: activeSession || null,\n    isLoading: isLoadingAny,\n    error,\n    actions,\n    refreshActiveSession,\n  };\n}","size_bytes":8969},"client/src/hooks/useSessionTimer.ts":{"content":"import { useState, useEffect, useRef, useCallback } from 'react';\nimport type { ReadingSession } from '@shared/schema';\n\nexport interface TimerState {\n  elapsed: number; // seconds elapsed in current session\n  isRunning: boolean;\n  isPaused: boolean;\n  startTime: Date | null;\n  pausedAt: Date | null;\n}\n\nexport interface UseSessionTimerReturn {\n  timer: TimerState;\n  startTimer: () => void;\n  pauseTimer: () => void;\n  resumeTimer: () => void;\n  stopTimer: () => void;\n  resetTimer: () => void;\n  getFormattedTime: () => string;\n  getTotalMinutes: () => number;\n}\n\n/**\n * Hook for managing reading session timers with pause/resume functionality\n */\nexport function useSessionTimer(\n  initialSession?: ReadingSession | null\n): UseSessionTimerReturn {\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  \n  const [timer, setTimer] = useState<TimerState>(() => {\n    if (initialSession?.state === 'active') {\n      const startTime = initialSession.startedAt;\n      const pausedAt = initialSession.pausedAt;\n      const resumedAt = initialSession.resumedAt;\n      \n      let elapsed = 0;\n      const now = new Date();\n      \n      if (pausedAt && !resumedAt) {\n        // Currently paused\n        elapsed = Math.floor((pausedAt.getTime() - startTime.getTime()) / 1000);\n      } else if (resumedAt) {\n        // Was paused but resumed\n        const pauseDuration = resumedAt.getTime() - (pausedAt?.getTime() || 0);\n        elapsed = Math.floor((now.getTime() - startTime.getTime() - pauseDuration) / 1000);\n      } else {\n        // Running continuously\n        elapsed = Math.floor((now.getTime() - startTime.getTime()) / 1000);\n      }\n      \n      return {\n        elapsed: Math.max(0, elapsed),\n        isRunning: true,\n        isPaused: false,\n        startTime,\n        pausedAt: null,\n      };\n    }\n    \n    if (initialSession?.state === 'paused') {\n      const startTime = initialSession.startedAt;\n      const pausedAt = initialSession.pausedAt;\n      \n      let elapsed = 0;\n      if (pausedAt) {\n        elapsed = Math.floor((pausedAt.getTime() - startTime.getTime()) / 1000);\n      }\n      \n      return {\n        elapsed: Math.max(0, elapsed),\n        isRunning: false,\n        isPaused: true,\n        startTime,\n        pausedAt,\n      };\n    }\n    \n    return {\n      elapsed: 0,\n      isRunning: false,\n      isPaused: false,\n      startTime: null,\n      pausedAt: null,\n    };\n  });\n\n  // Update timer every second when running\n  useEffect(() => {\n    if (timer.isRunning && !timer.isPaused) {\n      intervalRef.current = setInterval(() => {\n        setTimer(prev => ({\n          ...prev,\n          elapsed: prev.elapsed + 1,\n        }));\n      }, 1000);\n    } else {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n        intervalRef.current = null;\n      }\n    }\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n        intervalRef.current = null;\n      }\n    };\n  }, [timer.isRunning, timer.isPaused]);\n\n  const startTimer = useCallback(() => {\n    const now = new Date();\n    setTimer({\n      elapsed: 0,\n      isRunning: true,\n      isPaused: false,\n      startTime: now,\n      pausedAt: null,\n    });\n  }, []);\n\n  const pauseTimer = useCallback(() => {\n    setTimer(prev => ({\n      ...prev,\n      isRunning: false,\n      isPaused: true,\n      pausedAt: new Date(),\n    }));\n  }, []);\n\n  const resumeTimer = useCallback(() => {\n    setTimer(prev => ({\n      ...prev,\n      isRunning: true,\n      isPaused: false,\n      pausedAt: null,\n    }));\n  }, []);\n\n  const stopTimer = useCallback(() => {\n    setTimer(prev => ({\n      ...prev,\n      isRunning: false,\n      isPaused: false,\n    }));\n  }, []);\n\n  const resetTimer = useCallback(() => {\n    setTimer({\n      elapsed: 0,\n      isRunning: false,\n      isPaused: false,\n      startTime: null,\n      pausedAt: null,\n    });\n  }, []);\n\n  const getFormattedTime = useCallback(() => {\n    const hours = Math.floor(timer.elapsed / 3600);\n    const minutes = Math.floor((timer.elapsed % 3600) / 60);\n    const seconds = timer.elapsed % 60;\n\n    if (hours > 0) {\n      return `${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n    }\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n  }, [timer.elapsed]);\n\n  const getTotalMinutes = useCallback(() => {\n    return Math.floor(timer.elapsed / 60);\n  }, [timer.elapsed]);\n\n  return {\n    timer,\n    startTimer,\n    pauseTimer,\n    resumeTimer,\n    stopTimer,\n    resetTimer,\n    getFormattedTime,\n    getTotalMinutes,\n  };\n}","size_bytes":4577},"client/src/lib/progressUtils.ts":{"content":"import type { Book, ReadingSession, BookReadingState } from '@shared/schema';\nimport { formatDistanceToNow, addDays, differenceInMinutes } from 'date-fns';\n\nexport interface ProgressForecast {\n  averagePagesPerHour: number;\n  estimatedTimeToFinish: string | null;\n  estimatedFinishDate: Date | null;\n  dailyPageTarget: number;\n  readingPace: 'fast' | 'medium' | 'slow';\n  daysToFinish: number | null;\n}\n\nexport interface ReadingStats {\n  totalMinutesRead: number;\n  totalPagesRead: number;\n  averageSessionLength: number;\n  longestSession: number;\n  streakDays: number;\n  booksFinishedThisMonth: number;\n}\n\n/**\n * Calculate reading progress forecast based on recent sessions\n */\nexport function calculateProgressForecast(\n  book: Book,\n  sessions: ReadingSession[],\n  readingState?: BookReadingState\n): ProgressForecast {\n  // Filter to completed sessions with valid data\n  const validSessions = sessions\n    .filter(session => \n      session.state === 'completed' && \n      session.duration && \n      session.pagesRead && \n      session.duration > 0 &&\n      session.pagesRead > 0\n    )\n    .slice(0, 10); // Use last 10 sessions for accuracy\n\n  let averagePagesPerHour = readingState?.averagePagesPerHour || 0;\n  \n  // Calculate average pages per hour if we have session data\n  if (validSessions.length > 0) {\n    const totalPages = validSessions.reduce((sum, s) => sum + (s.pagesRead || 0), 0);\n    const totalHours = validSessions.reduce((sum, s) => sum + ((s.duration || 0) / 60), 0);\n    averagePagesPerHour = totalHours > 0 ? totalPages / totalHours : 0;\n  }\n\n  // Calculate remaining pages and time\n  const currentPage = book.currentPage || 0;\n  const totalPages = book.totalPages || 0;\n  const remainingPages = Math.max(0, totalPages - currentPage);\n  \n  let estimatedTimeToFinish: string | null = null;\n  let estimatedFinishDate: Date | null = null;\n  let daysToFinish: number | null = null;\n  \n  if (averagePagesPerHour > 0 && totalPages > 0 && remainingPages > 0) {\n    const hoursNeeded = remainingPages / averagePagesPerHour;\n    const minutesNeeded = hoursNeeded * 60;\n    \n    // Format time to finish\n    if (hoursNeeded < 1) {\n      estimatedTimeToFinish = `${Math.round(minutesNeeded)} minutes`;\n    } else if (hoursNeeded < 24) {\n      const hours = Math.floor(hoursNeeded);\n      const minutes = Math.round((hoursNeeded - hours) * 60);\n      estimatedTimeToFinish = minutes > 0 ? `${hours}h ${minutes}m` : `${hours}h`;\n    } else {\n      const days = Math.round(hoursNeeded / 24);\n      estimatedTimeToFinish = `${days} day${days > 1 ? 's' : ''}`;\n    }\n    \n    // Calculate finish date (assuming 1 hour of reading per day)\n    const dailyReadingHours = 1;\n    daysToFinish = Math.ceil(hoursNeeded / dailyReadingHours);\n    estimatedFinishDate = addDays(new Date(), daysToFinish);\n  }\n\n  // Determine reading pace\n  let readingPace: 'fast' | 'medium' | 'slow' = 'medium';\n  if (averagePagesPerHour > 40) {\n    readingPace = 'fast';\n  } else if (averagePagesPerHour < 20) {\n    readingPace = 'slow';\n  }\n\n  // Calculate daily page target (to finish in reasonable time)\n  let dailyPageTarget = readingState?.dailyPageTarget || 10;\n  if (daysToFinish && daysToFinish > 30) {\n    // If it would take more than 30 days, suggest a higher daily target\n    dailyPageTarget = Math.ceil(remainingPages / 30);\n  }\n\n  return {\n    averagePagesPerHour: Math.round(averagePagesPerHour * 10) / 10,\n    estimatedTimeToFinish,\n    estimatedFinishDate,\n    dailyPageTarget,\n    readingPace,\n    daysToFinish,\n  };\n}\n\n/**\n * Calculate comprehensive reading statistics\n */\nexport function calculateReadingStats(sessions: ReadingSession[]): ReadingStats {\n  const completedSessions = sessions.filter(s => s.state === 'completed');\n  \n  const totalMinutesRead = completedSessions.reduce((sum, s) => sum + (s.duration || 0), 0);\n  const totalPagesRead = completedSessions.reduce((sum, s) => sum + (s.pagesRead || 0), 0);\n  \n  const averageSessionLength = completedSessions.length > 0 \n    ? Math.round(totalMinutesRead / completedSessions.length) \n    : 0;\n  \n  const longestSession = Math.max(0, ...completedSessions.map(s => s.duration || 0));\n  \n  // Calculate reading streak (simplified)\n  const streakDays = calculateReadingStreak(completedSessions);\n  \n  // Count books finished this month (simplified - would need book completion data)\n  const booksFinishedThisMonth = 0; // Would need additional data\n  \n  return {\n    totalMinutesRead,\n    totalPagesRead,\n    averageSessionLength,\n    longestSession,\n    streakDays,\n    booksFinishedThisMonth,\n  };\n}\n\n/**\n * Calculate current reading streak in days\n */\nfunction calculateReadingStreak(sessions: ReadingSession[]): number {\n  if (sessions.length === 0) return 0;\n  \n  // Sort sessions by date (newest first)\n  const sortedSessions = sessions\n    .sort((a, b) => b.sessionDate.getTime() - a.sessionDate.getTime());\n  \n  let streak = 0;\n  let currentDate = new Date();\n  currentDate.setHours(0, 0, 0, 0);\n  \n  // Check if there's a session today or yesterday\n  for (const session of sortedSessions) {\n    const sessionDate = new Date(session.sessionDate);\n    sessionDate.setHours(0, 0, 0, 0);\n    \n    const diffDays = Math.floor((currentDate.getTime() - sessionDate.getTime()) / (1000 * 60 * 60 * 24));\n    \n    if (diffDays === streak) {\n      streak++;\n      currentDate = new Date(sessionDate);\n    } else if (diffDays > streak) {\n      break;\n    }\n  }\n  \n  return streak;\n}\n\n/**\n * Format reading time duration\n */\nexport function formatReadingTime(minutes: number): string {\n  if (minutes < 60) {\n    return `${minutes}m`;\n  }\n  \n  const hours = Math.floor(minutes / 60);\n  const remainingMinutes = minutes % 60;\n  \n  if (remainingMinutes === 0) {\n    return `${hours}h`;\n  }\n  \n  return `${hours}h ${remainingMinutes}m`;\n}\n\n/**\n * Format pages per hour reading pace\n */\nexport function formatReadingPace(pagesPerHour: number): string {\n  if (pagesPerHour === 0) return 'No data yet';\n  \n  if (pagesPerHour < 15) return `${pagesPerHour.toFixed(1)} pages/hr (Slow)`;\n  if (pagesPerHour < 30) return `${pagesPerHour.toFixed(1)} pages/hr (Average)`;\n  if (pagesPerHour < 50) return `${pagesPerHour.toFixed(1)} pages/hr (Fast)`;\n  return `${pagesPerHour.toFixed(1)} pages/hr (Very Fast)`;\n}\n\n/**\n * Get progress percentage with safe calculation\n */\nexport function getProgressPercentage(book: Book): number {\n  if (book.totalPages && book.totalPages > 0 && book.currentPage) {\n    return Math.round((book.currentPage / book.totalPages) * 100);\n  }\n  \n  if (book.progress) {\n    return Math.round(book.progress * 100);\n  }\n  \n  return 0;\n}\n\n/**\n * Calculate session efficiency (pages per minute)\n */\nexport function calculateSessionEfficiency(session: ReadingSession): number {\n  if (!session.duration || !session.pagesRead || session.duration === 0) {\n    return 0;\n  }\n  \n  return session.pagesRead / session.duration;\n}\n\n/**\n * Determine if a book needs attention (hasn't been read recently)\n */\nexport function needsAttention(book: Book, sessions: ReadingSession[]): boolean {\n  if (book.status !== 'reading') return false;\n  \n  const lastSession = sessions\n    .filter(s => s.bookId === book.id)\n    .sort((a, b) => b.sessionDate.getTime() - a.sessionDate.getTime())[0];\n  \n  if (!lastSession) return true;\n  \n  const daysSinceLastRead = differenceInMinutes(new Date(), lastSession.sessionDate) / (60 * 24);\n  return daysSinceLastRead > 3; // Hasn't been read in 3+ days\n}","size_bytes":7438},"client/src/lib/sessionUtils.ts":{"content":"import type { ReadingSession } from '@shared/schema';\nimport { format, isToday, isYesterday, differenceInMinutes } from 'date-fns';\n\nexport interface SessionGroup {\n  date: string;\n  sessions: ReadingSession[];\n  totalMinutes: number;\n  totalPages: number;\n}\n\n/**\n * Group sessions by date for display\n */\nexport function groupSessionsByDate(sessions: ReadingSession[]): SessionGroup[] {\n  const groups = new Map<string, ReadingSession[]>();\n  \n  sessions.forEach(session => {\n    const dateKey = format(session.sessionDate, 'yyyy-MM-dd');\n    if (!groups.has(dateKey)) {\n      groups.set(dateKey, []);\n    }\n    groups.get(dateKey)!.push(session);\n  });\n  \n  return Array.from(groups.entries())\n    .map(([date, sessions]) => ({\n      date,\n      sessions: sessions.sort((a, b) => b.sessionDate.getTime() - a.sessionDate.getTime()),\n      totalMinutes: sessions.reduce((sum, s) => sum + (s.duration || 0), 0),\n      totalPages: sessions.reduce((sum, s) => sum + (s.pagesRead || 0), 0),\n    }))\n    .sort((a, b) => b.date.localeCompare(a.date));\n}\n\n/**\n * Format session date for display\n */\nexport function formatSessionDate(date: Date): string {\n  if (isToday(date)) {\n    return 'Today';\n  }\n  \n  if (isYesterday(date)) {\n    return 'Yesterday';\n  }\n  \n  return format(date, 'MMM d, yyyy');\n}\n\n/**\n * Format session time for display\n */\nexport function formatSessionTime(date: Date): string {\n  return format(date, 'h:mm a');\n}\n\n/**\n * Get session duration in a readable format\n */\nexport function getSessionDuration(session: ReadingSession): string {\n  if (!session.duration) {\n    if (session.sessionType === 'quick') {\n      return 'Quick add';\n    }\n    return 'Unknown';\n  }\n  \n  const minutes = session.duration;\n  if (minutes < 60) {\n    return `${minutes}m`;\n  }\n  \n  const hours = Math.floor(minutes / 60);\n  const remainingMinutes = minutes % 60;\n  \n  if (remainingMinutes === 0) {\n    return `${hours}h`;\n  }\n  \n  return `${hours}h ${remainingMinutes}m`;\n}\n\n/**\n * Get session type display text\n */\nexport function getSessionTypeText(session: ReadingSession): string {\n  switch (session.sessionType) {\n    case 'timed':\n      return 'Timed session';\n    case 'quick':\n      return 'Quick add';\n    default:\n      return 'Reading session';\n  }\n}\n\n/**\n * Get session state display text and color\n */\nexport function getSessionStateInfo(session: ReadingSession): { \n  text: string; \n  color: 'green' | 'blue' | 'gray' | 'orange';\n} {\n  switch (session.state) {\n    case 'active':\n      return { text: 'Active', color: 'green' };\n    case 'paused':\n      return { text: 'Paused', color: 'orange' };\n    case 'completed':\n      return { text: 'Completed', color: 'blue' };\n    default:\n      return { text: 'Unknown', color: 'gray' };\n  }\n}\n\n/**\n * Calculate pages read per minute for a session\n */\nexport function getSessionPace(session: ReadingSession): number {\n  if (!session.duration || !session.pagesRead || session.duration === 0) {\n    return 0;\n  }\n  \n  return session.pagesRead / session.duration;\n}\n\n/**\n * Determine if a session is currently active\n */\nexport function isActiveSession(session: ReadingSession): boolean {\n  return session.state === 'active' || session.state === 'paused';\n}\n\n/**\n * Calculate total time from session start accounting for pauses\n */\nexport function calculateActiveTime(session: ReadingSession): number {\n  const start = session.startedAt.getTime();\n  const now = new Date().getTime();\n  \n  if (session.state === 'completed' && session.endedAt) {\n    return differenceInMinutes(session.endedAt, session.startedAt);\n  }\n  \n  if (session.state === 'paused' && session.pausedAt) {\n    const totalTime = differenceInMinutes(session.pausedAt, session.startedAt);\n    return totalTime;\n  }\n  \n  if (session.state === 'active') {\n    let totalTime = differenceInMinutes(new Date(), session.startedAt);\n    \n    // Subtract pause duration if session was paused and resumed\n    if (session.pausedAt && session.resumedAt) {\n      const pauseDuration = differenceInMinutes(session.resumedAt, session.pausedAt);\n      totalTime -= pauseDuration;\n    }\n    \n    return totalTime;\n  }\n  \n  return 0;\n}\n\n/**\n * Validate session data before submission\n */\nexport function validateSessionData(\n  startPage?: number,\n  endPage?: number,\n  totalPages?: number\n): { isValid: boolean; error?: string } {\n  if (startPage !== undefined && endPage !== undefined) {\n    if (endPage < startPage) {\n      return { isValid: false, error: 'End page cannot be less than start page' };\n    }\n    \n    if (startPage < 0) {\n      return { isValid: false, error: 'Start page cannot be negative' };\n    }\n  }\n  \n  if (totalPages && endPage && endPage > totalPages) {\n    return { isValid: false, error: 'End page cannot exceed total pages' };\n  }\n  \n  return { isValid: true };\n}\n\n/**\n * Generate session summary text\n */\nexport function getSessionSummary(session: ReadingSession): string {\n  const parts: string[] = [];\n  \n  if (session.pagesRead && session.pagesRead > 0) {\n    parts.push(`${session.pagesRead} page${session.pagesRead === 1 ? '' : 's'}`);\n  }\n  \n  if (session.duration && session.duration > 0) {\n    parts.push(`in ${getSessionDuration(session)}`);\n  }\n  \n  if (parts.length === 0) {\n    return getSessionTypeText(session);\n  }\n  \n  return parts.join(' ');\n}\n\n/**\n * Check if session needs sync (for offline support)\n */\nexport function needsSync(session: ReadingSession): boolean {\n  return session.syncStatus === 'pending' || session.syncStatus === 'failed';\n}\n\n/**\n * Get sync status display info\n */\nexport function getSyncStatusInfo(session: ReadingSession): {\n  text: string;\n  color: 'green' | 'yellow' | 'red' | 'gray';\n  needsAttention: boolean;\n} {\n  switch (session.syncStatus) {\n    case 'synced':\n      return { text: 'Synced', color: 'green', needsAttention: false };\n    case 'pending':\n      return { text: 'Syncing...', color: 'yellow', needsAttention: false };\n    case 'syncing':\n      return { text: 'Syncing...', color: 'yellow', needsAttention: false };\n    case 'failed':\n      return { text: 'Sync failed', color: 'red', needsAttention: true };\n    default:\n      return { text: 'Unknown', color: 'gray', needsAttention: false };\n  }\n}","size_bytes":6194},"replit.md":{"content":"# Book Reading Tracker Application\n\n## Overview\n\nThis is a comprehensive book reading tracker and library management application built with React and TypeScript. The application allows users to manage their personal book collection, track reading progress, take notes, and analyze reading statistics. It features a modern, scholarly design inspired by Notion and Goodreads, with support for both light and dark themes.\n\nThe application provides functionality for adding books (both manually and via bulk upload), tracking reading sessions, managing notes with tagging, and viewing detailed reading analytics. Users can organize books by genre, track usefulness ratings, and monitor their reading habits through comprehensive statistics.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for fast development and building\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **UI Framework**: Radix UI primitives with shadcn/ui components for accessible, customizable interfaces\n- **Styling**: Tailwind CSS with custom design tokens and CSS variables for theming\n- **Form Handling**: React Hook Form with Zod for validation and type safety\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js server\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **Database**: PostgreSQL (configured for Neon Database hosting)\n- **API Design**: RESTful API endpoints following standard HTTP conventions\n- **Data Storage**: In-memory storage implementation with interface for easy database migration\n\n### Data Models\n- **Books**: Core entity with title, author, genre, progress tracking, notes, topics, and usefulness ratings\n- **Reading Sessions**: Track individual reading sessions with page ranges, dates, and notes\n- **Schema Validation**: Zod schemas for runtime type checking and API validation\n\n### Component Architecture\n- **Layout System**: Sidebar navigation with responsive mobile support\n- **Design System**: Consistent spacing, typography, and color schemes with dark/light theme support\n- **Reusable Components**: Modular UI components for books, progress tracking, forms, and data display\n- **Form Components**: Specialized components for book search, bulk upload, and data entry\n\n### Key Features\n- **Book Management**: Add books manually or via external API search, organize by genres and topics\n- **Progress Tracking**: Track reading sessions, current page, and completion status\n- **Note-Taking**: Add and manage notes with tagging system for easy organization\n- **Statistics Dashboard**: View reading analytics, goals, and achievement tracking\n- **Bulk Operations**: CSV import/export for managing large book collections\n- **Responsive Design**: Mobile-first approach with collapsible sidebar and touch-friendly interfaces\n\n## External Dependencies\n\n### Core Dependencies\n- **@tanstack/react-query**: Server state management and caching\n- **drizzle-orm** and **@neondatabase/serverless**: Database ORM and PostgreSQL driver\n- **zod**: Schema validation and type inference\n- **react-hook-form** and **@hookform/resolvers**: Form management and validation\n\n### UI and Styling\n- **@radix-ui/***: Comprehensive set of accessible UI primitives\n- **tailwindcss**: Utility-first CSS framework\n- **class-variance-authority**: Component variant management\n- **clsx** and **tailwind-merge**: Conditional CSS class utilities\n- **lucide-react**: Icon library\n\n### Development Tools\n- **vite**: Fast build tool and development server\n- **typescript**: Static type checking\n- **tsx**: TypeScript execution for Node.js\n- **esbuild**: Fast JavaScript bundler for production builds\n\n### External APIs\n- **Open Library API**: Book search and metadata retrieval for adding books to the library\n- **Google Fonts**: Web fonts (Inter, Crimson Text) for typography\n\n### Database and Hosting\n- **Neon Database**: Serverless PostgreSQL hosting platform\n- **Replit**: Development and hosting environment with integrated tooling","size_bytes":4168},"client/src/components/export-dialog.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Download, FileText, CheckCircle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Book } from \"@shared/schema\";\n\ninterface ExportDialogProps {\n  children: React.ReactNode;\n}\n\ninterface ExportOptions {\n  includeNotes: boolean;\n  includeTags: boolean;\n  includeProgress: boolean;\n  includeReadingSessions: boolean;\n  format: 'csv' | 'json';\n  statusFilter: string[];\n}\n\nexport function ExportDialog({ children }: ExportDialogProps) {\n  const [open, setOpen] = useState(false);\n  const [exporting, setExporting] = useState(false);\n  const { toast } = useToast();\n  \n  const [options, setOptions] = useState<ExportOptions>({\n    includeNotes: true,\n    includeTags: true,\n    includeProgress: true,\n    includeReadingSessions: false,\n    format: 'csv',\n    statusFilter: ['toRead', 'reading', 'onHold', 'finished', 'dnf'],\n  });\n\n  const { data: books = [] } = useQuery<Book[]>({\n    queryKey: ['/api/books'],\n    queryFn: async () => {\n      const response = await fetch('/api/books');\n      if (!response.ok) throw new Error('Failed to fetch books');\n      return response.json();\n    },\n  });\n\n  const filteredBooks = books.filter(book => \n    options.statusFilter.includes(book.status)\n  );\n\n  const exportData = async () => {\n    setExporting(true);\n    try {\n      if (options.format === 'csv') {\n        await exportCSV();\n      } else {\n        await exportJSON();\n      }\n      \n      toast({\n        title: \"Export successful\",\n        description: `${filteredBooks.length} books exported successfully`,\n      });\n      setOpen(false);\n    } catch (error) {\n      toast({\n        title: \"Export failed\",\n        description: \"An error occurred while exporting your books\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setExporting(false);\n    }\n  };\n\n  const exportCSV = async () => {\n    const headers = [\n      'Title',\n      'Author',\n      'Genre',\n      'Status',\n      'Priority',\n      'Format',\n      'Total Pages',\n      'Current Page',\n      'Progress',\n      'Language',\n      'Added Date',\n      'Started Date',\n      'Completed Date',\n      'Last Read Date',\n      ...(options.includeTags ? ['Tags'] : []),\n      ...(options.includeNotes ? ['Notes'] : []),\n    ];\n\n    const rows = filteredBooks.map(book => {\n      const row = [\n        book.title || '',\n        book.author || '',\n        book.genre || '',\n        book.status || '',\n        book.priority?.toString() || '',\n        book.format || '',\n        book.totalPages?.toString() || '',\n        book.currentPage?.toString() || '',\n        `${Math.round((book.progress || 0) * 100)}%`,\n        book.language || '',\n        book.addedAt ? new Date(book.addedAt).toISOString().split('T')[0] : '',\n        book.startedAt ? new Date(book.startedAt).toISOString().split('T')[0] : '',\n        book.completedAt ? new Date(book.completedAt).toISOString().split('T')[0] : '',\n        book.lastReadAt ? new Date(book.lastReadAt).toISOString().split('T')[0] : '',\n        ...(options.includeTags ? [(book.tags || []).join('; ')] : []),\n        ...(options.includeNotes ? [(book.notes || []).join('; ')] : []),\n      ];\n      \n      // Escape quotes and wrap in quotes if contains comma\n      return row.map(cell => {\n        const str = String(cell);\n        if (str.includes(',') || str.includes('\"') || str.includes('\\n')) {\n          return `\"${str.replace(/\"/g, '\"\"')}\"`;\n        }\n        return str;\n      });\n    });\n\n    const csvContent = [headers, ...rows].map(row => row.join(',')).join('\\n');\n    downloadFile(csvContent, 'my-library.csv', 'text/csv');\n  };\n\n  const exportJSON = async () => {\n    const exportBooks = filteredBooks.map(book => ({\n      title: book.title,\n      author: book.author,\n      genre: book.genre,\n      status: book.status,\n      priority: book.priority,\n      format: book.format,\n      totalPages: book.totalPages,\n      currentPage: book.currentPage,\n      progress: book.progress,\n      language: book.language,\n      addedAt: book.addedAt,\n      startedAt: book.startedAt,\n      completedAt: book.completedAt,\n      lastReadAt: book.lastReadAt,\n      ...(options.includeTags && { tags: book.tags }),\n      ...(options.includeNotes && { notes: book.notes }),\n    }));\n\n    const jsonContent = JSON.stringify({\n      exportDate: new Date().toISOString(),\n      totalBooks: exportBooks.length,\n      books: exportBooks,\n    }, null, 2);\n\n    downloadFile(jsonContent, 'my-library.json', 'application/json');\n  };\n\n  const downloadFile = (content: string, filename: string, mimeType: string) => {\n    const blob = new Blob([content], { type: mimeType });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = filename;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  };\n\n  const toggleStatusFilter = (status: string) => {\n    setOptions(prev => ({\n      ...prev,\n      statusFilter: prev.statusFilter.includes(status)\n        ? prev.statusFilter.filter(s => s !== status)\n        : [...prev.statusFilter, status]\n    }));\n  };\n\n  const statusOptions = [\n    { value: 'toRead', label: 'To Read', count: books.filter(b => b.status === 'toRead').length },\n    { value: 'reading', label: 'Currently Reading', count: books.filter(b => b.status === 'reading').length },\n    { value: 'onHold', label: 'On Hold', count: books.filter(b => b.status === 'onHold').length },\n    { value: 'finished', label: 'Finished', count: books.filter(b => b.status === 'finished').length },\n    { value: 'dnf', label: 'Did Not Finish', count: books.filter(b => b.status === 'dnf').length },\n  ];\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        {children}\n      </DialogTrigger>\n      <DialogContent className=\"max-w-2xl\" data-testid=\"dialog-export\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Download className=\"h-5 w-5\" />\n            Export Library\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-6\">\n          {/* Export Summary */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-base flex items-center gap-2\">\n                <FileText className=\"h-4 w-4\" />\n                Export Summary\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                <div>\n                  <span className=\"text-muted-foreground\">Total books:</span>\n                  <span className=\"ml-2 font-medium\">{books.length}</span>\n                </div>\n                <div>\n                  <span className=\"text-muted-foreground\">Selected:</span>\n                  <span className=\"ml-2 font-medium\">{filteredBooks.length}</span>\n                </div>\n                <div>\n                  <span className=\"text-muted-foreground\">Format:</span>\n                  <span className=\"ml-2 font-medium\">{options.format.toUpperCase()}</span>\n                </div>\n                <div>\n                  <span className=\"text-muted-foreground\">Size:</span>\n                  <span className=\"ml-2 font-medium\">\n                    {options.format === 'csv' ? '~' + Math.round(filteredBooks.length * 0.5) : '~' + Math.round(filteredBooks.length * 1.2)} KB\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Format Selection */}\n          <div>\n            <Label className=\"text-base font-medium\">Export Format</Label>\n            <div className=\"grid grid-cols-2 gap-2 mt-2\">\n              <Button\n                variant={options.format === 'csv' ? 'default' : 'outline'}\n                onClick={() => setOptions(prev => ({ ...prev, format: 'csv' }))}\n                data-testid=\"button-format-csv\"\n              >\n                CSV (Spreadsheet)\n              </Button>\n              <Button\n                variant={options.format === 'json' ? 'default' : 'outline'}\n                onClick={() => setOptions(prev => ({ ...prev, format: 'json' }))}\n                data-testid=\"button-format-json\"\n              >\n                JSON (Structured)\n              </Button>\n            </div>\n          </div>\n\n          {/* Status Filter */}\n          <div>\n            <Label className=\"text-base font-medium\">Book Status Filter</Label>\n            <div className=\"grid grid-cols-2 gap-2 mt-2\">\n              {statusOptions.map((status) => (\n                <div key={status.value} className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id={`status-${status.value}`}\n                    checked={options.statusFilter.includes(status.value)}\n                    onCheckedChange={() => toggleStatusFilter(status.value)}\n                    data-testid={`checkbox-status-${status.value}`}\n                  />\n                  <Label htmlFor={`status-${status.value}`} className=\"text-sm\">\n                    {status.label} ({status.count})\n                  </Label>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Data Options */}\n          <div>\n            <Label className=\"text-base font-medium\">Include Additional Data</Label>\n            <div className=\"space-y-2 mt-2\">\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"include-tags\"\n                  checked={options.includeTags}\n                  onCheckedChange={(checked) => setOptions(prev => ({ ...prev, includeTags: !!checked }))}\n                  data-testid=\"checkbox-include-tags\"\n                />\n                <Label htmlFor=\"include-tags\" className=\"text-sm\">\n                  Tags and topics\n                </Label>\n              </div>\n              \n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"include-notes\"\n                  checked={options.includeNotes}\n                  onCheckedChange={(checked) => setOptions(prev => ({ ...prev, includeNotes: !!checked }))}\n                  data-testid=\"checkbox-include-notes\"\n                />\n                <Label htmlFor=\"include-notes\" className=\"text-sm\">\n                  Book notes and highlights\n                </Label>\n              </div>\n              \n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"include-progress\"\n                  checked={options.includeProgress}\n                  onCheckedChange={(checked) => setOptions(prev => ({ ...prev, includeProgress: !!checked }))}\n                  data-testid=\"checkbox-include-progress\"\n                />\n                <Label htmlFor=\"include-progress\" className=\"text-sm\">\n                  Reading progress and dates\n                </Label>\n              </div>\n            </div>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-end gap-2 pt-4\">\n            <Button variant=\"outline\" onClick={() => setOpen(false)} data-testid=\"button-cancel-export\">\n              Cancel\n            </Button>\n            <Button \n              onClick={exportData} \n              disabled={exporting || filteredBooks.length === 0}\n              data-testid=\"button-export-download\"\n            >\n              {exporting ? (\n                <>\n                  <div className=\"animate-spin mr-2 h-4 w-4 border-2 border-current border-t-transparent rounded-full\" />\n                  Exporting...\n                </>\n              ) : (\n                <>\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Export {filteredBooks.length} Books\n                </>\n              )}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":12354},"client/src/components/import-dialog.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Upload, FileText, AlertCircle, CheckCircle, X } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface ImportDialogProps {\n  children: React.ReactNode;\n}\n\ninterface ImportResult {\n  success: boolean;\n  imported: number;\n  errors: string[];\n  duplicates: number;\n  preview?: any[];\n}\n\ninterface ImportOptions {\n  skipDuplicates: boolean;\n  updateExisting: boolean;\n  preserveProgress: boolean;\n}\n\nexport function ImportDialog({ children }: ImportDialogProps) {\n  const [open, setOpen] = useState(false);\n  const [file, setFile] = useState<File | null>(null);\n  const [importing, setImporting] = useState(false);\n  const [preview, setPreview] = useState<any[] | null>(null);\n  const [importResult, setImportResult] = useState<ImportResult | null>(null);\n  const [options, setOptions] = useState<ImportOptions>({\n    skipDuplicates: true,\n    updateExisting: false,\n    preserveProgress: true,\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const parseCSV = (text: string): any[] => {\n    const lines = text.split('\\n').filter(line => line.trim());\n    if (lines.length < 2) return [];\n\n    const headers = lines[0].split(',').map(h => h.trim().replace(/\"/g, ''));\n    const books = [];\n\n    for (let i = 1; i < lines.length; i++) {\n      const values: string[] = [];\n      let current = '';\n      let inQuotes = false;\n      \n      for (let j = 0; j < lines[i].length; j++) {\n        const char = lines[i][j];\n        if (char === '\"') {\n          inQuotes = !inQuotes;\n        } else if (char === ',' && !inQuotes) {\n          values.push(current.trim());\n          current = '';\n        } else {\n          current += char;\n        }\n      }\n      values.push(current.trim());\n\n      const book: any = {};\n      headers.forEach((header, index) => {\n        const value = values[index] || '';\n        const cleanValue = value.replace(/^\"|\"$/g, '').replace(/\"\"/g, '\"');\n        \n        switch (header.toLowerCase()) {\n          case 'title':\n            book.title = cleanValue;\n            break;\n          case 'author':\n            book.author = cleanValue;\n            break;\n          case 'genre':\n            book.genre = cleanValue || 'General Non-Fiction';\n            break;\n          case 'status':\n            book.status = cleanValue || 'toRead';\n            break;\n          case 'priority':\n            book.priority = parseInt(cleanValue) || 3;\n            break;\n          case 'format':\n            book.format = cleanValue || 'paper';\n            break;\n          case 'total pages':\n          case 'totalpages':\n            book.totalPages = parseInt(cleanValue) || 0;\n            break;\n          case 'current page':\n          case 'currentpage':\n            book.currentPage = parseInt(cleanValue) || 0;\n            break;\n          case 'progress':\n            const progressStr = cleanValue.replace('%', '');\n            book.progress = parseFloat(progressStr) / 100 || 0;\n            break;\n          case 'language':\n            book.language = cleanValue || 'English';\n            break;\n          case 'tags':\n            book.tags = cleanValue ? cleanValue.split(';').map((t: string) => t.trim()).filter(Boolean) : [];\n            break;\n          case 'notes':\n            book.notes = cleanValue ? cleanValue.split(';').map((n: string) => n.trim()).filter(Boolean) : [];\n            break;\n        }\n      });\n\n      if (book.title && book.author) {\n        books.push(book);\n      }\n    }\n\n    return books;\n  };\n\n  const parseJSON = (text: string): any[] => {\n    try {\n      const data = JSON.parse(text);\n      if (Array.isArray(data)) {\n        return data;\n      } else if (data.books && Array.isArray(data.books)) {\n        return data.books;\n      }\n      return [];\n    } catch {\n      return [];\n    }\n  };\n\n  const handleFileSelect = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const selectedFile = event.target.files?.[0];\n    if (!selectedFile) return;\n\n    setFile(selectedFile);\n    setImportResult(null);\n\n    try {\n      const text = await selectedFile.text();\n      let parsedBooks: any[] = [];\n\n      if (selectedFile.name.endsWith('.csv')) {\n        parsedBooks = parseCSV(text);\n      } else if (selectedFile.name.endsWith('.json')) {\n        parsedBooks = parseJSON(text);\n      }\n\n      setPreview(parsedBooks.slice(0, 5)); // Show first 5 books as preview\n    } catch (error) {\n      toast({\n        title: \"File parsing failed\",\n        description: \"Unable to read the selected file\",\n        variant: \"destructive\",\n      });\n      setFile(null);\n      setPreview(null);\n    }\n  };\n\n  const importMutation = useMutation({\n    mutationFn: async (books: any[]) => {\n      const response = await apiRequest('POST', '/api/books/import', {\n        books,\n        options,\n      });\n      return response.json();\n    },\n    onSuccess: (result: ImportResult) => {\n      setImportResult(result);\n      queryClient.invalidateQueries({ queryKey: ['/api/books'] });\n      \n      if (result.success) {\n        toast({\n          title: \"Import successful\",\n          description: `${result.imported} books imported successfully`,\n        });\n      } else {\n        toast({\n          title: \"Import completed with errors\",\n          description: `${result.imported} books imported, ${result.errors.length} errors`,\n          variant: \"destructive\",\n        });\n      }\n    },\n    onError: () => {\n      toast({\n        title: \"Import failed\",\n        description: \"An error occurred during import\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleImport = async () => {\n    if (!file || !preview) return;\n\n    setImporting(true);\n    try {\n      const text = await file.text();\n      let books: any[] = [];\n\n      if (file.name.endsWith('.csv')) {\n        books = parseCSV(text);\n      } else if (file.name.endsWith('.json')) {\n        books = parseJSON(text);\n      }\n\n      await importMutation.mutateAsync(books);\n    } catch (error) {\n      console.error('Import error:', error);\n    } finally {\n      setImporting(false);\n    }\n  };\n\n  const resetDialog = () => {\n    setFile(null);\n    setPreview(null);\n    setImportResult(null);\n    setImporting(false);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={(newOpen) => {\n      setOpen(newOpen);\n      if (!newOpen) {\n        resetDialog();\n      }\n    }}>\n      <DialogTrigger asChild>\n        {children}\n      </DialogTrigger>\n      <DialogContent className=\"max-w-3xl max-h-[80vh] overflow-y-auto\" data-testid=\"dialog-import\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Upload className=\"h-5 w-5\" />\n            Import Books\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* File Upload */}\n          {!file && (\n            <div>\n              <Label htmlFor=\"file-upload\" className=\"text-base font-medium\">\n                Select File\n              </Label>\n              <div className=\"mt-2\">\n                <input\n                  id=\"file-upload\"\n                  type=\"file\"\n                  accept=\".csv,.json\"\n                  onChange={handleFileSelect}\n                  className=\"block w-full text-sm text-muted-foreground file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-medium file:bg-primary file:text-primary-foreground hover:file:bg-primary/90\"\n                  data-testid=\"input-file-upload\"\n                />\n              </div>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                Supported formats: CSV, JSON\n              </p>\n            </div>\n          )}\n\n          {/* File Info & Preview */}\n          {file && preview && !importResult && (\n            <>\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-base flex items-center justify-between\">\n                    <span className=\"flex items-center gap-2\">\n                      <FileText className=\"h-4 w-4\" />\n                      {file.name}\n                    </span>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={resetDialog}\n                      data-testid=\"button-clear-file\"\n                    >\n                      <X className=\"h-4 w-4\" />\n                    </Button>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                    <div>\n                      <span className=\"text-muted-foreground\">Size:</span>\n                      <span className=\"ml-2 font-medium\">{(file.size / 1024).toFixed(1)} KB</span>\n                    </div>\n                    <div>\n                      <span className=\"text-muted-foreground\">Type:</span>\n                      <span className=\"ml-2 font-medium\">{file.type || 'text/plain'}</span>\n                    </div>\n                    <div>\n                      <span className=\"text-muted-foreground\">Books found:</span>\n                      <span className=\"ml-2 font-medium\">{preview.length}</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Preview */}\n              <div>\n                <Label className=\"text-base font-medium\">Preview (First 5 Books)</Label>\n                <div className=\"mt-2 space-y-2\">\n                  {preview.slice(0, 5).map((book, index) => (\n                    <Card key={index} className=\"bg-muted/30\">\n                      <CardContent className=\"p-3\">\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <div className=\"font-medium\">{book.title}</div>\n                            <div className=\"text-sm text-muted-foreground\">\n                              by {book.author} • {book.genre}\n                            </div>\n                          </div>\n                          <div className=\"flex gap-1\">\n                            <Badge variant=\"outline\">{book.status}</Badge>\n                            <Badge variant=\"outline\">{book.format}</Badge>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n\n              {/* Import Options */}\n              <div>\n                <Label className=\"text-base font-medium\">Import Options</Label>\n                <div className=\"space-y-2 mt-2\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"skip-duplicates\"\n                      checked={options.skipDuplicates}\n                      onCheckedChange={(checked) => setOptions(prev => ({ ...prev, skipDuplicates: !!checked }))}\n                      data-testid=\"checkbox-skip-duplicates\"\n                    />\n                    <Label htmlFor=\"skip-duplicates\" className=\"text-sm\">\n                      Skip duplicate books (same title + author)\n                    </Label>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"update-existing\"\n                      checked={options.updateExisting}\n                      onCheckedChange={(checked) => setOptions(prev => ({ ...prev, updateExisting: !!checked }))}\n                      data-testid=\"checkbox-update-existing\"\n                    />\n                    <Label htmlFor=\"update-existing\" className=\"text-sm\">\n                      Update existing books with new data\n                    </Label>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"preserve-progress\"\n                      checked={options.preserveProgress}\n                      onCheckedChange={(checked) => setOptions(prev => ({ ...prev, preserveProgress: !!checked }))}\n                      data-testid=\"checkbox-preserve-progress\"\n                    />\n                    <Label htmlFor=\"preserve-progress\" className=\"text-sm\">\n                      Preserve existing reading progress\n                    </Label>\n                  </div>\n                </div>\n              </div>\n\n              {/* Import Button */}\n              <div className=\"flex justify-end gap-2 pt-4\">\n                <Button variant=\"outline\" onClick={resetDialog} data-testid=\"button-cancel-import\">\n                  Cancel\n                </Button>\n                <Button \n                  onClick={handleImport} \n                  disabled={importing || preview.length === 0}\n                  data-testid=\"button-start-import\"\n                >\n                  {importing ? (\n                    <>\n                      <div className=\"animate-spin mr-2 h-4 w-4 border-2 border-current border-t-transparent rounded-full\" />\n                      Importing...\n                    </>\n                  ) : (\n                    <>\n                      <Upload className=\"h-4 w-4 mr-2\" />\n                      Import {preview.length} Books\n                    </>\n                  )}\n                </Button>\n              </div>\n            </>\n          )}\n\n          {/* Import Results */}\n          {importResult && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-base flex items-center gap-2\">\n                  {importResult.success ? (\n                    <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                  ) : (\n                    <AlertCircle className=\"h-5 w-5 text-yellow-500\" />\n                  )}\n                  Import Results\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <span className=\"text-muted-foreground\">Successfully imported:</span>\n                    <span className=\"ml-2 font-medium text-green-600\">{importResult.imported}</span>\n                  </div>\n                  <div>\n                    <span className=\"text-muted-foreground\">Duplicates skipped:</span>\n                    <span className=\"ml-2 font-medium text-blue-600\">{importResult.duplicates || 0}</span>\n                  </div>\n                  <div>\n                    <span className=\"text-muted-foreground\">Errors:</span>\n                    <span className=\"ml-2 font-medium text-red-600\">{importResult.errors.length}</span>\n                  </div>\n                </div>\n\n                {importResult.errors.length > 0 && (\n                  <div>\n                    <Label className=\"text-sm font-medium text-red-600\">Errors:</Label>\n                    <div className=\"mt-1 text-xs space-y-1\">\n                      {importResult.errors.slice(0, 5).map((error, index) => (\n                        <div key={index} className=\"text-red-600 bg-red-50 p-2 rounded\">\n                          {error}\n                        </div>\n                      ))}\n                      {importResult.errors.length > 5 && (\n                        <div className=\"text-muted-foreground\">\n                          ... and {importResult.errors.length - 5} more errors\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                )}\n\n                <div className=\"flex justify-end\">\n                  <Button onClick={() => setOpen(false)} data-testid=\"button-close-results\">\n                    Close\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":16575},"client/src/components/reading-goals.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Target, Calendar, BookOpen, TrendingUp, Plus, Edit, Trash2, Award } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Book, ReadingGoal, InsertReadingGoal } from \"@shared/schema\";\n\ninterface ReadingGoalsProps {\n  books: Book[];\n}\n\nexport function ReadingGoals({ books }: ReadingGoalsProps) {\n  const [showGoalDialog, setShowGoalDialog] = useState(false);\n  const [editingGoal, setEditingGoal] = useState<ReadingGoal | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: goals = [] } = useQuery<ReadingGoal[]>({\n    queryKey: ['/api/reading-goals'],\n    queryFn: async () => {\n      const response = await fetch('/api/reading-goals');\n      if (!response.ok) throw new Error('Failed to fetch reading goals');\n      return response.json();\n    },\n  });\n\n  const createGoalMutation = useMutation({\n    mutationFn: async (goal: InsertReadingGoal) => {\n      const response = await apiRequest('POST', '/api/reading-goals', goal);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/reading-goals'] });\n      setShowGoalDialog(false);\n      setEditingGoal(null);\n      toast({ title: \"Reading goal created successfully\" });\n    },\n  });\n\n  const updateGoalMutation = useMutation({\n    mutationFn: async ({ id, updates }: { id: string; updates: Partial<ReadingGoal> }) => {\n      const response = await apiRequest('PATCH', `/api/reading-goals/${id}`, updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/reading-goals'] });\n      setShowGoalDialog(false);\n      setEditingGoal(null);\n      toast({ title: \"Reading goal updated successfully\" });\n    },\n  });\n\n  const deleteGoalMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest('DELETE', `/api/reading-goals/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/reading-goals'] });\n      toast({ title: \"Reading goal deleted successfully\" });\n    },\n  });\n\n  const [goalForm, setGoalForm] = useState<{\n    title: string;\n    description: string;\n    type: 'books' | 'pages' | 'minutes';\n    target: number;\n    period: 'daily' | 'weekly' | 'monthly' | 'yearly';\n    startDate: string;\n    endDate: string;\n    isActive: boolean;\n  }>({\n    title: '',\n    description: '',\n    type: 'books',\n    target: 12,\n    period: 'yearly',\n    startDate: new Date().toISOString().split('T')[0],\n    endDate: new Date(new Date().getFullYear() + 1, 0, 1).toISOString().split('T')[0],\n    isActive: true,\n  });\n\n  const resetForm = () => {\n    setGoalForm({\n      title: '',\n      description: '',\n      type: 'books',\n      target: 12,\n      period: 'yearly',\n      startDate: new Date().toISOString().split('T')[0],\n      endDate: new Date(new Date().getFullYear() + 1, 0, 1).toISOString().split('T')[0],\n      isActive: true,\n    });\n  };\n\n  const handleCreateGoal = async () => {\n    if (!goalForm.title || goalForm.target <= 0) {\n      toast({\n        title: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!goalForm.startDate || !goalForm.endDate) {\n      toast({\n        title: \"Please select valid start and end dates\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      if (editingGoal) {\n        await updateGoalMutation.mutateAsync({\n          id: editingGoal.id,\n          updates: goalForm,\n        });\n      } else {\n        await createGoalMutation.mutateAsync(goalForm);\n      }\n    } catch (error) {\n      console.error(\"Error saving goal:\", error);\n      toast({\n        title: \"Failed to save reading goal\",\n        description: \"Please try again\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const openEditDialog = (goal: ReadingGoal) => {\n    setEditingGoal(goal);\n    setGoalForm({\n      title: goal.title,\n      description: goal.description || '',\n      type: goal.type,\n      target: goal.target,\n      period: goal.period,\n      startDate: goal.startDate,\n      endDate: goal.endDate,\n      isActive: goal.isActive,\n    });\n    setShowGoalDialog(true);\n  };\n\n  const getGoalProgress = (goal: ReadingGoal) => {\n    const now = new Date();\n    const startDate = new Date(goal.startDate);\n    const endDate = new Date(goal.endDate);\n    \n    if (now < startDate || now > endDate) {\n      return { current: 0, percentage: 0, isOverdue: now > endDate };\n    }\n\n    let current = 0;\n    \n    switch (goal.type) {\n      case 'books':\n        current = books.filter(book => \n          book.status === 'finished' && \n          book.completedAt &&\n          new Date(book.completedAt) >= startDate &&\n          new Date(book.completedAt) <= endDate\n        ).length;\n        break;\n      case 'pages':\n        current = books\n          .filter(book => \n            book.completedAt &&\n            new Date(book.completedAt) >= startDate &&\n            new Date(book.completedAt) <= endDate\n          )\n          .reduce((total, book) => total + (book.totalPages || 0), 0);\n        break;\n      case 'minutes':\n        // This would require reading sessions data\n        current = 0;\n        break;\n    }\n\n    const percentage = Math.min((current / goal.target) * 100, 100);\n    return { current, percentage, isOverdue: false };\n  };\n\n  const getGoalTypeLabel = (type: string) => {\n    switch (type) {\n      case 'books': return 'Books';\n      case 'pages': return 'Pages';\n      case 'minutes': return 'Minutes';\n      default: return type;\n    }\n  };\n\n  const getPeriodLabel = (period: string) => {\n    switch (period) {\n      case 'daily': return 'Daily';\n      case 'weekly': return 'Weekly';  \n      case 'monthly': return 'Monthly';\n      case 'yearly': return 'Yearly';\n      default: return period;\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"reading-goals\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-serif font-semibold\">Reading Goals</h2>\n          <p className=\"text-muted-foreground\">Track your reading progress and stay motivated</p>\n        </div>\n        <Dialog open={showGoalDialog} onOpenChange={(open) => {\n          setShowGoalDialog(open);\n          if (!open) {\n            setEditingGoal(null);\n            resetForm();\n          }\n        }}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-create-goal\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              New Goal\n            </Button>\n          </DialogTrigger>\n          <DialogContent data-testid=\"dialog-goal-form\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingGoal ? 'Edit Reading Goal' : 'Create Reading Goal'}\n              </DialogTitle>\n            </DialogHeader>\n            \n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"goal-title\">Goal Title *</Label>\n                <Input\n                  id=\"goal-title\"\n                  placeholder=\"e.g., Read 12 books this year\"\n                  value={goalForm.title}\n                  onChange={(e) => setGoalForm(prev => ({ ...prev, title: e.target.value }))}\n                  data-testid=\"input-goal-title\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"goal-description\">Description</Label>\n                <Textarea\n                  id=\"goal-description\"\n                  placeholder=\"Optional description for your goal\"\n                  value={goalForm.description}\n                  onChange={(e) => setGoalForm(prev => ({ ...prev, description: e.target.value }))}\n                  data-testid=\"textarea-goal-description\"\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label>Goal Type</Label>\n                  <Select value={goalForm.type} onValueChange={(value: any) => setGoalForm(prev => ({ ...prev, type: value }))}>\n                    <SelectTrigger data-testid=\"select-goal-type\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"books\">Books</SelectItem>\n                      <SelectItem value=\"pages\">Pages</SelectItem>\n                      <SelectItem value=\"minutes\">Minutes</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"goal-target\">Target *</Label>\n                  <Input\n                    id=\"goal-target\"\n                    type=\"number\"\n                    min=\"1\"\n                    value={goalForm.target}\n                    onChange={(e) => setGoalForm(prev => ({ ...prev, target: parseInt(e.target.value) || 0 }))}\n                    data-testid=\"input-goal-target\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label>Time Period</Label>\n                <Select value={goalForm.period} onValueChange={(value: any) => setGoalForm(prev => ({ ...prev, period: value }))}>\n                  <SelectTrigger data-testid=\"select-goal-period\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"daily\">Daily</SelectItem>\n                    <SelectItem value=\"weekly\">Weekly</SelectItem>\n                    <SelectItem value=\"monthly\">Monthly</SelectItem>\n                    <SelectItem value=\"yearly\">Yearly</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"start-date\">Start Date</Label>\n                  <Input\n                    id=\"start-date\"\n                    type=\"date\"\n                    value={goalForm.startDate}\n                    onChange={(e) => setGoalForm(prev => ({ ...prev, startDate: e.target.value }))}\n                    data-testid=\"input-start-date\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"end-date\">End Date</Label>\n                  <Input\n                    id=\"end-date\"\n                    type=\"date\"\n                    value={goalForm.endDate}\n                    onChange={(e) => setGoalForm(prev => ({ ...prev, endDate: e.target.value }))}\n                    data-testid=\"input-end-date\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"flex justify-end gap-2 pt-4\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setShowGoalDialog(false)}\n                  data-testid=\"button-cancel-goal\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  onClick={handleCreateGoal}\n                  disabled={createGoalMutation.isPending || updateGoalMutation.isPending}\n                  data-testid=\"button-save-goal\"\n                >\n                  {createGoalMutation.isPending || updateGoalMutation.isPending ? (\n                    <>\n                      <div className=\"animate-spin mr-2 h-4 w-4 border-2 border-current border-t-transparent rounded-full\" />\n                      Saving...\n                    </>\n                  ) : (\n                    editingGoal ? 'Update Goal' : 'Create Goal'\n                  )}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Goals Grid */}\n      {goals.length === 0 ? (\n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center py-8 text-center\">\n            <Target className=\"h-12 w-12 text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-medium mb-2\">No Reading Goals Yet</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Set reading goals to track your progress and stay motivated\n            </p>\n            <Button onClick={() => setShowGoalDialog(true)}>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Create Your First Goal\n            </Button>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n          {goals.map((goal) => {\n            const progress = getGoalProgress(goal);\n            const isCompleted = progress.percentage >= 100;\n            \n            return (\n              <Card key={goal.id} className={`hover-elevate ${!goal.isActive ? 'opacity-60' : ''}`}>\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-base\">{goal.title}</CardTitle>\n                    <div className=\"flex items-center gap-1\">\n                      {isCompleted && <Award className=\"h-4 w-4 text-yellow-500\" />}\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => openEditDialog(goal)}\n                        data-testid={`button-edit-goal-${goal.id}`}\n                      >\n                        <Edit className=\"h-3 w-3\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => deleteGoalMutation.mutate(goal.id)}\n                        data-testid={`button-delete-goal-${goal.id}`}\n                      >\n                        <Trash2 className=\"h-3 w-3\" />\n                      </Button>\n                    </div>\n                  </div>\n                  {goal.description && (\n                    <p className=\"text-sm text-muted-foreground\">{goal.description}</p>\n                  )}\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {/* Progress Bar */}\n                  <div>\n                    <div className=\"flex justify-between text-sm mb-2\">\n                      <span>{progress.current} / {goal.target} {getGoalTypeLabel(goal.type)}</span>\n                      <span className={isCompleted ? 'text-green-600 font-medium' : ''}>\n                        {Math.round(progress.percentage)}%\n                      </span>\n                    </div>\n                    <Progress \n                      value={progress.percentage} \n                      className=\"h-2\"\n                    />\n                  </div>\n\n                  {/* Goal Details */}\n                  <div className=\"flex flex-wrap gap-2\">\n                    <Badge variant=\"outline\">\n                      <Calendar className=\"h-3 w-3 mr-1\" />\n                      {getPeriodLabel(goal.period)}\n                    </Badge>\n                    <Badge variant=\"outline\">\n                      <Target className=\"h-3 w-3 mr-1\" />\n                      {getGoalTypeLabel(goal.type)}\n                    </Badge>\n                    {isCompleted && (\n                      <Badge className=\"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\">\n                        <Award className=\"h-3 w-3 mr-1\" />\n                        Completed\n                      </Badge>\n                    )}\n                  </div>\n\n                  {/* Dates */}\n                  <div className=\"text-xs text-muted-foreground\">\n                    {new Date(goal.startDate).toLocaleDateString()} - {new Date(goal.endDate).toLocaleDateString()}\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":16574},"client/src/pages/goals.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { ReadingGoals } from \"@/components/reading-goals\";\nimport type { Book } from \"@shared/schema\";\n\nexport default function Goals() {\n  const { data: books = [], isLoading } = useQuery<Book[]>({\n    queryKey: ['/api/books'],\n    queryFn: async () => {\n      const response = await fetch('/api/books');\n      if (!response.ok) throw new Error('Failed to fetch books');\n      return response.json();\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-64\">\n        <div className=\"animate-spin h-8 w-8 border-2 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-6\">\n      <ReadingGoals books={books} />\n    </div>\n  );\n}","size_bytes":811}},"version":1}